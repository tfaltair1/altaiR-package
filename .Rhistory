a1_username <- "tfantuzzo@altair.com"
a1_password <- rstudioapi::askForPassword("A1 Password: ")
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
executable <- "./MacOS/almutil"
args <- c(
"-a1auth",
paste("-username", format_arg(a1_username)),
paste("-passwd", format_arg(a1_password))
)
output <- system2(command = executable, args = args, stdout = TRUE, stderr = TRUE)
output
output <- system2(command = executable, args = args, stdout = TRUE, stderr = TRUE)
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- "./MacOS/almutil"
command <- paste(
shQuote(executable),
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password),
"-system"
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
auth("tfantuzzo@altair.com")
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- "./MacOS/almutil"
command <- paste(
shQuote(executable),
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password)
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
#' Compile Raw Code
#'
#' @param code A string containing the raw code to compile.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable and the log file.
#' @export
compile <- function(code, finalDSPath = "./sample_data.sas7bdat") {
temp_file <- tempfile(fileext = ".sas")
writeLines(code, temp_file)
base_name <- tools::file_path_sans_ext(basename(temp_file))
output <- system2("./MacOS/wps", args = c(temp_file), stdout = TRUE, stderr = TRUE)
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
unlink(temp_file)
unlink(log_file)
dataset <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))
}
#' Run a Local File
#'
#' @param file_path A string containing the path to the file to be run.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable.
#' @export
runFile <- function(file_path, finalDSPath) {
output <- system2("./MacOS/wps", args = c(file_path), stdout = TRUE, stderr = TRUE)
base_name <- tools::file_path_sans_ext(basename(file_path))
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
dataset_fromfile <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))}
auth("tfantuzzo@altair.com")
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- './MacOS/almutil'
command <- paste(
shQuote(executable),
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password)
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
#' Compile Raw Code
#'
#' @param code A string containing the raw code to compile.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable and the log file.
#' @export
compile <- function(code, finalDSPath = "./sample_data.sas7bdat") {
temp_file <- tempfile(fileext = ".sas")
writeLines(code, temp_file)
base_name <- tools::file_path_sans_ext(basename(temp_file))
output <- system2("./MacOS/wps", args = c(temp_file), stdout = TRUE, stderr = TRUE)
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
unlink(temp_file)
unlink(log_file)
dataset <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))
}
#' Run a Local File
#'
#' @param file_path A string containing the path to the file to be run.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable.
#' @export
runFile <- function(file_path, finalDSPath) {
output <- system2("./MacOS/wps", args = c(file_path), stdout = TRUE, stderr = TRUE)
base_name <- tools::file_path_sans_ext(basename(file_path))
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
dataset_fromfile <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))}
auth("tfantuzzo@altair.com")
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- './MacOS/almutil'
command <- paste(
executable,
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password)
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
#' Compile Raw Code
#'
#' @param code A string containing the raw code to compile.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable and the log file.
#' @export
compile <- function(code, finalDSPath = "./sample_data.sas7bdat") {
temp_file <- tempfile(fileext = ".sas")
writeLines(code, temp_file)
base_name <- tools::file_path_sans_ext(basename(temp_file))
output <- system2("./MacOS/wps", args = c(temp_file), stdout = TRUE, stderr = TRUE)
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
unlink(temp_file)
unlink(log_file)
dataset <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))
}
#' Run a Local File
#'
#' @param file_path A string containing the path to the file to be run.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable.
#' @export
runFile <- function(file_path, finalDSPath) {
output <- system2("./MacOS/wps", args = c(file_path), stdout = TRUE, stderr = TRUE)
base_name <- tools::file_path_sans_ext(basename(file_path))
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
dataset_fromfile <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))}
auth("tfantuzzo@altair.com")
setwd("~/Desktop/altaiR/R")
setwd("~/Desktop/altaiR")
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- './R/MacOS/almutil'
command <- paste(
executable,
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password)
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
#' Compile Raw Code
#'
#' @param code A string containing the raw code to compile.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable and the log file.
#' @export
compile <- function(code, finalDSPath = "./sample_data.sas7bdat") {
temp_file <- tempfile(fileext = ".sas")
writeLines(code, temp_file)
base_name <- tools::file_path_sans_ext(basename(temp_file))
output <- system2("./MacOS/wps", args = c(temp_file), stdout = TRUE, stderr = TRUE)
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
unlink(temp_file)
unlink(log_file)
dataset <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))
}
#' Run a Local File
#'
#' @param file_path A string containing the path to the file to be run.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable.
#' @export
runFile <- function(file_path, finalDSPath) {
output <- system2("./MacOS/wps", args = c(file_path), stdout = TRUE, stderr = TRUE)
base_name <- tools::file_path_sans_ext(basename(file_path))
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
dataset_fromfile <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))}
auth("tfantuzzo@altair.com")
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- './R/MacOS/almutil'
command <- paste(
executable,
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password)
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
#' Compile Raw Code
#'
#' @param code A string containing the raw code to compile.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable and the log file.
#' @export
compile <- function(code, finalDSPath = "./sample_data.sas7bdat") {
temp_file <- tempfile(fileext = ".sas")
writeLines(code, temp_file)
base_name <- tools::file_path_sans_ext(basename(temp_file))
output <- system2("./MacOS/wps", args = c(temp_file), stdout = TRUE, stderr = TRUE)
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
unlink(temp_file)
unlink(log_file)
dataset <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))
}
#' Run a Local File
#'
#' @param file_path A string containing the path to the file to be run.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable.
#' @export
runFile <- function(file_path, finalDSPath) {
output <- system2("./MacOS/wps", args = c(file_path), stdout = TRUE, stderr = TRUE)
base_name <- tools::file_path_sans_ext(basename(file_path))
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
dataset_fromfile <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))}
auth("tfantuzzo@altair.com")
#' Authenticate License
#'
#' @param a1_username A string containing AltairOne username.
#' @return The output from the executable.
#' @export
auth <- function(a1_username) {
# Prompt for the password
a1_password <- getPass::getPass("A1 Password: ")
# Format the username and password
format_arg <- function(arg) {
paste0("'", gsub('"', '', arg), "'")
}
# Define the executable path and arguments
executable <- './R/MacOS/almutil'
command <- paste(
executable,
"-a1auth",
"-username", format_arg(a1_username),
"-passwd", format_arg(a1_password)
)
# Print the command for debugging purposes
cat("Executing command: ", command, "\n")
# Run the command and capture the output
output <- tryCatch({
system(command, intern = TRUE)
}, error = function(e) {
message("Error in running command: ", e$message)
return(NULL)
})
# Return the output or error message
if (is.null(output)) {
return("Error in running command")
} else {
return(output)
}
}
#' Compile Raw Code
#'
#' @param code A string containing the raw code to compile.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable and the log file.
#' @export
compile <- function(code, finalDSPath = "./sample_data.sas7bdat") {
temp_file <- tempfile(fileext = ".sas")
writeLines(code, temp_file)
base_name <- tools::file_path_sans_ext(basename(temp_file))
output <- system2("./R/MacOS/wps", args = c(temp_file), stdout = TRUE, stderr = TRUE)
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
unlink(temp_file)
unlink(log_file)
dataset <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))
}
#' Run a Local File
#'
#' @param file_path A string containing the path to the file to be run.
#' @param finalDSPath The path to the final dataset in your sas code, where you send the .sas7bdat file
#' @return The output from the executable.
#' @export
runFile <- function(file_path, finalDSPath) {
output <- system2("./R/MacOS/wps", args = c(file_path), stdout = TRUE, stderr = TRUE)
base_name <- tools::file_path_sans_ext(basename(file_path))
log_file <- paste0("./",base_name, ".log")
log_contents <- if (file.exists(log_file)) {
readLines(log_file)
} else {
"Log file does not exist."
}
dataset_fromfile <<- haven::read_sas(finalDSPath)
return(list(executable_output = output, log_contents = log_contents))}
devtools::build()
devtools::install()
devtools::build()
