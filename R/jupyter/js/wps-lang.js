"Generated from Java with JSweet 1.1.0-SNAPSHOT - http://www.jsweet.org";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var utils;
                    (function (utils) {
                        var StringUtils = /** @class */ (function () {
                            function StringUtils() {
                            }
                            /**
                             * {@link String#endsWith(String)} not transpiled, so implemented here.
                             *
                             * @param string
                             * @param suffix
                             * @return
                             */
                            StringUtils.endsWith = function (string, suffix) {
                                if (string.length >= suffix.length) {
                                    return (string.substring(string.length - suffix.length) === suffix);
                                }
                                return false;
                            };
                            /**
                             * Null safe {@link String#toUpperCase()}
                             *
                             * @param str
                             * @return
                             */
                            StringUtils.toUpperCase = function (str) {
                                return str != null ? str.toUpperCase() : null;
                            };
                            /**
                             * Check if the string is upper case (string is the same as result of {@link String#toUpperCase()})
                             *
                             * @param str
                             * @return true if the entire string is non-null and upper case.
                             */
                            StringUtils.isUpperCase = function (str) {
                                return str != null && (str.toUpperCase() === str);
                            };
                            /**
                             * Check if the string contains the substring (case insensitive).
                             *
                             * @param string
                             * @param subString
                             * @return
                             */
                            StringUtils.stringContainsSubstringCaseInsensitive = function (string, subString) {
                                return string.toLowerCase().indexOf(subString.toLowerCase()) >= 0;
                            };
                            return StringUtils;
                        }());
                        utils.StringUtils = StringUtils;
                    })(utils = context.utils || (context.utils = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var common;
                    (function (common) {
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        var SasLanguage = /** @class */ (function () {
                            function SasLanguage() {
                            }
                            SasLanguage.asString = function (c) {
                                return "" + c;
                            };
                            /**
                             * Determines if the provided character is a bracket of some kind.
                             *
                             * @param c - The character to determine if it's a bracket.
                             * @return The bracket character that 'c' matches, or null if it is not a bracket.
                             */
                            SasLanguage.isBracket = function (c) {
                                var result = null;
                                switch ((c)) {
                                    case SasLanguage.BRACKET_CLOSE:
                                        result = SasLanguage.BRACKET_CLOSE;
                                        break;
                                    case SasLanguage.BRACKET_CURLY_CLOSE:
                                        result = SasLanguage.BRACKET_CURLY_CLOSE;
                                        break;
                                    case SasLanguage.BRACKET_CURLY_OPEN:
                                        result = SasLanguage.BRACKET_CURLY_OPEN;
                                        break;
                                    case SasLanguage.BRACKET_OPEN:
                                        result = SasLanguage.BRACKET_OPEN;
                                        break;
                                    case SasLanguage.BRACKET_SQUARE_CLOSE:
                                        result = SasLanguage.BRACKET_SQUARE_CLOSE;
                                        break;
                                    case SasLanguage.BRACKET_SQUARE_OPEN:
                                        result = SasLanguage.BRACKET_SQUARE_OPEN;
                                        break;
                                }
                                return result;
                            };
                            SasLanguage.isDigit = function (c) {
                                return (c).charCodeAt(0) >= ('0').charCodeAt(0) && (c).charCodeAt(0) <= ('9').charCodeAt(0);
                            };
                            SasLanguage.isHexDigit = function (c) {
                                return (c).charCodeAt(0) >= ('A').charCodeAt(0) && (c).charCodeAt(0) <= ('F').charCodeAt(0) || (c).charCodeAt(0) >= ('a').charCodeAt(0) && (c).charCodeAt(0) <= ('f').charCodeAt(0);
                            };
                            SasLanguage.isHexEnd = function (c) {
                                return c == 'X' || c == 'x';
                            };
                            /**
                             * Determines if the provided char is a boundary character for a string (literal or fragment).
                             * Permitted characters are {@link #SINGLE_QUOTE} and {@link #DOUBLE_QUOTE}.
                             *
                             * @param c - The char to verify
                             * @return - True if the character is a valid boundary character for a string
                             */
                            SasLanguage.isStringLiteralBoundaryChar = function (c) {
                                var result = false;
                                if (c == SasLanguage.DOUBLE_QUOTE || c == SasLanguage.SINGLE_QUOTE) {
                                    result = true;
                                }
                                return result;
                            };
                            /**
                             * Checks if the provided character is a valid first character for an identifier.
                             * This can also apply to macro variable and macro function names when the masking characters are
                             * ignored.
                             *
                             * @param c
                             * @return true if letter or underscore
                             */
                            SasLanguage.isIdentifierStartChar = function (c) {
                                return c == SasLanguage.UNDERSCORE || ((c).charCodeAt(0) >= ('A').charCodeAt(0) && (c).charCodeAt(0) <= ('Z').charCodeAt(0)) || ((c).charCodeAt(0) >= ('a').charCodeAt(0) && (c).charCodeAt(0) <= ('z').charCodeAt(0));
                            };
                            /**
                             * Checks if the provided character is a valid character (second or subsequent character only) for an
                             * identifier.
                             * This can also apply to macro variable and macro function names
                             *
                             * @param c
                             * @return true if digit letter or underscore
                             */
                            SasLanguage.isIdentifierChar = function (c) {
                                return c == SasLanguage.UNDERSCORE || ((c).charCodeAt(0) >= ('A').charCodeAt(0) && (c).charCodeAt(0) <= ('Z').charCodeAt(0)) || ((c).charCodeAt(0) >= ('a').charCodeAt(0) && (c).charCodeAt(0) <= ('z').charCodeAt(0)) || ((c).charCodeAt(0) >= ('0').charCodeAt(0) && (c).charCodeAt(0) <= ('9').charCodeAt(0));
                            };
                            /**
                             * Determines if the provide character is a valid separator between different identifiers. It is if
                             * 'c' is whitespace, a semi-colon, a comma or a bracket of any kind. It does not consider
                             * operators as valid separators.
                             *
                             * @param c - The character to check.
                             * @return - True if the character is a valid separator between different identifiers, false
                             * otherwise.
                             */
                            SasLanguage.isIdentifierSeparatorCharacter = function (c) {
                                return SasLanguage.isWhitespace(c) || SasLanguage.SEMI_COLON == c || SasLanguage.COMMA == c || SasLanguage.isBracket(c) != null;
                            };
                            /**
                             * See if a string_literal looks like: 'getTitle001',
                             *
                             * @param identifier String to test.
                             * @return true if the string_literal starts with an alpha and ends with numeric.
                             */
                            SasLanguage.isNumberedIdentifier = function (identifier) {
                                return identifier != null && identifier.length > 1 && SasLanguage.isDigit(identifier.charAt(identifier.length - 1)) && SasLanguage.isIdentifierStartChar(identifier.charAt(0));
                            };
                            /**
                             * Checks if the provided char is one of the standard special characters masked byu all macro quoting
                             * functions.
                             * This method, therefore, excludes single and double quotes and parentheses.
                             *
                             * @param c - The character to check
                             * @return THre if the character is a special character, false otherwise.
                             */
                            SasLanguage.isMacroQuotingFunctionSpecialCharacter = function (c) {
                                return c == SasLanguage.PLUS || c == SasLanguage.MINUS || c == SasLanguage.ASTERISK || c == SasLanguage.LESS_THAN || c == SasLanguage.GREATER_THAN || c == SasLanguage.FORWARD_SLASH || c == SasLanguage.EQUALS || c == SasLanguage.BROKEN_BAR || c == SasLanguage.CARET || c == SasLanguage.PIPE || c == SasLanguage.TILDE || c == SasLanguage.SEMI_COLON || c == SasLanguage.COMMA || c == SasLanguage.HASH;
                            };
                            /**
                             * Checks if the provided character is a character mask.
                             *
                             * @param c - The character to check.
                             * @return true if character is a character mask.
                             */
                            SasLanguage.isCharacterMask = function (c) {
                                return c == SasLanguage.CHARACTER_MASK;
                            };
                            /**
                             * Remove numbers off the end of the String, 'getTitle001' -> 'getTitle'.
                             *
                             * @param identifier String to truncate
                             * @return truncated string_literal
                             */
                            SasLanguage.truncateNumberedIdentifier = function (identifier) {
                                var length = identifier.length;
                                while ((SasLanguage.isDigit(identifier.charAt(length - 1)))) {
                                    length--;
                                }
                                ;
                                return identifier.substring(0, length);
                            };
                            /**
                             * Check if a string is a comparison mnemonic e.g. IF a <strong>EQ</strong> b
                             *
                             * @param str
                             * @return
                             */
                            SasLanguage.isComparisonMnemonic = function (str) {
                                switch ((str)) {
                                    case SasLanguage.EQ:
                                    case SasLanguage.GT:
                                    case SasLanguage.GE:
                                    case SasLanguage.LT:
                                    case SasLanguage.LE:
                                    case SasLanguage.NE:
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Check if a string is boolean mnemonic e.g. IF a <strong>OR</strong> b
                             *
                             * @param str
                             * @return
                             */
                            SasLanguage.isBooleanMnemonic = function (str) {
                                switch ((str)) {
                                    case SasLanguage.OR:
                                    case SasLanguage.AND:
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Check if the current character combined with previous ones are a valid comparison operator. <br/>
                             * Supports: <br/>
                             * ><br/>
                             * &lt;<br/>
                             * =<br/>
                             * >=<br/>
                             * &lt;=<br/>
                             * <br/>
                             * Also allowed with colon:<br/>
                             * >:<br/>
                             * &lt;:<br/>
                             * =:<br/>
                             * >=:<br/>
                             * &lt;=:<br/>
                             * <br/>
                             * Not equals:<br/>
                             * ~=<br/>
                             * ^=<br/>
                             * &#172;=<br/>
                             *
                             *
                             * @param c last char
                             * @return
                             */
                            SasLanguage.isComparisonOperator = function (str) {
                                switch ((str)) {
                                    case "=":
                                    case ">":
                                    case "<":
                                    case ">=":
                                    case "<=":
                                    case ">:":
                                    case "<:":
                                    case "=:":
                                    case ">=:":
                                    case "<=:":
                                    case "~=":
                                    case "^=":
                                    case "" + SasLanguage.BROKEN_BAR + "=":
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Also includes operators where GT is after the EQ etc:<br/>
                             * =><br/>
                             * =&lt;<br/>
                             * =>:<br/>
                             * =&lt;:<br/>
                             *
                             * only applicable to IF statements.
                             */
                            SasLanguage.isIfComparisonOperator = function (str) {
                                switch ((str)) {
                                    case "=>":
                                    case "=<":
                                    case "=>:":
                                    case "=<:":
                                        return true;
                                }
                                return SasLanguage.isComparisonOperator(str);
                            };
                            /**
                             * Overridden to include extra not-equals:<br/>
                             * &lt;><br/>
                             *
                             * Also sounds-like operator:<br/>
                             * =*
                             *
                             * only applicable to WHERE statements.
                             */
                            SasLanguage.isWhereComparisonOperator = function (str) {
                                switch ((str)) {
                                    case "<>":
                                    case "=*":
                                }
                                return SasLanguage.isComparisonOperator(str);
                            };
                            /**
                             * Exclude min-max
                             */
                            SasLanguage.isWhereArithmeticOperator = function (str) {
                                switch ((str)) {
                                    case "><":
                                    case "<>":
                                        return false;
                                }
                                return SasLanguage.isArithmeticOperator(str);
                            };
                            /**
                             * Check if the current character combined with previous ones are a valid arithmetic operator. <br/>
                             * Supports: <br/>
                             * ** exponentiation <br/>
                             * &lt;> max <br/>
                             * >&lt; min <br/>
                             * * multiply <br/>
                             * - minus <br/>
                             * + plus <br/>
                             * / divide
                             *
                             * @param operator - The two characters that form the operator.
                             * @return
                             */
                            SasLanguage.isArithmeticOperator = function (str) {
                                switch ((str)) {
                                    case "><":
                                    case "<>":
                                    case "**":
                                    case "*":
                                    case "+":
                                    case "-":
                                    case "/":
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Overridden to include:<br/>
                             * || <br/>
                             * &#166;&#166; <br/>
                             */
                            SasLanguage.isWhereConcatenationOperator = function (str) {
                                switch ((str)) {
                                    case "||":
                                    case "" + SasLanguage.BROKEN_BAR + SasLanguage.BROKEN_BAR:
                                        return true;
                                }
                                return SasLanguage.isConcatenationOperator(str);
                            };
                            SasLanguage.isConcatenationOperator$java_lang_String = function (str) {
                                switch ((str)) {
                                    case "||":
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Overridden to include:<br/>
                             * !
                             */
                            SasLanguage.isWhereBooleanOperator = function (str) {
                                switch ((str)) {
                                    case "!":
                                        return true;
                                }
                                return SasLanguage.isBooleanOperator(str);
                            };
                            SasLanguage.isBooleanOperator$java_lang_String = function (str) {
                                switch ((str)) {
                                    case "!":
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Check if the current character combined with previous ones are a valid boolean operator. <br/>
                             * Supports: <br/>
                             * | <br/>
                             * &amp; <br/>
                             * &#166; <br/>
                             *
                             * @param c last char
                             * @return
                             */
                            SasLanguage.isBooleanOperator = function (prevChar, c) {
                                if ((typeof prevChar === 'string') && (typeof c === 'string')) {
                                    if (prevChar == SasLanguage.NULL_CHARACTER) {
                                        return c == SasLanguage.BROKEN_BAR || c == SasLanguage.OPERATOR_OR || c == SasLanguage.OPERATOR_AND;
                                    }
                                    return false;
                                }
                                else if ((typeof prevChar === 'string') && c == null) {
                                    return com.wpc.wps.language.context.common.SasLanguage.isBooleanOperator$java_lang_String(prevChar);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            /**
                             * Check if the current character combined with previous ones are a valid string concatenation
                             * operator. <br/>
                             * Supports: '||'
                             * (broken bars etc. return false)
                             *
                             * @param c last char
                             * @return
                             */
                            SasLanguage.isConcatenationOperator = function (prevChar, c) {
                                if ((typeof prevChar === 'string') && (typeof c === 'string')) {
                                    return prevChar == SasLanguage.PIPE && c == SasLanguage.PIPE;
                                }
                                else if ((typeof prevChar === 'string') && c == null) {
                                    return com.wpc.wps.language.context.common.SasLanguage.isConcatenationOperator$java_lang_String(prevChar);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            /**
                             * Check if it's a valid prefix character: can be arithmetic or boolean NOT.<br/>
                             * Supports: <br/>
                             * + <br/>
                             * - <br/>
                             * &#186; <br/>
                             * ~ <br/>
                             * &#172; <br/>
                             *
                             * @param c last char
                             * @return
                             */
                            SasLanguage.isPrefixOperator = function (prevChar, c) {
                                if (prevChar != SasLanguage.NULL_CHARACTER && prevChar != SasLanguage.EQUALS && prevChar != SasLanguage.GREATER_THAN && prevChar != SasLanguage.LESS_THAN) {
                                    return false;
                                }
                                return c == SasLanguage.PLUS || c == SasLanguage.MINUS || c == SasLanguage.RING_OP || c == SasLanguage.TILDE || c == SasLanguage.OPERATOR_NOT;
                            };
                            /**
                             * Check if it's a missing character.<br/>
                             * Supports: <br/>
                             * . <br/>
                             *
                             * @param c last char
                             * @return
                             */
                            SasLanguage.isMissingOperator = function (c) {
                                return c == SasLanguage.DOT;
                            };
                            SasLanguage.isWhitespace = function (c) {
                                switch ((c)) {
                                    case SasLanguage.TAB:
                                    case SasLanguage.SPACE:
                                    case SasLanguage.CARRIAGE_RETURN:
                                    case SasLanguage.NEWLINE:
                                        return true;
                                }
                                return false;
                            };
                            /**
                             * Is '(' '[' '{'
                             *
                             * @param c
                             * @return
                             */
                            SasLanguage.isBracketOpen = function (c) {
                                return c == SasLanguage.BRACKET_OPEN || c == SasLanguage.BRACKET_CURLY_OPEN || c == SasLanguage.BRACKET_SQUARE_OPEN;
                            };
                            /**
                             * Is ')' ']' '}'
                             *
                             * @param c
                             * @return
                             */
                            SasLanguage.isBracketClose = function (c) {
                                return c == SasLanguage.BRACKET_CLOSE || c == SasLanguage.BRACKET_CURLY_CLOSE || c == SasLanguage.BRACKET_SQUARE_CLOSE;
                            };
                            /**
                             * For a string literal, e.g. 'sponge' or 'sponge'n or '141008'd etc.
                             *
                             * Remove the quotes and the suffix letter (if any). Supports fragments, so will strip just the
                             * opening or closing quote (and letter suffix).
                             *
                             * @param string
                             *
                             * @return string without quotes or suffix letter
                             */
                            SasLanguage.stripStringLiteral = function (string) {
                                var returnString = string;
                                var upperCase = returnString.toUpperCase();
                                for (var i = 0; i < SasLanguage.stringLiteralSuffixes.length; i++) {
                                    var suffix = SasLanguage.stringLiteralSuffixes[i];
                                    if (StringUtils.endsWith(upperCase, suffix)) {
                                        returnString = returnString.substring(0, returnString.length - suffix.length);
                                        break;
                                    }
                                }
                                if ( /* startsWith */(function (str, searchString, position) {
                                    if (position === void 0) { position = 0; }
                                    return str.substr(position, searchString.length) === searchString;
                                })(returnString, SasLanguage.asString(SasLanguage.SINGLE_QUOTE)) || /* startsWith */ (function (str, searchString, position) {
                                    if (position === void 0) { position = 0; }
                                    return str.substr(position, searchString.length) === searchString;
                                })(returnString, SasLanguage.asString(SasLanguage.DOUBLE_QUOTE))) {
                                    returnString = returnString.substring(1);
                                }
                                return returnString;
                            };
                            SasLanguage.isSqlAggregationFunction = function (identifier) {
                                switch ((identifier)) {
                                    case SasLanguage.AVG:
                                    case SasLanguage.MEAN:
                                    case SasLanguage.COUNT:
                                    case SasLanguage.FREQ:
                                    case SasLanguage.N:
                                    case SasLanguage.CSS:
                                    case SasLanguage.CV:
                                    case SasLanguage.MAX:
                                    case SasLanguage.MIN:
                                    case SasLanguage.NMISS:
                                    case SasLanguage.PRT:
                                    case SasLanguage.RANGE:
                                    case SasLanguage.STD:
                                    case SasLanguage.STDERR:
                                    case SasLanguage.SUM:
                                    case SasLanguage.SUMWGT:
                                    case SasLanguage.T:
                                    case SasLanguage.USS:
                                    case SasLanguage.VAR:
                                    case SasLanguage.COALESCE:
                                    case SasLanguage.COALESCEC:
                                    case SasLanguage.MONOTONIC:
                                        return true;
                                }
                                return false;
                            };
                            SasLanguage.getSqlAggregateFunctions = function () {
                                return [SasLanguage.AVG, SasLanguage.MEAN, SasLanguage.COUNT, SasLanguage.FREQ, SasLanguage.N, SasLanguage.CSS, SasLanguage.CV, SasLanguage.MAX, SasLanguage.MIN, SasLanguage.NMISS, SasLanguage.PRT, SasLanguage.RANGE, SasLanguage.STD, SasLanguage.STDERR, SasLanguage.SUM, SasLanguage.SUMWGT, SasLanguage.T, SasLanguage.USS, SasLanguage.VAR, SasLanguage.COALESCE, SasLanguage.COALESCEC, SasLanguage.MONOTONIC];
                            };
                            SasLanguage.AMPERSAND = '&';
                            SasLanguage.ASTERISK = '*';
                            SasLanguage.AT = '@';
                            SasLanguage.BACKTICK = '`';
                            SasLanguage.BINARY_LITERAL = 'b';
                            SasLanguage.BINARY_LITERAL_UPPERCASE = 'B';
                            SasLanguage.BRACKET_CLOSE = ')';
                            SasLanguage.BRACKET_OPEN = '(';
                            SasLanguage.BRACKET_CURLY_CLOSE = '}';
                            SasLanguage.BRACKET_CURLY_OPEN = '{';
                            SasLanguage.BRACKET_SQUARE_CLOSE = ']';
                            SasLanguage.BRACKET_SQUARE_OPEN = '[';
                            SasLanguage.BROKEN_BAR = '\u00a6';
                            SasLanguage.CARET = '^';
                            SasLanguage.CARRIAGE_RETURN = '\r';
                            SasLanguage.COLON = ':';
                            SasLanguage.COMMA = ',';
                            SasLanguage.DATE_LITERAL = 'd';
                            SasLanguage.DATE_LITERAL_UPPERCASE = 'D';
                            SasLanguage.TIME_LITERAL = 't';
                            SasLanguage.TIME_LITERAL_UPPERCASE = 'T';
                            SasLanguage.FORWARD_SLASH = '/';
                            SasLanguage.DOLLAR = '$';
                            SasLanguage.DOT = '.';
                            SasLanguage.DOUBLE_QUOTE = '\"';
                            SasLanguage.EQUALS = '=';
                            SasLanguage.EXCLAMATION = '!';
                            SasLanguage.EXPONENT = 'e';
                            SasLanguage.EXPONENT_UPPERCASE = 'E';
                            SasLanguage.GREATER_THAN = '>';
                            SasLanguage.HASH = '#';
                            SasLanguage.HEX_LITERAL = 'x';
                            SasLanguage.HEX_LITERAL_UPPERCASE = 'X';
                            SasLanguage.LESS_THAN = '<';
                            SasLanguage.MINUS = '-';
                            SasLanguage.NAME_LITERAL_UPPERCASE = 'N';
                            SasLanguage.NAME_LITERAL = 'n';
                            SasLanguage.NEWLINE = '\n';
                            /**
                             * Default null char that will transpile
                             */
                            SasLanguage.NULL_CHARACTER = '\u0000';
                            SasLanguage.PERCENT = '%';
                            SasLanguage.PIPE = '|';
                            SasLanguage.PLUS = '+';
                            SasLanguage.QUESTION_MARK = '?';
                            SasLanguage.RING_OP = '\u2218';
                            SasLanguage.SEMI_COLON = ';';
                            SasLanguage.SINGLE_QUOTE = '\'';
                            SasLanguage.SPACE = ' ';
                            SasLanguage.TAB = '\t';
                            SasLanguage.TILDE = '~';
                            SasLanguage.UNDERSCORE = '_';
                            SasLanguage.CHARACTER_MASK = SasLanguage.PERCENT;
                            SasLanguage.FUNCTION_CLOSE = SasLanguage.BRACKET_CLOSE;
                            SasLanguage.FUNCTION_OPEN = SasLanguage.BRACKET_OPEN;
                            SasLanguage.LINE_COMMENT_START = SasLanguage.ASTERISK;
                            SasLanguage.MULTIPLY = SasLanguage.ASTERISK;
                            SasLanguage.OPERATOR_AND = SasLanguage.AMPERSAND;
                            SasLanguage.OPERATOR_NOT = '\u00ac';
                            SasLanguage.OPERATOR_OR = SasLanguage.PIPE;
                            SasLanguage.STATEMENT_COMMENT_END = SasLanguage.SEMI_COLON;
                            SasLanguage.ACCESS = "ACCESS";
                            SasLanguage.ALL = "ALL";
                            SasLanguage.ALSO = "ALSO";
                            SasLanguage.AND = "AND";
                            SasLanguage.ANY = "ANY";
                            SasLanguage.APPEND = "APPEND";
                            SasLanguage.ARRAY = "ARRAY";
                            SasLanguage.AS = "AS";
                            SasLanguage.ASC = "ASC";
                            SasLanguage.ATTRIB = "ATTRIB";
                            SasLanguage.AVG = "AVG";
                            SasLanguage.BETWEEN = "BETWEEN";
                            SasLanguage.BINARY_LITERAL_SUFFIX_DOUBLE_QUOTE = "" + SasLanguage.DOUBLE_QUOTE + SasLanguage.BINARY_LITERAL_UPPERCASE;
                            SasLanguage.BINARY_LITERAL_SUFFIX_SINGLE_QUOTE = "" + SasLanguage.SINGLE_QUOTE + SasLanguage.BINARY_LITERAL_UPPERCASE;
                            SasLanguage.BLOCK_COMMENT_END = "*/";
                            SasLanguage.BLOCK_COMMENT_START = "/*";
                            SasLanguage.BOTH = "BOTH";
                            SasLanguage.BOTTOMMARGIN = "BOTTOMMARGIN";
                            SasLanguage.BTRIM = "BTRIM";
                            SasLanguage.BY = "BY";
                            SasLanguage.CALCULATED = "CALCULATED";
                            SasLanguage.CALL = "CALL";
                            SasLanguage.CARDS = "CARDS";
                            SasLanguage.CARDS4 = "CARDS4";
                            SasLanguage.CASE = "CASE";
                            SasLanguage.COUNT = "COUNT";
                            SasLanguage.CHARACTER_MASK_ = SasLanguage.CHARACTER_MASK + "";
                            SasLanguage.CLEAR = "CLEAR";
                            SasLanguage.CM = "CM";
                            SasLanguage.COALESCE = "COALESCE";
                            SasLanguage.COALESCEC = "COALESCEC";
                            SasLanguage.CONTAINS = "CONTAINS";
                            SasLanguage.COPY = "COPY";
                            SasLanguage.CORR = "CORR";
                            SasLanguage.CORRELATED = "CORRELATED";
                            SasLanguage.CREATE = "CREATE";
                            SasLanguage.CROSS = "CROSS";
                            SasLanguage.CROSS_JOIN = "CROSS_JOIN";
                            SasLanguage.CSS = "CSS";
                            SasLanguage.CV = "CV";
                            SasLanguage.DATA = "DATA";
                            SasLanguage.DATALINES = "DATALINES";
                            SasLanguage.DATASETS = "DATASETS";
                            SasLanguage.DATALINES4 = "DATALINES4";
                            SasLanguage.DATE_LITERAL_SUFFIX_DOUBLE_QUOTE = "" + SasLanguage.DOUBLE_QUOTE + SasLanguage.DATE_LITERAL_UPPERCASE;
                            SasLanguage.DATE_LITERAL_SUFFIX_SINGLE_QUOTE = "" + SasLanguage.SINGLE_QUOTE + SasLanguage.DATE_LITERAL_UPPERCASE;
                            SasLanguage.DATETIME_LITERAL_SUFFIX_DOUBLE_QUOTE = "" + SasLanguage.DOUBLE_QUOTE + SasLanguage.DATE_LITERAL_UPPERCASE + SasLanguage.TIME_LITERAL_UPPERCASE;
                            SasLanguage.DATETIME_LITERAL_SUFFIX_SINGLE_QUOTE = "" + SasLanguage.SINGLE_QUOTE + SasLanguage.DATE_LITERAL_UPPERCASE + SasLanguage.TIME_LITERAL_UPPERCASE;
                            SasLanguage.DBLOAD = "DBLOAD";
                            SasLanguage.DBMS = "DBMS";
                            SasLanguage.DCL = "DCL";
                            SasLanguage.DECLARE = "DECLARE";
                            SasLanguage.DEFINE = "DEFINE";
                            SasLanguage.DELETE = "DELETE";
                            SasLanguage.DESC = "DESC";
                            SasLanguage.DISTINCT = "DISTINCT";
                            SasLanguage.DO = "DO";
                            SasLanguage.DOT_ = ".";
                            SasLanguage.DOUBLE_QUOTE_ = "" + SasLanguage.DOUBLE_QUOTE;
                            SasLanguage.DOWNLOAD = "DOWNLOAD";
                            SasLanguage.DROP = "DROP";
                            SasLanguage.ELSE = "ELSE";
                            SasLanguage.END = "END";
                            SasLanguage.ENDRSUBMIT = "ENDRSUBMIT";
                            SasLanguage.ENDSUBMIT = "ENDSUBMIT";
                            SasLanguage.EQ = "EQ";
                            SasLanguage.EXCEPT = "EXCEPT";
                            SasLanguage.EXCLUDE = "EXCLUDE";
                            SasLanguage.EXECUTE = "EXECUTE";
                            SasLanguage.EXISTS = "EXISTS";
                            SasLanguage.FORMAT = "FORMAT";
                            SasLanguage.FREQ = "FREQ";
                            SasLanguage.FROM = "FROM";
                            SasLanguage.FULL = "FULL";
                            SasLanguage.FULL_JOIN = "FULL JOIN";
                            SasLanguage.FULL_OUTER_JOIN = "FULL OUTER JOIN";
                            SasLanguage.FUNCTION_MACRO_BQUOTE = "BQUOTE";
                            SasLanguage.FUNCTION_MACRO_NRBQUOTE = "NRBQUOTE";
                            SasLanguage.FUNCTION_MACRO_NRQUOTE = "NRQUOTE";
                            SasLanguage.FUNCTION_MACRO_NRSTR = "NRSTR";
                            SasLanguage.FUNCTION_MACRO_QUOTE = "QUOTE";
                            SasLanguage.FUNCTION_MACRO_STR = "STR";
                            SasLanguage.FUNCTION_MACRO_SUPERQ = "SUPERQ";
                            SasLanguage.FUNCTION_MACRO_UNQUOTE = "UNQUOTE";
                            SasLanguage.GE = "GE";
                            SasLanguage.GLOBAL = "GLOBAL";
                            SasLanguage.GOTO = "GOTO";
                            SasLanguage.GROUP = "GROUP";
                            SasLanguage.GROUP_BY = "GROUP BY";
                            SasLanguage.GT = "GT";
                            SasLanguage.HAVING = "HAVING";
                            SasLanguage.HEX_LITERAL_SUFFIX_DOUBLE_QUOTE = "" + SasLanguage.DOUBLE_QUOTE + SasLanguage.HEX_LITERAL_UPPERCASE;
                            SasLanguage.HEX_LITERAL_SUFFIX_SINGLE_QUOTE = "" + SasLanguage.SINGLE_QUOTE + SasLanguage.HEX_LITERAL_UPPERCASE;
                            SasLanguage.IF = "IF";
                            SasLanguage.IML = "IML";
                            SasLanguage.IN = "IN";
                            SasLanguage.INNER = "INNER";
                            SasLanguage.INNER_JOIN = "INNER JOIN";
                            SasLanguage.INC = "INC";
                            SasLanguage.INCLUDE = "INCLUDE";
                            SasLanguage.INDEX = "INDEX";
                            SasLanguage.INFORMAT = "INFORMAT";
                            SasLanguage.INPUT = "INPUT";
                            SasLanguage.INSERT = "INSERT";
                            SasLanguage.INTERSECT = "INTERSECT";
                            SasLanguage.INTO = "INTO";
                            SasLanguage.IS = "IS";
                            SasLanguage.JOIN = "JOIN";
                            SasLanguage.KEEP = "KEEP";
                            SasLanguage.LABEL = "LABEL";
                            SasLanguage.LE = "LE";
                            SasLanguage.LEADING = "LEADING";
                            SasLanguage.LEFTMARGIN = "LEFTMARGIN";
                            SasLanguage.LEFT = "LEFT";
                            SasLanguage.LEFT_JOIN = "LEFT JOIN";
                            SasLanguage.LEFT_OUTER_JOIN = "LEFT OUTER JOIN";
                            SasLanguage.LENGTH = "LENGTH";
                            SasLanguage.LET = "LET";
                            SasLanguage.LIBNAME = "LIBNAME";
                            SasLanguage.LIKE = "LIKE";
                            SasLanguage.LIST = "LIST";
                            SasLanguage.LOCAL = "LOCAL";
                            SasLanguage.LT = "LT";
                            SasLanguage.MACRO = "MACRO";
                            SasLanguage.MATCH = "MATCH";
                            SasLanguage.MATCH_JOIN = "MATCH_JOIN";
                            SasLanguage.MEAN = "MEAN";
                            SasLanguage.MEND = "MEND";
                            SasLanguage.MAX = "MAX";
                            SasLanguage.MIN = "MIN";
                            SasLanguage.MISSING = "MISSING";
                            SasLanguage.MONOTONIC = "MONOTONIC";
                            SasLanguage.N = "N";
                            SasLanguage.NATURAL = "NATURAL";
                            SasLanguage.NATURAL_FULL_JOIN = "NATURAL FULL JOIN";
                            SasLanguage.NATURAL_FULL_OUTER_JOIN = "NATURAL FULL OUTER JOIN";
                            SasLanguage.NATURAL_INNER_JOIN = "NATURAL INNER JOIN";
                            SasLanguage.NATURAL_JOIN = "NATURAL JOIN";
                            SasLanguage.NATURAL_LEFT_JOIN = "NATURAL LEFT JOIN";
                            SasLanguage.NATURAL_LEFT_OUTER_JOIN = "NATURAL LEFT OUTER JOIN";
                            SasLanguage.NATURAL_RIGHT_JOIN = "NATURAL RIGHT JOIN";
                            SasLanguage.NATURAL_RIGHT_OUTER_JOIN = "NATURAL RIGHT OUTER JOIN";
                            SasLanguage.NAME_LITERAL_SUFFIX_DOUBLE_QUOTE = "" + SasLanguage.DOUBLE_QUOTE + SasLanguage.NAME_LITERAL_UPPERCASE;
                            SasLanguage.NAME_LITERAL_SUFFIX_SINGLE_QUOTE = "" + SasLanguage.SINGLE_QUOTE + SasLanguage.NAME_LITERAL_UPPERCASE;
                            SasLanguage.NE = "NE";
                            SasLanguage._NEW_ = "_NEW_";
                            SasLanguage.NMISS = "NMISS";
                            SasLanguage.NOT = "NOT";
                            SasLanguage.NOTRIM = "NOTRIM";
                            SasLanguage.NOTIN = "NOTIN";
                            SasLanguage.NULL = "NULL";
                            SasLanguage.ODS = "ODS";
                            SasLanguage.OF = "OF";
                            SasLanguage.ON = "ON";
                            SasLanguage.OPTIONS = "OPTIONS";
                            SasLanguage.OR = "OR";
                            SasLanguage.ORDER = "ORDER";
                            SasLanguage.ORDER_BY = "ORDER BY";
                            SasLanguage.OTHERWISE = "OTHERWISE";
                            SasLanguage.OUT = "OUT";
                            SasLanguage.OUTER = "OUTER";
                            SasLanguage.OVER = "OVER";
                            SasLanguage.PROC = "PROC";
                            SasLanguage.PRT = "PRT";
                            SasLanguage.PUT = "PUT";
                            SasLanguage.PT = "PT";
                            SasLanguage.PYTHON = "PYTHON";
                            SasLanguage.QUIT = "QUIT";
                            SasLanguage.R = "R";
                            SasLanguage.RANGE = "RANGE";
                            SasLanguage.RENAME = "RENAME";
                            SasLanguage.REPORT = "REPORT";
                            SasLanguage.RETURN = "RETURN";
                            SasLanguage.RIGHT = "RIGHT";
                            SasLanguage.RIGHT_JOIN = "RIGHT JOIN";
                            SasLanguage.RIGHT_OUTER_JOIN = "RIGHT OUTER JOIN";
                            SasLanguage.RIGHTMARGIN = "RIGHTMARGIN";
                            SasLanguage.RSUBMIT = "RSUBMIT";
                            SasLanguage.RUN = "RUN";
                            SasLanguage.SAME = "SAME";
                            SasLanguage.SELECT = "SELECT";
                            SasLanguage.SEMI_COLON_ = SasLanguage.SEMI_COLON + "";
                            SasLanguage.SEMI_COLON4 = ";;;;";
                            SasLanguage.SEPARATED = "SEPARATED";
                            SasLanguage.SEPARATED_BY = "SEPARATED BY";
                            SasLanguage.SET = "SET";
                            SasLanguage.SINGLE_QUOTE_ = "" + SasLanguage.SINGLE_QUOTE;
                            SasLanguage.SLASH_R = "/R";
                            SasLanguage.SORT = "SORT";
                            SasLanguage.SORTEDBY = "SORTEDBY";
                            SasLanguage.SORTSIZE = "SORTSIZE";
                            SasLanguage.SPRINGFIELD = "SPRINGFIELD";
                            SasLanguage.SPRINGFIELD_JOIN = "SPRINGFIELD_JOIN";
                            SasLanguage.TIME_LITERAL_SUFFIX_DOUBLE_QUOTE = "" + SasLanguage.DOUBLE_QUOTE + SasLanguage.TIME_LITERAL_UPPERCASE;
                            SasLanguage.TIME_LITERAL_SUFFIX_SINGLE_QUOTE = "" + SasLanguage.SINGLE_QUOTE + SasLanguage.TIME_LITERAL_UPPERCASE;
                            /**
                             * {@link #SPACE} as a {@link String}, rather than char.
                             */
                            SasLanguage.SPACE_ = SasLanguage.SPACE + "";
                            SasLanguage.SQL = "SQL";
                            SasLanguage.SUBMIT = "SUBMIT";
                            SasLanguage.SUM = "SUM";
                            SasLanguage.STD = "STD";
                            SasLanguage.STDERR = "STDERR";
                            SasLanguage.STYLE = "STYLE";
                            SasLanguage.SUMWGT = "SUMWGT";
                            SasLanguage.SYMDEL = "SYMDEL";
                            SasLanguage.SYSCALL = "SYSCALL";
                            SasLanguage.SYSEXEC = "SYSEXEC";
                            SasLanguage.SYSFUNC = "SYSFUNC";
                            SasLanguage.SYSLPUT = "SYSLPUT";
                            SasLanguage.SYSRPUT = "SYSRPUT";
                            SasLanguage.T = "T";
                            SasLanguage.TAB_ = "" + SasLanguage.TAB;
                            SasLanguage.TAGSETS = "TAGSETS";
                            SasLanguage.TEMPLATE = "TEMPLATE";
                            SasLanguage.TOPMARGIN = "TOPMARGIN";
                            SasLanguage.THEN = "THEN";
                            SasLanguage.TO = "TO";
                            SasLanguage.TRAILING = "TRAILING";
                            SasLanguage.TRIMMED = "TRIMMED";
                            SasLanguage.UNION = "UNION";
                            SasLanguage.UNION_JOIN = "UNION JOIN";
                            SasLanguage.UNIVARIATE = "UNIVARIATE";
                            SasLanguage.UNTIL = "UNTIL";
                            SasLanguage.UNIQUE = "UNIQUE";
                            SasLanguage.USS = "USS";
                            SasLanguage.VAR = "VAR";
                            SasLanguage.WHEN = "WHEN";
                            SasLanguage.WHERE = "WHERE";
                            SasLanguage.WHILE = "WHILE";
                            SasLanguage.stringLiteralSuffixes = [SasLanguage.asString(SasLanguage.SINGLE_QUOTE), SasLanguage.asString(SasLanguage.DOUBLE_QUOTE), SasLanguage.NAME_LITERAL_SUFFIX_SINGLE_QUOTE, SasLanguage.NAME_LITERAL_SUFFIX_DOUBLE_QUOTE, SasLanguage.DATE_LITERAL_SUFFIX_DOUBLE_QUOTE, SasLanguage.DATE_LITERAL_SUFFIX_SINGLE_QUOTE, SasLanguage.DATETIME_LITERAL_SUFFIX_DOUBLE_QUOTE, SasLanguage.BINARY_LITERAL_SUFFIX_DOUBLE_QUOTE, SasLanguage.BINARY_LITERAL_SUFFIX_SINGLE_QUOTE, SasLanguage.HEX_LITERAL_SUFFIX_DOUBLE_QUOTE, SasLanguage.HEX_LITERAL_SUFFIX_SINGLE_QUOTE, SasLanguage.DATETIME_LITERAL_SUFFIX_SINGLE_QUOTE, SasLanguage.TIME_LITERAL_SUFFIX_DOUBLE_QUOTE, SasLanguage.TIME_LITERAL_SUFFIX_SINGLE_QUOTE];
                            return SasLanguage;
                        }());
                        common.SasLanguage = SasLanguage;
                    })(common = context.common || (context.common = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        var ErrorMessageKeys = /** @class */ (function () {
                            function ErrorMessageKeys() {
                            }
                            ErrorMessageKeys.PROC_0_NOT_KNOWN = "proc_0_NotKnown";
                            ErrorMessageKeys.INVALID_MACRO_NAME = "invalidMacroName";
                            ErrorMessageKeys.INVALID_DATA_NAME = "invalidDataName";
                            ErrorMessageKeys.INVALID_OPTION = "invalidOption";
                            ErrorMessageKeys.STATEMENT_0_UNKNOWN_IN_THIS_CONTEXT = "statement_0_UnknownInThisContext";
                            ErrorMessageKeys.LIBNAME_OPTION_0_NOT_KNOWN = "libnameOption_0_notKnown";
                            ErrorMessageKeys.EXPECTED_THEN_OR_SEMICOLON_BUT_FOUND_0_ = "expectedThenOrSemicolonButFound_0_";
                            ErrorMessageKeys.EXPECTED_PERCENT_THEN_OR_SEMICOLON_BUT_FOUND_0_ = "expectedPercentThenOrSemicolonButFound_0_";
                            ErrorMessageKeys.EXPECTED_SEMICOLON_BUT_FOUND_0_ = "expectedSemicolonButFound_0_";
                            ErrorMessageKeys.EXPECTED_EQUALS_BUT_FOUND_0_ = "expectedEqualsButFound_0_";
                            ErrorMessageKeys.EXPECTED_CLOSE_BRACKET_BUT_FOUND_0_ = "expectedCloseBracketButFound_0_";
                            ErrorMessageKeys.EXPECTED_OPEN_BRACKET_BUT_FOUND_0_ = "expectedOpenBracketButFound_0_";
                            ErrorMessageKeys.EXPECTED_NAME_BUT_FOUND_0_ = "expectedNameButFound_0_";
                            ErrorMessageKeys.EXPECTED_A_NAME_NUMERIC_OR_STRING_CONSTANT_BUT_FOUND_0_ = "expectedANameNumericOrStringConstantButFound_0_";
                            ErrorMessageKeys.EXPECTED_TO_BY_WHILE_UNTIL_BUT_FOUND_0_ = "expectedToByWhileUntilButFound_0_";
                            ErrorMessageKeys.EXPECTED_BY_WHILE_UNTIL_BUT_FOUND_0_ = "expectedByWhileUntilButFound_0_";
                            ErrorMessageKeys.EXPECTED_TO_WHILE_UNTIL_BUT_FOUND_0_ = "expectedToWhileUntilButFound_0_";
                            ErrorMessageKeys.EXPECTED_WHILE_UNTIL_BUT_FOUND_0_ = "expectedWhileUntilButFound_0_";
                            ErrorMessageKeys.EXPECTED_A_LITERAL = "expectedALiteral";
                            ErrorMessageKeys.VALUES_ON_RIGHT_OR_IN_EXPRESSION_MUST_ALL_BE_NUMERIC_OR_CHARACTER = "valuesOnRightOfInExpressionMustAllBeNumericOrCharacter";
                            ErrorMessageKeys.UNKNOWN_STATEMENT = "unknownStatement";
                            ErrorMessageKeys.PROC_OPTION_0_NOT_KNOWN_ON_1 = "procOption_0_notKnownOn_1_";
                            ErrorMessageKeys.DATASTEP_FUNCTION_0_NOT_KNOWN = "datastepFunction_0_notKnown";
                            ErrorMessageKeys.GLOBAL_STATEMENT_0_NOT_KNOWN = "globalStatement_0_notKnown";
                            ErrorMessageKeys.PROC_STATEMENT_0_NOT_KNOWN_ON_1 = "procStatement_0_notKnownOn_1_";
                            ErrorMessageKeys.DATA_STATEMENT_0_NOT_KNOWN = "procStatement_0_notKnown";
                            ErrorMessageKeys.FORMAT_0_NOT_KNOWN = "format_0_notKnown";
                            ErrorMessageKeys.INFORMAT_0_NOT_KNOWN = "informat_0_notKnown";
                            ErrorMessageKeys.SYSTEM_OPTION_0_NOT_KNOWN = "systemOption_0_notKnown";
                            ErrorMessageKeys.DATASTEP_OPTION_0_NOT_KNOWN = "datastepOption_0_notKnown";
                            ErrorMessageKeys.CALL_ROUTINE_0_NOT_KNOWN = "callRoutine_0_notKnown";
                            ErrorMessageKeys.ODS_DESTINATION_0_NOT_KNOWN = "odsDestination_0_notKnown";
                            return ErrorMessageKeys;
                        }());
                        model.ErrorMessageKeys = ErrorMessageKeys;
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var utils;
                    (function (utils) {
                        var ObjectUtils = /** @class */ (function () {
                            function ObjectUtils() {
                            }
                            /**
                             * Check object equality, equivalent to {@link java.util.Objects#equals(Object, Object)} which does
                             * not
                             * transpile.
                             *
                             * @param o0
                             * @param o1
                             * @return
                             */
                            ObjectUtils.equalObjs = function (o0, o1) {
                                return o1 == null && o0 == null || (o1 != null && o0 != null && (o0 === o1));
                            };
                            /**
                             * Check equality of {@link ITokenisationState} forces call to equals method, otherwise it transpiles
                             * to === in Javascript.
                             *
                             * @param o0
                             * @param o1
                             * @return
                             */
                            ObjectUtils.equalStates = function (o0, o1) {
                                return o1 == null && o0 == null || (o1 != null && o0 != null && o0.equals(o1));
                            };
                            return ObjectUtils;
                        }());
                        utils.ObjectUtils = ObjectUtils;
                    })(utils = context.utils || (context.utils = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var utils;
                    (function (utils) {
                        var TranspilableCollections = /** @class */ (function () {
                            function TranspilableCollections() {
                            }
                            TranspilableCollections.prototype.transpilableSetBuilderFromExistingSet = function (existingSet) {
                                var builder = this.transpilableSetBuilder();
                                if (existingSet != null) {
                                    for (var iterator = existingSet.iterator(); iterator.hasNext();) {
                                        builder.add(iterator.next());
                                    }
                                }
                                return builder;
                            };
                            TranspilableCollections.prototype.transpilableMapBuilderFromExistingMap = function (existingSet) {
                                var builder = this.transpilableMapBuilder();
                                if (existingSet != null) {
                                    for (var iterator = existingSet.entryCollection().iterator(); iterator.hasNext();) {
                                        var next = iterator.next();
                                        builder.put(next.getKey(), next.getValue());
                                    }
                                }
                                return builder;
                            };
                            /**
                             * Build a map based on a collection of objects with key/value from lambdas. Null keys will not be
                             * added.
                             *
                             * @param ts
                             * @param kex
                             * @param vex
                             * @return
                             */
                            TranspilableCollections.prototype.buildMapFromCollection = function (ts, kex, vex) {
                                var builder = this.transpilableMapBuilder();
                                if (ts != null) {
                                    for (var it = ts.iterator(); it.hasNext();) {
                                        var t = it.next();
                                        this.addToMap(t, kex, vex, builder);
                                    }
                                }
                                return builder.build();
                            };
                            /**
                             * Build a map based on an array of objects with key/value from lambdas. Null keys will not be added.
                             *
                             * @param ts
                             * @param kex
                             * @param vex
                             * @return
                             */
                            TranspilableCollections.prototype.buildMapFromArray = function (ts, kex, vex) {
                                var builder = this.transpilableMapBuilder();
                                if (ts != null) {
                                    for (var i = 0; i < ts.length; i++) {
                                        var t = ts[i];
                                        this.addToMap(t, kex, vex, builder);
                                    }
                                }
                                return builder.build();
                            };
                            TranspilableCollections.prototype.addToMap = function (t, kex, vex, builder) {
                                var key = kex(t);
                                if (key != null) {
                                    builder.put(key, vex(t));
                                }
                            };
                            /**
                             * Build a list based on a collection of objects with value from lambdas. Null values will not be
                             * added.
                             *
                             * @param ts
                             * @param ex
                             * @return
                             */
                            TranspilableCollections.prototype.buildListFromArray = function (ts, ex) {
                                var builder = this.transpilableListBuilder();
                                if (ts != null) {
                                    for (var i = 0; i < ts.length; i++) {
                                        var t = ts[i];
                                        this.addToList(t, ex, builder);
                                    }
                                }
                                return builder.build();
                            };
                            /**
                             * Build a list based on an array of objects with value from lambdas. Null values will not be added.
                             *
                             * @param ts
                             * @param ex
                             * @return
                             */
                            TranspilableCollections.prototype.buildListFromCollection = function (ts, ex) {
                                var builder = this.transpilableListBuilder();
                                if (ts != null) {
                                    for (var it = ts.iterator(); it.hasNext();) {
                                        var t = it.next();
                                        this.addToList(t, ex, builder);
                                    }
                                }
                                return builder.build();
                            };
                            /**
                             * Combines the two {@link TranspilableList}s into a single, new {@link TranspilableList}.
                             *
                             * @param collections - The TranspilableLists to combine
                             * @return A new {@link TranspilableList} containing the super set of entries in [all] 'collections'
                             */
                            TranspilableCollections.prototype.join = function (one, two) {
                                var builder = this.transpilableListBuilder();
                                builder.addAll(one);
                                builder.addAll(two);
                                return builder.build();
                            };
                            TranspilableCollections.prototype.addToList = function (t, ex, builder) {
                                var value = ex(t);
                                if (value != null) {
                                    builder.add(value);
                                }
                            };
                            return TranspilableCollections;
                        }());
                        utils.TranspilableCollections = TranspilableCollections;
                    })(utils = context.utils || (context.utils = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var utils;
                    (function (utils) {
                        var Stack = /** @class */ (function () {
                            function Stack(tc) {
                                this.listBuilder = tc.transpilableListBuilder();
                            }
                            Stack.prototype.peek = function () {
                                return this.listBuilder.size() > 0 ? this.listBuilder.get(this.listBuilder.size() - 1) : null;
                            };
                            Stack.prototype.push = function (t) {
                                this.listBuilder.add(t);
                            };
                            Stack.prototype.pop = function () {
                                var peek = this.peek();
                                this.listBuilder.remove(this.listBuilder.size() - 1);
                                return peek;
                            };
                            return Stack;
                        }());
                        utils.Stack = Stack;
                    })(utils = context.utils || (context.utils = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var comparator;
                    (function (comparator) {
                        /**
                         * A (hopefully) transpilable comparator that will allow the user to sort a list
                         * of proposals for display. Primarily for use when the user calls up the
                         * content assist from the editor.
                         *
                         * @author rs
                         */
                        var DisplayProposalComparator = /** @class */ (function () {
                            function DisplayProposalComparator() {
                                /**
                                 * A string comparator to allow us to use whichever method of string
                                 * comparison is native to the language we are using.
                                 */
                                this.stringComparator = null;
                                /**
                                 * A comparator to use to help organise proposals for the purpose of
                                 * displaying in content assist.
                                 */
                                this.proposalTypeComparator = null;
                                /**
                                 * All proposals not covered in a list will be assumed to be of this default
                                 * level.
                                 */
                                this.defaultLevel = 1;
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.utils.TranspilableComparator", "com.wpc.wps.language.context.comparator.IDisplayProposalComparator"] });
                            }
                            /**
                             * Compares one proposal with another for display. Proposal x will be
                             * considered less than y if it's proposal type suggests so. Proposals with
                             * matching types are compared based on the comparison of their strings.
                             * Proposals of different types at the same level are ordered by the string
                             * representing their type.
                             *
                             * @param x
                             * The proposal we are comparing.
                             * @param y
                             * The proposal we are comparing x to.
                             * @return A value less than zero if proposal x is considered to be less
                             * than proposal y (earlier in the order), or greater than zero if
                             * proposal y is greater than proposal y (later in the order).
                             */
                            DisplayProposalComparator.prototype.compare = function (x, y) {
                                var xType = x.getType();
                                var yType = y.getType();
                                if (xType == yType) {
                                    return this.stringComparator.compare(x.getText(), y.getText());
                                }
                                else {
                                    var typeComparison = this.proposalTypeComparator.compare(xType, yType);
                                    if (typeComparison == 0) {
                                        return this.stringComparator.compare(xType.toString(), yType.toString());
                                    }
                                    else {
                                        return typeComparison;
                                    }
                                }
                            };
                            return DisplayProposalComparator;
                        }());
                        comparator.DisplayProposalComparator = DisplayProposalComparator;
                    })(comparator = context.comparator || (context.comparator = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var comparator;
                    (function (comparator) {
                        var DisplayProposalTypePriorityComparator = /** @class */ (function () {
                            function DisplayProposalTypePriorityComparator() {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.utils.TranspilableComparator", "com.wpc.wps.language.context.comparator.IDisplayProposalTypePriorityComparator"] });
                            }
                            /**
                             * @return Zero if proposal type x and y are considered to be of the same
                             * level, a value less than zero if proposal x is higher in priority
                             * (earlier), a value greater than zero if proposal y is lower in
                             * priority (later).
                             */
                            DisplayProposalTypePriorityComparator.prototype.compare = function (x, y) {
                                var xTypeOrder = this.getProposalTypeLevel(x);
                                var yTypeOrder = this.getProposalTypeLevel(y);
                                if (xTypeOrder == yTypeOrder) {
                                    return DisplayProposalTypePriorityComparator.same;
                                }
                                else {
                                    return xTypeOrder < yTypeOrder ? DisplayProposalTypePriorityComparator.earlier : DisplayProposalTypePriorityComparator.later;
                                }
                            };
                            /**
                             * Returns the level that a proposal is considered to be at for the purposes
                             * of display in content assist. Low numbers will appear early in an ordered
                             * list that uses this comparator. If you want to re-organise the levels
                             * that the proposals are considered to be at, then you will need to edit
                             * this method.
                             *
                             * Return low numbers if you want your proposal type to be
                             * considered earlier in a list.
                             *
                             * @param type
                             * The type we want to find the level for.
                             * @return The level the proposal type is considered to be at for content
                             * assist display purposes.
                             */
                            DisplayProposalTypePriorityComparator.prototype.getProposalTypeLevel = function (type) {
                                switch ((type)) {
                                    case com.wpc.wps.language.context.proposer.ProposalType.ROOT_STATEMENT:
                                        return 2;
                                    case com.wpc.wps.language.context.proposer.ProposalType.PROC_STATEMENT:
                                        return 0;
                                    default:
                                        return DisplayProposalTypePriorityComparator.defaultLevel;
                                }
                            };
                            DisplayProposalTypePriorityComparator.defaultLevel = 1;
                            DisplayProposalTypePriorityComparator.same = 0;
                            DisplayProposalTypePriorityComparator.later = 1;
                            DisplayProposalTypePriorityComparator.earlier = -1;
                            return DisplayProposalTypePriorityComparator;
                        }());
                        comparator.DisplayProposalTypePriorityComparator = DisplayProposalTypePriorityComparator;
                    })(comparator = context.comparator || (context.comparator = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var comparator;
                    (function (comparator) {
                        /**
                         * A comparator that will compare a proposal to another proposal based on a
                         * comparison of the proposal text only.
                         *
                         * @author rs
                         */
                        var TextProposalComparator = /** @class */ (function () {
                            function TextProposalComparator() {
                                /**
                                 * A string comparator to allow us to compare the text of a proposal
                                 * natively.
                                 */
                                this.stringComparator = null;
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.comparator.ITextProposalComparator", "com.wpc.wps.language.context.utils.TranspilableComparator"] });
                            }
                            TextProposalComparator.prototype.compare = function (x, y) {
                                return this.stringComparator.compare(x.getText(), y.getText());
                            };
                            return TextProposalComparator;
                        }());
                        comparator.TextProposalComparator = TextProposalComparator;
                    })(comparator = context.comparator || (context.comparator = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var comparator;
                    (function (comparator) {
                        /**
                         * A class that is used to represent the ordering of a proposal type in a list.
                         *
                         * @author rs
                         */
                        var ProposalOrder = /** @class */ (function () {
                            function ProposalOrder(proposalType, orderLevel) {
                                this.type = proposalType;
                                this.orderLevel = orderLevel;
                            }
                            ProposalOrder.prototype.getType = function () {
                                return this.type;
                            };
                            /**
                             * The level at which this proposal is considered to be compared with other
                             * proposals.
                             *
                             * @return
                             */
                            ProposalOrder.prototype.getOrderLevel = function () {
                                return this.orderLevel;
                            };
                            return ProposalOrder;
                        }());
                        comparator.ProposalOrder = ProposalOrder;
                    })(comparator = context.comparator || (context.comparator = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_1) {
                    var support;
                    (function (support) {
                        var sas;
                        (function (sas) {
                            /**
                             * DO NOT MODIFY: Class generated from langinfo_java.lua.
                             *
                             * Class contains language information for keywords, Infos, procs, functions, formats and informats.
                             *
                             * Infos are built through the InfoBuilder interface, it is down to subclasses to implement the builder
                             * which then create its own objects as required.
                             */
                            var AbstractSasLanguageSupport_Lua = /** @class */ (function () {
                                function AbstractSasLanguageSupport_Lua() {
                                    this.aarch64 = [AbstractSasLanguageSupport_Lua.Platform.linux_aarch64];
                                    this.bits_32 = [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.zos];
                                    this.bits_64 = [AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x];
                                    this.ebcdic = [AbstractSasLanguageSupport_Lua.Platform.zos];
                                    this.not_win = [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.zos, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64];
                                    this.not_win_not_zos = [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64];
                                    this.not_zos = [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64];
                                    this.win = [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64];
                                    this.workstation = [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64];
                                    this.x86 = [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86];
                                    this.x86_64 = [AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64];
                                    this.zos = [AbstractSasLanguageSupport_Lua.Platform.zos];
                                }
                                AbstractSasLanguageSupport_Lua.prototype.createGlobalInfos = function () {
                                    var builder;
                                    var statementBuilder;
                                    builder = this.newGlobalInfoBuilder("*");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("**");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("AXIS");
                                    builder.setNumbered(true);
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("CATNAME");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("DSNEXST");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("ENDWPS");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("ENDSAS");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("FILENAME");
                                    statementBuilder = builder.addStatement("EMAIL", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("FOOTNOTE");
                                    builder.setNumbered(true);
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("GOPTIONS");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("GOPTION");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("KILLTASK");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("LEGEND");
                                    builder.setNumbered(true);
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("LIBNAME");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("LISTTASK");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("MACRO");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("MISSING");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("ODS");
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NONE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PERSIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NONE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PERSIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TRACE", false, null);
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LISTING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OFF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PATH", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROCTITLE", false, null);
                                    statementBuilder.addOption("OFF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PTITLE", false, null);
                                    statementBuilder.addOption("OFF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GRAPHICS", false, null);
                                    statementBuilder.addOption("ANTIALIAS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ON", "YES/ON", "OFF", "NO/OFF"]).build();
                                    statementBuilder.addOption("ANTIALIASMAX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("BORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ON", "YES/ON", "OFF", "NO/OFF"]).build();
                                    statementBuilder.addOption("DISCRETEMAX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("GROUPMAX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("HEIGHT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("IMAGEMAP", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ON", "OFF"]).build();
                                    statementBuilder.addOption("IMAGENAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("INDEX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("LABELMAX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("MAXLEGENDAREA", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("NOANTIALIAS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOBORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OUTPUTFMT", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("RESET", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ALL", "ANTIALIAS", "ANTIALIASMAX", "BORDER", "INDEX", "HEIGHT", "LABELMAX", "MAXLEGENDAREA", "SCALE", "TIPMAX", "WIDTH"]).build();
                                    statementBuilder.addOption("SCALE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ON", "YES/ON", "OFF", "NO/OFF"]).build();
                                    statementBuilder.addOption("SCALEMARKERS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ON", "YES/ON", "OFF", "NO/OFF"]).build();
                                    statementBuilder.addOption("TIPMAX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("WIDTH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("OFF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROCLABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SHOW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NOPTITLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NOPROCTITLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESCAPECHAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("_ALL_", false, null);
                                    statementBuilder.addOption("OFF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CHTML", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CSV", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CSVALL", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCEL", false, [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64]);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("AUTHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BOX_SIZING", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("CATEGORY", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("COMMENTS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DOM", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    statementBuilder.addOption("DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("KEYWORDS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("STATUS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("TITLE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("WORK", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCELXP", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HTML4", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HTMLCSS", false, null);
                                    statementBuilder.aliases(["HTML"]);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MARKUP", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MSOFFICE2K", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NEWLISTING", false, null);
                                    statementBuilder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ODSTEST", false, null);
                                    statementBuilder.addOption("CELL_RAW_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("CELL_ROW_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("CELL_VALUES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("COLUMN_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("FOOTER_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("HEADER_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("RAW_NUMERIC_FORMAT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ROW_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("TABLE_CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.addOption("TABLE_PROPERTIES", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OLDHTML", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECORD_SEPARATOR", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).aliases(["RECORD_SEPERATOR", "RS"]).choices(["NONE"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OLDLISTING", false, null);
                                    statementBuilder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("CLEAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CLOSE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("SHOW", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PDF", false, [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.zos]);
                                    statementBuilder.addOption("COLUMNS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("OUTPUTBY", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["TABLE", "PAGE"]).build();
                                    statementBuilder.addOption("STARTPAGE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["YES", "NO", "ON/YES", "OFF/NO", "NEVER", "NOW", "BYGROUP"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PHTML", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("XML", false, null);
                                    statementBuilder.addOption("ANCHOR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("ARCHIVE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("ATTRIBUTES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("BODY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    statementBuilder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CODEBASE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CSSSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DEVICE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    statementBuilder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("GPATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("GTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("HEADTEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("IMAGE_DPI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("METATEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("NEWFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["NONE", "BYGROUP", "OUTPUT", "PAGE", "PROC"]).build();
                                    statementBuilder.addOption("NOGFOOTNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("NOGTITLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    statementBuilder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("PARAMETERS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, true).build();
                                    statementBuilder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("RECSEP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RECORD_SEPARATOR", "RECORD_SEPERATOR", "RS"]).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder.addOption("STYLESHEET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).aliases(["TYPE"]).build();
                                    statementBuilder.addOption("TEXT", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder.addOption("TRANTAB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("OPTIONS");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("OPTION");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("PAGE");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("PATTERN");
                                    builder.setNumbered(true);
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("QUIT");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("RESETLINE");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("RGET");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("RSUBMIT");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("RUN");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("SIGNOFF");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("SIGNON");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("SKIP");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("SYMBOL");
                                    builder.setNumbered(true);
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("SYSTASK");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("TITLE");
                                    builder.setNumbered(true);
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("TSO");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("WAITFOR");
                                    builder.build();
                                    builder = this.newGlobalInfoBuilder("X");
                                    builder.build();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createDatastepInfos = function () {
                                    var builder;
                                    builder = this.newDatastepInfoBuilder("ABORT");
                                    builder.addKeyword("ABORT", false, null);
                                    builder.addKeyword("ABEND", false, null);
                                    builder.addKeyword("NOLIST", false, null);
                                    builder.addKeyword("RETURN", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("ARRAY");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_CHARACTER_", false, null);
                                    builder.addKeyword("_NUMERIC_", false, null);
                                    builder.addKeyword("_TEMPORARY_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("ATTRIB");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_CHARACTER_", false, null);
                                    builder.addKeyword("_NUMERIC_", false, null);
                                    builder.addKeyword("FORMAT", false, null);
                                    builder.addKeyword("INFORMAT", false, null);
                                    builder.addKeyword("LABEL", false, null);
                                    builder.addKeyword("LENGTH", false, null);
                                    builder.addKeyword("TRANSCODE", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("BY");
                                    builder.addKeyword("DESCENDING", false, null);
                                    builder.addKeyword("NOTSORTED", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("CALL");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("CARDS");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("CARDS4");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("CONTINUE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DATALINES");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DATALINES4");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DCL");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DECLARE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DELETE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DESCRIBE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DO");
                                    builder.addKeyword("BY", false, null);
                                    builder.addKeyword("OVER", false, null);
                                    builder.addKeyword("TO", false, null);
                                    builder.addKeyword("UNTIL", false, null);
                                    builder.addKeyword("WHILE", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("DROP");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_CHARACTER_", false, null);
                                    builder.addKeyword("_NUMERIC_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("ELSE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("END");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("ERROR");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_BLANKPAGE_", false, null);
                                    builder.addKeyword("_INFILE_", false, null);
                                    builder.addKeyword("_OVERPRINT_", false, null);
                                    builder.addKeyword("_PAGE_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("EXECUTE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("FILE");
                                    builder.addOption("_FILE_", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("BLKSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["BLK"]).build();
                                    builder.addOption("BUFND", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("BUFNI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("CLOSE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("COLUMN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["COL"]).build();
                                    builder.addOption("DCB", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DELIMITER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DLM"]).build();
                                    builder.addOption("DEVTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DLMSOPT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("DLMSTR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DROPOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DSCB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DSD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    builder.addOption("FEEDBACK", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FDBK"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("FILENAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FILEVAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FLOWOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FOOTNOTES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["FOOTNOTE"]).build();
                                    builder.addOption("HEADER", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("IGNOREDOSEOF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64]).build();
                                    builder.addOption("JFCB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("KEYLEN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("KEYPOS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("LINE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LINESIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["LS"]).build();
                                    builder.addOption("LINESLEFT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LL"]).build();
                                    builder.addOption("LRECL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("LSR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOFOOTNOTES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOFOOTNOTE"]).build();
                                    builder.addOption("NOPAD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTITLES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOTITLE"]).build();
                                    builder.addOption("ODS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PAD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PAGESIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PS"]).build();
                                    builder.addOption("PASSWD", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RC4STOP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RECFM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("RECORDS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RESET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RRN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("STOPOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TERMSTR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TITLES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["TITLE"]).build();
                                    builder.addOption("UCBNAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("VOLUME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["VOLUMES"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("VSAM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("FORMAT");
                                    builder.addKeyword("DEFAULT", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("GO");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("GOTO");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("IF");
                                    builder.addKeyword("THEN", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("INFILE");
                                    builder.addOption("_INFILE_", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("BACKWARD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BWD"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("BLKSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["BLK"]).build();
                                    builder.addOption("BUFND", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("BUFNI", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("CCHHR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("CLOSE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("COLUMN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["COL"]).build();
                                    builder.addOption("CONTROLINTERVAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CTLINTV", "CNV"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DCB", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DELIMITER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DLM"]).build();
                                    builder.addOption("DEVTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DLMSOPT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("DLMSTR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DSCB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("DSD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ENCODING", AbstractSasLanguageSupport_Lua.OptionType.ENCODING, false).build();
                                    builder.addOption("END", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("EOF", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("EOV", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ERASE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("EXPANDTABS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FEEDBACK", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FDBK"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("FILENAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FILEVAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FIRSTOBS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("FLOWOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("GENKEY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("IGNOREDOSEOF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64]).build();
                                    builder.addOption("JFCB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("KEY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("KEYGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("KEYLEN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("KEYPOS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LINE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LINESIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["LS"]).build();
                                    builder.addOption("LRECL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("LSR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("MISSOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOEXPANDTABS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPAD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORLS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NRLS"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("OBS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("PAD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PASSWD", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RBA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RC4STOP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("READPW", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RECFM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("RECORDS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RECORG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RLS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RLSREAD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE_OR_KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("RRN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("SCANOVER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SEQUENTIAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SEQ"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("SHAREBUFFERS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SHAREBUFS"]).build();
                                    builder.addOption("SKIP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("START", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("STOPOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TERMSTR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TRUNCOVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("UCBNAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("UNBUFFERED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UNBUF"]).build();
                                    builder.addOption("UPDATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("VOLUME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["VOLUMES"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("VSAM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("VSAMDESCRIBE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NEITHER", "ACB", "RPL", "BOTH"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("INFORMAT");
                                    builder.addKeyword("DEFAULT", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("INPUT");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("KEEP");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_CHARACTER_", false, null);
                                    builder.addKeyword("_NUMERIC_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("LABEL");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("LEAVE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("LENGTH");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_CHARACTER_", false, null);
                                    builder.addKeyword("_NUMERIC_", false, null);
                                    builder.addKeyword("DEFAULT", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("LINK");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("LIST");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("MERGE");
                                    builder.addKeyword("END", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("MODIFY");
                                    builder.addKeyword("BY", false, null);
                                    builder.addKeyword("END", false, null);
                                    builder.addKeyword("KEY", false, null);
                                    builder.addKeyword("NOBS", false, null);
                                    builder.addKeyword("POINT", false, null);
                                    builder.addKeyword("UNIQUE", false, null);
                                    builder.addKeyword("UPDATEMODE", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("OTHER");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("OTHERWISE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("OUTPUT");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("PUT");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_BLANKPAGE_", false, null);
                                    builder.addKeyword("_INFILE_", false, null);
                                    builder.addKeyword("_ODS_", false, null);
                                    builder.addKeyword("_OVERPRINT_", false, null);
                                    builder.addKeyword("_PAGE_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("PUTLOG");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_BLANKPAGE_", false, null);
                                    builder.addKeyword("_INFILE_", false, null);
                                    builder.addKeyword("_OVERPRINT_", false, null);
                                    builder.addKeyword("_PAGE_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("REDIRECT");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("REMOVE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("RENAME");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("REPLACE");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("RETAIN");
                                    builder.addKeyword("_ALL_", false, null);
                                    builder.addKeyword("_CHARACTER_", false, null);
                                    builder.addKeyword("_NUMERIC_", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("RETURN");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("SELECT");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("SET");
                                    builder.addKeyword("END", false, null);
                                    builder.addKeyword("KEY", false, null);
                                    builder.addKeyword("NOBS", false, null);
                                    builder.addKeyword("POINT", false, null);
                                    builder.addKeyword("UNIQUE", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("STOP");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("SUBSTR");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("UPDATE");
                                    builder.addKeyword("BY", false, null);
                                    builder.addKeyword("END", false, null);
                                    builder.addKeyword("UPDATEMODE", false, null);
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("WHEN");
                                    builder.build();
                                    builder = this.newDatastepInfoBuilder("WHERE");
                                    builder.build();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createProcInformation = function () {
                                    var builder;
                                    var statementBuilder;
                                    builder = this.newProcInfoBuilder("ACCESS");
                                    builder.addOption("ACCDESC", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).aliases(["ACCESS", "AD"]).build();
                                    builder.addOption("DBMS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("VIEWDESC", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).build();
                                    statementBuilder = builder.addStatement("AN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ASSIGN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CREATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DROP", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FMT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RENAME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RESET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUBSET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("UN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("UNIQUE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ACECLUS");
                                    builder.addOption("ABSOLUTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INITIAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["COUNT", "C/COUNT", "THRESHOLD", "T/THRESHOLD"]).build();
                                    builder.addOption("METRIC", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MPAIRS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PREFIX", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("PROPORTION", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PERCENT", "P"]).build();
                                    builder.addOption("QQ", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SING"]).build();
                                    builder.addOption("THRESHOLD", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["T"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ANOVA");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("APPEND");
                                    builder.addOption("APPENDVER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["V6"]).build();
                                    builder.addOption("BASE", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUT"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).aliases(["NEW"]).build();
                                    builder.addOption("FORCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOWARN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("APPSRV");
                                    builder.addOption("ADMINPW", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("ALLOW_BACKGROUND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CHARSET", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("CLEANSESSION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLEANSESSIONWORK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLEANWORK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOADMGR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LOCALIP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LRECL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MESSAGEONPROGRAMERROR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NETBUFFK", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOCHARSET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCLEANSESSION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCLEANSESSIONWORK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCLEANWORK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOWORKTERM"]).build();
                                    builder.addOption("NOMESSAGEONPROGRAMERROR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PORT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PROGRAMS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("REQUEST_LOG_DIR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SERVICEID", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("STARTUPDS", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("UNSAFE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBOUT_ENCODING", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder = builder.addStatement("ADMINLIBS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ALLOC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ALLOCATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DATALIBS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOG", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROGLIBS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REQUEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SESSION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SESSIONLIBS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SESSIONWORKLIBS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STATISTICS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WORKLIBS", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ARIMA");
                                    builder.setRunGroups(true);
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORECAST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IDENTIFY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ASSOCRULES");
                                    builder.addOption("ANTECEDENTITEMSTOPRINT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("MAXANTECEDENTLENGTH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXITEMSPERRULE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSUPPORT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MINCONFIDENCE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MINITEMSPERRULE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINLIFT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MINSUPPORT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MODE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["WPL", "BORGELT"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINTBODYSETSUPPORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTCONFIDENCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTITEMSETSUPPORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTLIFT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RULESTOPRINT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("SAMPLEPROBABILITY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SAMPLESEED", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SORTBY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("AUTOREG");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ARCHTEST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("BACKSTEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CENTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CORRB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GINV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ITER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ITPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXIT"]).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ML", "ULS", "YW", "ITYW"]).build();
                                    builder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PARTIAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.addOption("LOGLIKL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NLAG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("SLSTAY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("ALPHACLI", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("ALPHACLM", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("ALPHACSM", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["0.10", "0.05", "0.01"]).build();
                                    statementBuilder.addOption("CONSTANT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CPEV", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CUMSUMSQLB", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CUSUM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CUSUMLB", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CUSUMSQ", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CUSUMSQUB", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("CUSUMUB", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("LCL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("LCLM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("PREDICTED", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["P"]).build();
                                    statementBuilder.addOption("PREDICTEDM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["PM"]).build();
                                    statementBuilder.addOption("RECPEV", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("RECRES", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("RESIDUAL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["R"]).build();
                                    statementBuilder.addOption("RESIDUALM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["RM"]).build();
                                    statementBuilder.addOption("TRANSFORM", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("UCL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("UCLM", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("BIN");
                                    builder.addOption("ALIAS_NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOPRINT"]).build();
                                    builder.addOption("BINS_META", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("BUCKET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COMPUTEQUANTILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COMPUTESTATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NUMBIN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("OUTPUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PSEUDO_QUANTILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("QUANTILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WINSOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("WOE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WOEADJUST", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TARGET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("BOXPLOT");
                                    builder.addOption("BOX", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("HISTORY", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).aliases(["HIST"]).build();
                                    builder.addOption("PCTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("BUILDW");
                                    builder.setHidden(true);
                                    builder.addOption("_DUMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, true).build();
                                    builder.addOption("_GENSCRIPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_MAKE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).aliases(["CAT", "C"]).build();
                                    builder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["DESC"]).build();
                                    builder.addOption("ENTRY", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder = builder.addStatement("FATTRIBUTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMULA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GATTRIBUTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HELP", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KEY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LINK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MATTRIBUTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MENU", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARMS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCREEN", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CANCORR");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("B", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["C"]).build();
                                    builder.addOption("CORRB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EDF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("INT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NCAN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PARPREFIX", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["PPREFIX", "RPREFIX"]).build();
                                    builder.addOption("PCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PROBT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RDF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("REDUNDANCY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RED"]).build();
                                    builder.addOption("SEB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["S"]).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SING"]).build();
                                    builder.addOption("SMC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SPCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SQPCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SQSPCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("T", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VDEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["WREG"]).build();
                                    builder.addOption("VNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["VN"]).build();
                                    builder.addOption("VPREFIX", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["VP"]).build();
                                    builder.addOption("WDEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["VREG"]).build();
                                    builder.addOption("WNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["WN"]).build();
                                    builder.addOption("WPREFIX", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["WP"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARTIAL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WITH", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CANDISC");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ANOVA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DISTANCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MAHALANOBIS"]).build();
                                    builder.addOption("NCAN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("PSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("STDMEAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CAPABILITY");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CHECKINDICES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CIBASIC", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CIINDICES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CIPCTLDF", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CIQUANTDF"]).build();
                                    builder.addOption("CIPCTLNORMAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CIQUANTNORMAL"]).build();
                                    builder.addOption("CIPROBEX", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLNPWGTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGT"]).build();
                                    builder.addOption("FREQ", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOCCOUNT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MEMSIZE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("MODES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MODE"]).build();
                                    builder.addOption("MU0", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LOCATION"]).build();
                                    builder.addOption("NEXTROBS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NEXTRVAL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOBYSPECS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORMAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NORMALTEST"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTTABLE", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PCTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["DEF"]).build();
                                    builder.addOption("ROBUSTSCALE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("SPEC", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).aliases(["SPECS"]).build();
                                    builder.addOption("TRIMMED", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["TRIM"]).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT"]).build();
                                    builder.addOption("WINSORIZED", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["WINSOR"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CDFPLOT", false, null);
                                    statementBuilder.aliases(["CDF"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COMPHISTOGRAM", false, null);
                                    statementBuilder.aliases(["COMPHIST"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HISTOGRAM", false, null);
                                    statementBuilder.aliases(["HIST"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PPPLOT", false, null);
                                    statementBuilder.aliases(["PP"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROBPLOT", false, null);
                                    statementBuilder.aliases(["PROB"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("QQPLOT", false, null);
                                    statementBuilder.aliases(["QQ"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SPEC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CATALOG");
                                    builder.setRunGroups(true);
                                    builder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).aliases(["CAT", "C"]).build();
                                    builder.addOption("ENTRYTYPE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["ET"]).build();
                                    builder.addOption("KILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("CHANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTENTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COPY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCHANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODIFY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SAVE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CDISC");
                                    builder.addOption("FORMATACTIVE", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("FORMATLIBRARY", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("FORMATNOREPLACE", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("LANGUAGE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("MODEL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ODM", "SDTM"]).build();
                                    builder.addOption("READ", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("WRITE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    statementBuilder = builder.addStatement("BASICDEFINITIONS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLINICALDATA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTENTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DATASETS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DOMAINDATA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GLOBALVARIABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOCATION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("METADATAVERSION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ODM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PRESENTATION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SDTM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SIGNATURE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STUDY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("USER", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CHART");
                                    builder.setRunGroups(true);
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CIMPORT");
                                    builder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CAT", "C"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DS", "D"]).build();
                                    builder.addOption("EET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("EXTENDSN", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).aliases(["INFILE"]).build();
                                    builder.addOption("LIBRARY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LIB", "L"]).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MT"]).build();
                                    builder.addOption("NEW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CLUSTER");
                                    builder.addOption("BETA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CCC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DIM", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("K", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["AVERAGE", "AVE/AVERAGE", "CENTROID", "CEN/CENTROID", "COMPLETE", "COM/COMPLETE", "DENSITY", "DEN/DENSITY", "FLEXIBLE", "FLE/FLEXIBLE", "MEDIAN", "MED/MEDIAN", "MCQUITTY", "MCQ/MCQUITTY", "SINGLE", "SIN/SINGLE", "WARD", "WAR/WARD"]).build();
                                    builder.addOption("MODE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOEIGEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOID", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NONORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSQUARE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTIE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTTREE", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("P", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PRINT"]).build();
                                    builder.addOption("PSEUDO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("RMSSTD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RSQUARE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RSQ"]).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["S"]).build();
                                    builder.addOption("STANDARD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["STD"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COPY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RMSSTD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("COMPARE");
                                    builder.addOption("ALLOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALLSTATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALLVARS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BRIEF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BRIEFSUMMARY"]).build();
                                    builder.addOption("COMPARE", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).aliases(["COMP", "C"]).build();
                                    builder.addOption("CRITERION", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).aliases(["BASE"]).build();
                                    builder.addOption("DATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ERROR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FUZZ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("LISTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LIST"]).build();
                                    builder.addOption("LISTBASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTBASEOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTBASEVAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTCOMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTCOMPOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTCOMPVAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTEQUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LISTEQUALVAR"]).build();
                                    builder.addOption("LISTOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTVAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXPRINT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NODATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOLISTEQUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOMISSBASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOMISSCOMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOVALUES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTBASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTCOMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTDIF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTNOEQUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTPERCENT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSTATS", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TRANSPOSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WARNING", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCLUDEVAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WITH", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CONTENTS");
                                    builder.addOption("CENTILES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("DETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DET"]).build();
                                    builder.addOption("DIRECTORY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FMTLEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.MULTI_CHOICE, false).aliases(["MTYPE", "MT"]).build();
                                    builder.addOption("NODETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODET"]).build();
                                    builder.addOption("NODS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUT2", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VARNUM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["POSITION"]).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("COPY");
                                    builder.addOption("CLONE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).aliases(["INLIB", "INDD"]).build();
                                    builder.addOption("INDEX", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.MULTI_CHOICE, false).aliases(["MTYPE", "MT"]).build();
                                    builder.addOption("MOVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCLONE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).aliases(["OUTLIB", "OUTDD"]).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VIEW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VIEW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CORR");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BEST", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CV"]).build();
                                    builder.addOption("CSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLNPWGT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGTS"]).build();
                                    builder.addOption("FISHER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("HOEFFDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("KENDALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPROB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTH", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTK", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTP", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUT"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTS", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PEARSON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("POLYSERIAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RANK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SPEARMAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARTIAL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WITH", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CORRESP");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BENZECRI", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BEN"]).build();
                                    builder.addOption("BINARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BIN"]).build();
                                    builder.addOption("CELLCHI2", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CEL"]).build();
                                    builder.addOption("COLUMN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["COL"]).build();
                                    builder.addOption("CP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CROSS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["CRO"]).choices(["BOTH", "BOT", "COLUMN", "COL", "NONE", "NON", "ROW"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DEVIATION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DEV"]).build();
                                    builder.addOption("DIMENS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["DIM"]).build();
                                    builder.addOption("EXPECTED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXP"]).build();
                                    builder.addOption("FREQOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["FRE"]).build();
                                    builder.addOption("GREENACRE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["GRE"]).build();
                                    builder.addOption("MCA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MININERTIA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MIN"]).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MIS"]).build();
                                    builder.addOption("NOCOLUMN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["NOC"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOP"]).build();
                                    builder.addOption("NOROW", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["NOR"]).build();
                                    builder.addOption("NVARS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["NVA"]).build();
                                    builder.addOption("OBSERVED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["OBS"]).build();
                                    builder.addOption("OUTC", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUT"]).build();
                                    builder.addOption("OUTF", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PROFILE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["PRO"]).choices(["BOTH", "BOT", "COLUMN", "COL", "NONE", "NON", "ROW"]).build();
                                    builder.addOption("ROW", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SHO"]).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SIN"]).build();
                                    builder.addOption("SOURCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SOU"]).build();
                                    builder.addOption("UNADJUSTED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UNA"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUPPLEMENTARY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("CPORT");
                                    builder.addOption("AFTER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ASIS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CAT", "C"]).build();
                                    builder.addOption("CONSTRAINT", AbstractSasLanguageSupport_Lua.OptionType.YESNOTRUEFALSE, false).aliases(["CON"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DS", "D"]).build();
                                    builder.addOption("DATECOPY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("GENERATION", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).aliases(["GEN"]).build();
                                    builder.addOption("INDEX", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("LIBRARY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LIB", "L"]).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MT"]).build();
                                    builder.addOption("NOCOMPRESS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOCOMP"]).build();
                                    builder.addOption("OUTVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TRANSLATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DATASETS");
                                    builder.setRunGroups(true);
                                    builder.addOption("DETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DET"]).build();
                                    builder.addOption("FORCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("KILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIBRARY", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).aliases(["LIB", "DDNAME", "DD"]).build();
                                    builder.addOption("MT", AbstractSasLanguageSupport_Lua.OptionType.MULTI_CHOICE, false).aliases(["MTYPE", "MEMTYPE"]).build();
                                    builder.addOption("NODETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODET"]).build();
                                    builder.addOption("NOLIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOWARN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("AGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("APPEND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CHANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTENTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COPY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCHANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INDEX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODIFY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RENAME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REPAIR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SAVE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VALIDATE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DB2EXT");
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("SSID", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("UNIQUE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("FMT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RENAME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DBF");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DB2", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("DB3", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("DB4", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("DB5", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DBLOAD");
                                    builder.addOption("APPEND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DBMS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder = builder.addStatement("ACCDESC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COLUMN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COMMIT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ERRLIMIT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIMIT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOAD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NULL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NULLS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RENAME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RESET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SQL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TYPE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DECISIONFOREST");
                                    builder.addOption("CLASSCOMB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLUDEMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INMODEL", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("MINIMPROVEMENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MINSPLITSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINSPLITSIZERATIO", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NUMSPLITINPUTS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NUMTREES", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("OUTMODEL", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INPUT", false, null);
                                    statementBuilder.aliases(["IN"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.aliases(["OUT"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TARGET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DECISIONTREE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLUDEMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXDEPTH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MINNODESIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINNODESIZERATIO", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTTREE", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINTTREE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INPUT", false, null);
                                    statementBuilder.aliases(["IN"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TARGET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DELETE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LIBRARY", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).aliases(["LIB"]).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MTYPE", "MT"]).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DISCRIM");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ANOVA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CANONICAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CAN"]).build();
                                    builder.addOption("CANPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("CROSSLIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CROSSLISTERR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CROSSVALIDATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DISTANCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MAHALANOBIS"]).build();
                                    builder.addOption("EXHAUSTIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("K", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("KERNEL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["BIWEIGHT", "BIW", "EPANECHNIKOV", "EPA", "NORMAL", "NOR", "TRIWEIGHT", "TRI", "UNIFORM", "UNI"]).build();
                                    builder.addOption("KPROP", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("LIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTERR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MANOVA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NORMAL", "NPAR"]).build();
                                    builder.addOption("METRIC", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DIAGONAL", "FULL", "IDENTITY"]).build();
                                    builder.addOption("NCAN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOCLASSIFY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTCROSS", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTD", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("POOL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["YES", "NO", "TEST"]).build();
                                    builder.addOption("POSTERR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SCORES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SLPOOL", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("STDMEAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TESTDATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TESTLIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TESTLISTERR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TESTOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("TESTOUTD", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("THRESHOLD", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("TSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PRIORS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TESTCLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TESTFREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TESTID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DISPLAY");
                                    builder.setHidden(true);
                                    builder.addOption("_APPENDTOFILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGDISPLAY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGVERBOSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DUMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DUMPALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, true).build();
                                    builder.addOption("_GENSCRIPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_GENSCRIPTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_REVERSECATOVERRIDE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    builder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).aliases(["CAT", "C"]).build();
                                    builder.addOption("ENTRY", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SOURCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("_QUEUE", true, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DISTANCE");
                                    builder.addOption("ABSENT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ADD", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("FUZZ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("INITIAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MULT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NOMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSDZ", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("RANKSCORE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["MIDRANK", "INDEX"]).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHAPE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["TRIANGLE", "TRI", "SQUARE", "SQU", "SQR"]).build();
                                    builder.addOption("UNDEF", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COPY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WGT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("DOWNLOAD");
                                    builder.addOption("AFTER", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("BINARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("DATECOPY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EXTENDSN", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("INDEX", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("INFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("INLIB", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).aliases(["IN", "INDD"]).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MTYPE", "MT"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTCAT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTLIB", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["OUTDD"]).build();
                                    builder.addOption("V6TRANSPORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VIEWTODATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("EXPAND");
                                    builder.addOption("ALIGN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXTRAPOLATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FACTOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FROM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OBSERVED", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("TO", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONVERT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("EXPORT");
                                    builder.addOption("APPEND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("DBMS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["CSV", "TAB", "TABLEAU", "DLM", "DBF", "SPSS", "SAV", "XLS", "XLSX", "EXCEL", "EXCEL95", "EXCEL97", "EXCEL2000", "EXCEL2002", "EXCEL2003", "EXCEL2007", "EXCEL2010", "ACCESS", "ACCESS97", "ACCESS2000", "ACCESS2002", "ACCESS2003", "ACCESS2007", "ACCESS2010"]).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFORMATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    builder.addOption("OUTTABLE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["TABLE"]).build();
                                    builder.addOption("QUOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DATABASE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DBLIBOPTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DBPASSWORD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELIMITER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MSENGINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NEWFILE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PASSWORD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PUTNAMES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SHEET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("USEDATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("USER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WGDB", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FACTOR");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CORR", "C"]).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["CONV"]).build();
                                    builder.addOption("COVARIANCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["COV"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EIGENVECTORS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EV"]).build();
                                    builder.addOption("FLAG", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("FUZZ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("GAMMA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("HEYWOOD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["HEY"]).build();
                                    builder.addOption("HKPOWER", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["HKP"]).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["M"]).choices(["ALPHA", "A", "HARRIS", "H", "IMAGE", "I", "PATTERN", "PRINCIPAL", "PRIN", "P", "PRINIT", "SCORE"]).build();
                                    builder.addOption("MINEIGEN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MIN"]).build();
                                    builder.addOption("MSA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NFACTORS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["NFACT", "N"]).build();
                                    builder.addOption("NOBS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPROMAXNORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOPMAXNORM"]).build();
                                    builder.addOption("NORM", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["COV", "KAISER", "NONE", "RAW", "WEIGHT"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("POWER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PRINT"]).build();
                                    builder.addOption("PPRIORS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["PRIORS"]).choices(["ASMC", "A", "INPUT", "I", "MAX", "M", "ONE", "O", "RANDOM", "R", "SMC", "S"]).build();
                                    builder.addOption("PREROTATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PRE"]).build();
                                    builder.addOption("PROPORTION", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PERCENT", "P"]).build();
                                    builder.addOption("RANDOM", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("RCONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["RCONV"]).build();
                                    builder.addOption("REORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RE"]).build();
                                    builder.addOption("RESIDUALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RES"]).build();
                                    builder.addOption("RITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ROTATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["R"]).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SCORE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["STDERR"]).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["S"]).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SING"]).build();
                                    builder.addOption("TARGET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TAU", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ULTRAHEYWOOD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["ULTRA"]).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARTIAL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PRIORS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FASTCLUS");
                                    builder.addOption("BINS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("CLUSTER", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["CONV"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DELETE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("DISTANCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DIST"]).build();
                                    builder.addOption("DRIFT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("IMPUTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INSTAT", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("LEAST", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["L"]).build();
                                    builder.addOption("LIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXCLUSTERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXC"]).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MEAN", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTSEED", "OUTS"]).build();
                                    builder.addOption("NOMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTITER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("RADIUS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["R"]).build();
                                    builder.addOption("RANDOM", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["FULL", "PART", "NONE", "RANDOM"]).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).aliases(["SEEDS"]).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STRICT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FMTLIB");
                                    builder.addOption("CNTLIN", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("CNTLOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUT"]).build();
                                    builder.addOption("FMTLIB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIBRARY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LIB", "DDNAME"]).build();
                                    builder.addOption("MAXLABLEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOREPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INVALUE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PICTURE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VALUE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FONT");
                                    builder.addOption("CONFIG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FONTDIRS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FONTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCONFIG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFONTDIRS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFONTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FORECAST");
                                    builder.addOption("ALIGN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("AR", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["NLAGS"]).build();
                                    builder.addOption("ASTART", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("BSTART", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CSTART", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INTERVAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("INTPER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("LEAD", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXERRORS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["STEPAR", "EXPO", "WINTERS", "ADDWINTERS"]).build();
                                    builder.addOption("NSSTART", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NSTART", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUT1STEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTACTUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTESTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTESTTHEIL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTFITSTATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTFULL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTRESID", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SEASONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SINTPER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SLENTRY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SLSTAY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("START", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("TREND", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("WEIGHT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ZEROMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FORMAT");
                                    builder.addOption("CNTLIN", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("CNTLOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUT"]).build();
                                    builder.addOption("FMTLIB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIBRARY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LIB", "DDNAME"]).build();
                                    builder.addOption("MAXLABLEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOREPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INVALUE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PICTURE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VALUE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FORMS");
                                    builder.addOption("ACROSS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["A"]).build();
                                    builder.addOption("ALIGN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("BETWEEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["B"]).build();
                                    builder.addOption("CC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COPIES", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DOWN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["D"]).build();
                                    builder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).aliases(["DDNAME", "DD"]).build();
                                    builder.addOption("INDENT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["I"]).build();
                                    builder.addOption("LINES", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["L"]).build();
                                    builder.addOption("NDOWN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["ND"]).build();
                                    builder.addOption("PAGESIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PS"]).build();
                                    builder.addOption("SETS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("SKIP", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["S"]).build();
                                    builder.addOption("WIDTH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["W"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FREQ");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("FORMCHAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FC"]).build();
                                    builder.addOption("NLEVELS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "EXTERNAL/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXACT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FSBROWSE");
                                    builder.setHidden(true);
                                    builder.addOption("_APPENDTOFILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGDISPLAY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGVERBOSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DUMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, true).build();
                                    builder.addOption("_GENSCRIPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("BORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("KEYS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOBORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OBS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("SCREEN", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    builder.addOption("TAB", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder = builder.addStatement("_QUEUE", true, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FSEDIT");
                                    builder.setHidden(true);
                                    builder.addOption("_APPENDTOFILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGDISPLAY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGVERBOSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DUMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, true).build();
                                    builder.addOption("_GENSCRIPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("ADD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("KEYS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOBORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OBS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("SCREEN", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    builder.addOption("TAB", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder = builder.addStatement("_QUEUE", true, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("FSVIEW");
                                    builder.setHidden(true);
                                    builder.addOption("_APPENDTOFILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGDISPLAY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DEBUGVERBOSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_DUMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_FILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, true).build();
                                    builder.addOption("AUTOADD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BROWSEONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BRONLY"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FORMULA", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    builder.addOption("KEYS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MODIFY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EDIT"]).build();
                                    builder.addOption("NOADD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOBORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NODEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODELETE"]).build();
                                    statementBuilder = builder.addStatement("_QUEUE", true, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GAM");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GANNO");
                                    builder.addOption("ANNOTATE", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DATASYS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("NAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.build();
                                    this.createProcInformation1();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createProcInformation1 = function () {
                                    var builder;
                                    var statementBuilder;
                                    builder = this.newProcInfoBuilder("GBARLINE");
                                    builder.addOption("ANNOTATE", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GCHART");
                                    builder.setRunGroups(true);
                                    builder.addOption("ANNOTATE", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).aliases(["ANNO"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PIE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GDEVICE");
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.addOption("DUMP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NEXT_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_PREV_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODIFY", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GENMOD");
                                    builder.setAllowsAssignment(true);
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESCEND", "DESC"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTEMPS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NUMERICDIFFERENTIATION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NUMERICDIFF"]).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("RORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "FMT", "UNFORMATTED/UNFMT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTRAST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DEVIANCE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FWDLINK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INVLINK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REPEATED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCWGT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIANCE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ZEROMODEL", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GFONT");
                                    builder.addOption("NAME", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["N"]).build();
                                    builder.addOption("TTFFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GINSIDE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("INCLUDEBORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INSIDEONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAP", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GLM");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("MANOVA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTRAST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LSMEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RANDOM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GLMMOD");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTDESIGN", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPARM", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("ZEROBASED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GLMSELECT");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("MAXMACRO", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTDESIGN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PARMLABELSTYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("TESTDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("VALDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARTITION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GMAP");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DENSITY", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["RESOLUTION", "RES"]).choices(["0", "1", "2", "3", "4", "5", "6", "LOW", "MEDIUM", "HIGH"]).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("MAP", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CHORO", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GMM");
                                    builder.addOption("COVARIANCE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CTOL", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("INIT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("K", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PPTOL", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("SELECT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GOPTIONS");
                                    builder.addOption("OPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GPLOT");
                                    builder.addOption("ANNOTATE", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("UNIFORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BUBBLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BUBBLE2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GPROJECT");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DATELINE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DEGREES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DEG"]).build();
                                    builder.addOption("DUPOK", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["ASIS"]).build();
                                    builder.addOption("EASTLONG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["EAST"]).build();
                                    builder.addOption("LATLON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LATLONG"]).build();
                                    builder.addOption("LATMAX", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("LATMIN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("LONGMAX", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("LONGMIN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MERIDIAN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NODATELINE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NODUP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["NOASIS"]).build();
                                    builder.addOption("NOPARMIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORANGECHECK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PARADIV", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("PARALLEL1", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PARALEL1"]).build();
                                    builder.addOption("PARALLEL2", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PARALEL2"]).build();
                                    builder.addOption("PARMENTRY", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["PENTRY"]).build();
                                    builder.addOption("PARMIN", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).aliases(["PIN"]).build();
                                    builder.addOption("PARMOUT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["POUT"]).build();
                                    builder.addOption("POLELAT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("POLELONG", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("PROJECT", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NONE", "ALBERS", "GNOMON", "LAMBERT", "ADAMS", "AITOFF", "APIANUS", "ARAGO", "BEHRMANN", "BRAUN", "CYLINDRI", "ECKERT1", "ECKERT3", "ECKERT5", "EQUIRECT", "GALL", "HAMMER", "KVRSKY7", "MARINUS", "MILLER1", "MILLER2", "ORTHO", "PARABOLI", "PETERS", "PUTNINS4", "ROBINSON", "STEREO", "WINKEL2"]).build();
                                    builder.addOption("RADIANS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["NODEG"]).build();
                                    builder.addOption("WESTLONG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["WEST"]).build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GREDUCE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("E1", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("E2", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("E3", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("E4", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("E5", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("N1", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("N2", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("N3", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("N4", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("N5", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOCLEAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GREMOVE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("FUZZ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NODECYCLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NC"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GREPLAY");
                                    builder.addOption("FS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("IGOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("NOFS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("DEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DEV", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DEVICE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IGOUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLAY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REPLAY", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("GSLIDE");
                                    builder.addOption("ANNOTATE", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).aliases(["ANNO"]).build();
                                    builder.addOption("CFRAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["DES"]).build();
                                    builder.addOption("FRAME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("LFRAME", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WFRAME", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("HADOOP");
                                    builder.addOption("AUTHDOMAIN", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("OPTIONS", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("PASSWORD", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("USERNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("VERBOSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("HDFS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MAPREDUCE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PIG", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROP", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROPERTIES", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("HTTP");
                                    builder.addOption("CT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("HEADERIN", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("HEADEROUT", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("PROXYHOST", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("PROXYPASSWORD", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("PROXYPORT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PROXYUSERNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("URL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBAUTHDOMAIN", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBDOMAIN", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBPASSWORD", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("WEBUSERNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ICLIFETEST");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ALPHAQT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("BOOTSTRAP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["BOOT"]).build();
                                    builder.addOption("CONFTYPE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ASINSQRT", "LOGLOG", "LINEAR", "LOG", "LOGIT"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("IMPUTE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["IM"]).build();
                                    builder.addOption("ITERINC", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ITHISTORY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["ITERHISTORY"]).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXIT"]).build();
                                    builder.addOption("MAXSTRATIFIEDGROUPS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXTIME", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["TURNBULL", "EM", "EMICM", "ICM"]).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSURV", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTS"]).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PROBLIST", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("SHOWTI", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("TOLLIKE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("TOLPROB", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STRATA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TIME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("IML");
                                    builder.setRunGroups(true);
                                    builder.setAllowsAssignment(true);
                                    builder.addOption("SYMSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("WORKSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    statementBuilder = builder.addStatement("ABORT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("APPEND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ASSIGNMENT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CALL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLOSE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLOSEFILE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTINUE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CREATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DO", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EDIT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FILE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FIND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FINISH", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORCE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GO", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GOTO", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IF", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INDEX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LEAVE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LINK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOAD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MATTRIB", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PAUSE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PRINT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PURGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("READ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REPLACE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RESET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RESUME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RETURN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RUN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SAVE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SETIN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SETOUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SHOW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SORT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("START", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STOP", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUMMARY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("USE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("IMPORT");
                                    builder.addOption("DATAFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE"]).build();
                                    builder.addOption("DATATABLE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["TABLE"]).build();
                                    builder.addOption("DBMS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["CSV", "TAB", "DLM", "DBF", "SPSS", "SAV", "XLS", "XLSX", "EXCEL", "EXCEL95", "EXCEL97", "EXCEL2000", "EXCEL2002", "EXCEL2003", "EXCEL2007", "EXCEL2010", "ACCESS", "ACCESS97", "ACCESS2000", "ACCESS2002", "ACCESS2003", "ACCESS2007", "ACCESS2010"]).build();
                                    builder.addOption("IGNOREDOSEOF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONSIDERXLSXCOLWIDTHS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DATABASE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DATAROW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DBLIBOPTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DBPASSWORD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELIMITER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DROPNULLFIELDS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GETDELETED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GETNAMES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("GUESSINGROWS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MEMOSIZE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MIXED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MSENGINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NAMEROW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NULLMISSING", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PASSWORD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCANMEMO", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCANTEXT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCANTIME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SHEET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEXTSIZE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("USEDATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("USER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WGDB", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("JAVAINFO");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLASSPATHS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HELP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("JREOPTIONS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VERSION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("JSON");
                                    builder.addOption("FMTCHARACTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FMTDATETIME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FMTNUMERIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("KEYS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFMTCHARACTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFMTDATETIME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFMTNUMERIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOKEYS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRETTY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSASTAGS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSCAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTRIMBLANKS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("PRETTY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SASTAGS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SCAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TRIMBLANKS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("EX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXPORT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("W", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WRITE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("KDE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BIVAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("UNIVAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("LIFEREG");
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NONE", "PROB", "PROBPLOT", "P"]).build();
                                    builder.addOption("XDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.addOption("ADJUST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DIVISOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LOWERTAILED"]).build();
                                    statementBuilder.addOption("NOFILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("TESTVALUE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["TESTMEAN"]).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UPPERTAILED"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INSET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PPLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROBPLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("LIFETEST");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ALPHAQT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ATRISK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BANDMAXTIME", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["BANDMAX"]).build();
                                    builder.addOption("BANDMINTIME", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["BANDMIN"]).build();
                                    builder.addOption("CENSOREDSYMBOL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["CS"]).choices(["NONE", "ARROWDOWN", "ASTERISK", "CIRCLE", "DIAMOND", "GREATERTHAN", "HASH", "HOMEDOWN", "IBEAM", "PLUS", "SQUARE", "STAR", "TACK", "TILDE", "TRIANGLE", "TRIANGLEDOWN", "TRIANGLELEFT", "TRIANGLERIGHT", "UNION", "X", "Y", "Z", "CIRCLEFILLED", "DIAMONDFILLED", "HOMEDOWNFILLED", "SQUAREFILLED", "STARFILLED", "TRIANGLEFILLED", "TRIANGLEDOWNFILLED", "TRIANGLELEFTFILLED", "TRIANGLERIGHTFILLED", "\'*\'", "\'>\'", "\'#\'", "\'+\'", "\'~\'", "\'X\'", "\'Y\'", "\'Z\'"]).build();
                                    builder.addOption("CENSPLOT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CENS"]).build();
                                    builder.addOption("CONFBAND", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ALL", "EP", "HW"]).build();
                                    builder.addOption("CONFTYPE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ASINSQRT", "LOGLOG", "LINEAR", "LOG", "LOGIT"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EVENTSYMBOL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["ES"]).choices(["NONE", "ARROWDOWN", "ASTERISK", "CIRCLE", "DIAMOND", "GREATERTHAN", "HASH", "HOMEDOWN", "IBEAM", "PLUS", "SQUARE", "STAR", "TACK", "TILDE", "TRIANGLE", "TRIANGLEDOWN", "TRIANGLELEFT", "TRIANGLERIGHT", "UNION", "X", "Y", "Z", "CIRCLEFILLED", "DIAMONDFILLED", "HOMEDOWNFILLED", "SQUAREFILLED", "STARFILLED", "TRIANGLEFILLED", "TRIANGLEDOWNFILLED", "TRIANGLELEFTFILLED", "TRIANGLERIGHTFILLED", "\'*\'", "\'>\'", "\'#\'", "\'+\'", "\'~\'", "\'X\'", "\'Y\'", "\'Z\'"]).build();
                                    builder.addOption("INTERVALS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("MAXSTRATIFIEDGROUPS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXTIME", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["BRESLOW", "B", "FH", "KM", "PL", "ACT", "LIFE", "LT"]).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NELSON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["AALEN"]).build();
                                    builder.addOption("NINTERVAL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOLEFT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTABLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSURV", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTS"]).build();
                                    builder.addOption("OUTTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("REDUCEOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("STDERR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TIMELIM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TIMELIST", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("WIDTH", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STRATA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TIME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("LOAN");
                                    builder.addOption("AMOUNT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["A"]).build();
                                    builder.addOption("AMOUNTPCT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["APCT"]).build();
                                    builder.addOption("COMPOUND", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["CONTINUOUS", "DAY", "SEMIMONTH", "MONTH", "QUARTER", "SEMIYEAR", "YEAR"]).build();
                                    builder.addOption("DOWNPAYMENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["DP"]).build();
                                    builder.addOption("DOWNPAYPCT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["DPCT"]).build();
                                    builder.addOption("INITIAL", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["INIT"]).build();
                                    builder.addOption("INITIALPCT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["INITPCT"]).build();
                                    builder.addOption("INTERVAL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["SEMIMONTH", "MONTH", "QUARTER", "SEMIYEAR", "YEAR"]).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LIFE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["L"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOP"]).build();
                                    builder.addOption("NOSUMMARYPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOSUMPR"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSUM", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PAYMENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["P"]).build();
                                    builder.addOption("POINTPCT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PNTPCT"]).build();
                                    builder.addOption("POINTS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PNT"]).build();
                                    builder.addOption("PREPAYMENTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PREPAY", "PREP", "PREPAYMENT"]).build();
                                    builder.addOption("PRICE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PRC"]).build();
                                    builder.addOption("RATE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["R"]).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SCHEDULE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["SCHED"]).build();
                                    builder.addOption("START", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["S"]).build();
                                    statementBuilder = builder.addStatement("ARM", false, null);
                                    statementBuilder.addOption("ADJUSTFREQ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["ADF"]).build();
                                    statementBuilder.addOption("BESTCASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["B"]).build();
                                    statementBuilder.addOption("CAPS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ESTIMATEDCASE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["ESTC"]).build();
                                    statementBuilder.addOption("FIXEDCASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["FIXCASE"]).build();
                                    statementBuilder.addOption("MAXADJUST", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MAXAD"]).build();
                                    statementBuilder.addOption("MAXRATE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MAXR"]).build();
                                    statementBuilder.addOption("MINRATE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MINR"]).build();
                                    statementBuilder.addOption("WORSTCASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["W"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BALLOON", false, null);
                                    statementBuilder.addOption("BALLOONPAYMENT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["BPAY"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BUYDOWN", false, null);
                                    statementBuilder.addOption("BUYDOWNRATES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["BDR"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COMPARE", false, null);
                                    statementBuilder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("AT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("BREAKINTEREST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BI", "BREAKINT"]).build();
                                    statementBuilder.addOption("BREAKPAYMENT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["BP", "BREAKPAY"]).build();
                                    statementBuilder.addOption("MARR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("NOCOMPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOCP"]).build();
                                    statementBuilder.addOption("OUTCOMP", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("PWOFCOST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PWC"]).build();
                                    statementBuilder.addOption("TAXRATE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["TAX"]).build();
                                    statementBuilder.addOption("TRUEINTEREST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["TI", "TRUERATE"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FIXED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("LOESS");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("VIEWINTERNALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("LOGISTIC");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESC", "DECENDING"]).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("INMODEL", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTDESIGN", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTDESIGNONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTMODEL", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("ROCOPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "INTERNAL"]).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESC", "DECENDING"]).build();
                                    statementBuilder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FMT", "UNFORMATTED", "INTERNAL", "UNFMT", "FREQ"]).build();
                                    statementBuilder.addOption("PARAM", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["EFFECT", "ORDINAL", "THERMOMETER", "REF", "REFERENCE", "ORTHEFFECT", "ORTHORDINAL", "ORTHOTHERM", "ORTHREF", "ORTHPOLY", "POLY", "POLYNOMIAL", "GLM"]).build();
                                    statementBuilder.addOption("REF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["FIRST", "LAST"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.addOption("DUMMIES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ERROR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FILE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.FORMAT, false).build();
                                    statementBuilder.addOption("LINESIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["LS"]).build();
                                    statementBuilder.addOption("LOOKUP", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["AUTO", "BINARY", "LINEAR", "SELECT"]).build();
                                    statementBuilder.addOption("NODUMMIES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOERROR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NORESIDUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("RESIDUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTRAST", false, null);
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ESTIMATE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["PARM", "EXP", "BOTH", "PROB", "ALL"]).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["EPSILON"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.addOption("ADJUST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CATEGORY", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DIVISOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("EXP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ILINK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LOWERTAILED"]).build();
                                    statementBuilder.addOption("NOFILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("TESTVALUE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["TESTMEAN"]).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UPPERTAILED"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.addOption("ABSFCONV", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("AGGREGATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("BEST", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("BINWIDTH", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CLODDS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["PL", "WALD", "BOTH"]).build();
                                    statementBuilder.addOption("CLPARM", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["PL", "WALD", "BOTH"]).build();
                                    statementBuilder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CORRB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COVB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CTABLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("EXPB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXPEST"]).build();
                                    statementBuilder.addOption("FAST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FCONV", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("GCONV", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("HIERARCHY", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["HIER"]).choices(["NONE", "SINGLE", "SINGLECLASS", "MULTIPLE", "MULTIPLECLASS"]).build();
                                    statementBuilder.addOption("INCLUDE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("INFLUENCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ITPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LACKFIT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("LINK", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["L"]).choices(["CLOGLOG", "LOGIT", "NORMIT", "PROBIT", "CCLOGLOG", "CCLL", "CUMCLOGLOG", "CLOGIT", "CUMLOGIT", "CPROBIT", "CUMPROBIT", "GLOGIT"]).build();
                                    statementBuilder.addOption("MAXSTEP", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("NOCHECK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NODUMMYPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODESIGNPRINT", "NODP"]).build();
                                    statementBuilder.addOption("NOFIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOODDSRATIO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOOR"]).build();
                                    statementBuilder.addOption("OFFSET", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("OUTROC", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTR"]).build();
                                    statementBuilder.addOption("PARMLABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PEVENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    statementBuilder.addOption("PLCL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PLCONV", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("PPROB", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    statementBuilder.addOption("RIDGEINIT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("RIDGING", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ABSOLUTE", "RELATIVE", "NONE"]).build();
                                    statementBuilder.addOption("ROCEPS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("RSQUARE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RSQ"]).build();
                                    statementBuilder.addOption("SCALE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("SELECTION", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NONE", "FORWARD", "F", "BACKWARD", "B", "STEPWISE", "S", "SCORE"]).build();
                                    statementBuilder.addOption("SEQUENTIAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SEQ"]).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("SLENTRY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SLE"]).build();
                                    statementBuilder.addOption("SLSTAY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SLS"]).build();
                                    statementBuilder.addOption("START", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("STB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("STOP", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("TECHNIQUE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["TECH"]).choices(["FISHER", "NEWTON"]).build();
                                    statementBuilder.addOption("WALDCL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CL"]).build();
                                    statementBuilder.addOption("XCONV", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("C", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("CBAR", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("DFBETAS", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("DIFCHISQ", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("DIFDEV", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("H", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["L"]).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("PREDICTED", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["PRED", "PROB", "P"]).build();
                                    statementBuilder.addOption("PREDPROBS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["PREDPROB"]).choices(["INDIVIDUAL", "CUMULATIVE", "CROSSVALIDATE", "I", "C", "XVALIDATE", "X"]).build();
                                    statementBuilder.addOption("RESCHI", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("RESDEV", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("STDXBETA", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["U"]).build();
                                    statementBuilder.addOption("XBETA", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ROC", false, null);
                                    statementBuilder.addOption("LINK", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["CLOGLOG", "LOGIT", "NORMIT", "PROBIT", "CCLOGLOG", "CCLL", "CUMCLOGLOG", "CLOGIT", "CUMLOGIT", "CPROBIT", "CUMPROBIT"]).build();
                                    statementBuilder.addOption("NOOFFSET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ROCCONTRAST", false, null);
                                    statementBuilder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ESTIMATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CLM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder.addOption("FITSTAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["FITSTATS"]).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("OUTROC", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("PRIOR", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder.addOption("PRIOREVENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("ROCEPS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.addOption("NORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NORMALIZE"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("LP");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DEBUGPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DEVEX", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DUALOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("EPSILON", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("FLOW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FUZZ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("INFINITY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MAXIT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXIT1", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXIT2", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXIT3", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MPSFIN", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("MPSIN", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("MPSOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("NODEVEX", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFLOW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPARAPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPREPROCESS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORANGEPRICE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORANGERHS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTABLEAUPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PEPSILON", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("PMAXIT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PREPROCESS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRICEPHI", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("PRIMALIN", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("PRIMALOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTFREQ", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PRINTLEVEL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["-2", "-1", "0", "1"]).build();
                                    builder.addOption("RANGEPRICE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RANGERHS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPSILON", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("RHSPHI", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SCALE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["BOTH", "COLUMN", "NONE", "ROW"]).build();
                                    builder.addOption("SMALL", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SPARSEDATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SPARSEOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("TABLEAUOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("TABLEAUPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TIME", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("U", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder = builder.addStatement("COEF", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RHS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RHSSEN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ROW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TYPE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MAPIMPORT");
                                    builder.addOption("CONTENTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CREATE_ID_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATAFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["INFILE"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RENAME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MDS");
                                    builder.addOption("ALIAS_NONORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NONORM"]).build();
                                    builder.addOption("ALIAS_NOPHIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOPHIST", "NOPRINT", "NOP"]).build();
                                    builder.addOption("ALIAS_NOULB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOULB"]).build();
                                    builder.addOption("ALTERNATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["ALT"]).build();
                                    builder.addOption("COEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["IDENTITY", "IDEN", "I", "DIAGONAL", "DIAG", "D"]).build();
                                    builder.addOption("CONDITION", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["COND"]).choices(["UN", "U", "MATRIX", "MAT", "M", "SUBJECT", "SUB", "S", "ROW", "R"]).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["CONV"]).build();
                                    builder.addOption("CUTOFF", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DECIMALS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["DEC"]).build();
                                    builder.addOption("DIMENSION", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DIM", "DIMENS"]).build();
                                    builder.addOption("EPSILON", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["EPS"]).build();
                                    builder.addOption("FIT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("FORMULA", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["FOR"]).choices(["0", "OLS", "O", "1", "USS", "U", "2", "CSS", "C"]).build();
                                    builder.addOption("GCONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["GCONV"]).build();
                                    builder.addOption("INAV", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "D", "SSCP", "S"]).build();
                                    builder.addOption("INITIAL", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).aliases(["IN"]).build();
                                    builder.addOption("LEVEL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ABSOLUTE", "ABS", "A", "RATIO", "RAT", "R", "INTERVAL", "INT", "I", "LOGINTERVAL", "LOG", "L", "ORDINAL", "ORD", "O"]).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["ITER"]).build();
                                    builder.addOption("MCONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MCONV"]).build();
                                    builder.addOption("MINCRIT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["CRITMIN"]).build();
                                    builder.addOption("NEGATIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OCOEF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OCONFIG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OCRIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OITER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["OUTITER"]).build();
                                    builder.addOption("OTRANS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTFIT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTRES", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PCOEF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PCONFIG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PDATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PFINAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PFIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PFITROW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PINAVDATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PINEIGVAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PINEIGVEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PININ", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PINIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PITER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PTRANS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RANDOM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RIDGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SHAPE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["TRIANGULAR", "TRIANGLE", "TRI", "T", "SQUARE", "SQU", "S"]).build();
                                    builder.addOption("SIMILAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["SIM"]).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("UNTIE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INVAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MATRIX", false, null);
                                    statementBuilder.aliases(["MAT", "SUB", "SUBJECT"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MEANS");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CHARTYPE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLASSDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("CLM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("COMPLETETYPES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CSS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CV", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDTYPES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESCEND", "DESCENDING"]).build();
                                    builder.addOption("EXCLNPWGTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGT"]).build();
                                    builder.addOption("EXCLUSIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FW", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("IDMIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("KURTOSIS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["KURT"]).build();
                                    builder.addOption("LCLM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LCLM2", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MAX", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MAXDEC", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MEAN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MEDIAN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MIN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NMISS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOLABELS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NONOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTHREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NWAY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OPTIMISE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "EXTERNAL/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    builder.addOption("P1", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P10", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P20", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P25", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P30", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P40", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P5", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P50", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P60", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P70", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P75", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P80", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P90", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P95", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P99", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTALLTYPES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PRINTALL"]).build();
                                    builder.addOption("PROBT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PRT"]).build();
                                    builder.addOption("Q1", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("Q2", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("Q3", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("QMARKERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("QMETHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["OS", "P2", "HIST/P2"]).build();
                                    builder.addOption("QNTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PCTLDEF"]).build();
                                    builder.addOption("QRANGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RANGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SKEWNESS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["SKEW"]).build();
                                    builder.addOption("STD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["STDDEV"]).build();
                                    builder.addOption("STDERR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SUM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SUMPRECISION", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SUMSIZE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SUMWGT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("T", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("THREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("UCLM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("UCLM2", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("USS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("VAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT", "UWGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TYPES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WAYS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MI");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("MAXIMUM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MAX"]).build();
                                    builder.addOption("MINIMUM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MIN"]).build();
                                    builder.addOption("MINMAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MU0", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["THETA0"]).build();
                                    builder.addOption("NIMPUTE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FCS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MCMC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MONOTONE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TRANSFORM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MIANALYZE");
                                    builder.aliases(["MIANALYSE"]);
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("BCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVB", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("EDF", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MULT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MULTIVARIATE"]).build();
                                    builder.addOption("PARMINFO", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("PARMS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("THETA0", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["MU0"]).build();
                                    builder.addOption("WCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("XPXI", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODELEFFECTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STDERR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MIXED");
                                    builder.addOption("ABSOLUTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALIAS_NOBOUND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOBOUND"]).build();
                                    builder.addOption("ALIAS_NOINFO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOINFO"]).build();
                                    builder.addOption("ALIAS_NOITPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOITPRINT"]).build();
                                    builder.addOption("ALIAS_NOPROFILE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SIGITER", "NOPROFILE"]).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ANOVAF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ASYCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ASYCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CONVF", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CONVG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CONVH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("COVTEST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DFBW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EMPIRICAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("IC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INFO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ITDETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOGNOTE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UPDATE"]).build();
                                    builder.addOption("MAXFUNC", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["REML", "ML", "MIVQUE0", "TYPE1", "TYPE2", "TYPE3"]).build();
                                    builder.addOption("MMEQ", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MMEQSOL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOCLPRINT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ORD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("RATIO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RIDGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SCORING", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTRAST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LSMEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RANDOM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REPEATED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MLP");
                                    builder.addOption("COMPACTHISTORY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESC", "DECENDING"]).build();
                                    builder.addOption("HISTORYDATASET", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("HISTORYDATASETFINAL", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("HISTORYDATASETMINIMUMWRITEINTERVAL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("NOFIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINTINPUTENCODING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTINPUTLENGTHS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTINPUTMAPPING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTINPUTSCALING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTINPUTWEIGHTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTTHRESHOLDS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTWEIGHTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("THRESHOLDSTEPS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("VALIDATION", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("MODECLUS");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("AM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BOUNDARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CASCADE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CASC"]).build();
                                    builder.addOption("CK", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CLUSTER", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("CORE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CROSS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CROSSLIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DENSITY", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("DIMENSION", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["DIM"]).build();
                                    builder.addOption("DK", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DOCK", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("DR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("EARLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("JOIN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("K", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOCAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXCLUSTERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXC"]).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["M", "MET"]).build();
                                    builder.addOption("MODE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NEIGHBOR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NEIGHBOUR"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTCLUS", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTC"]).build();
                                    builder.addOption("OUTLENGTH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["OUTL"]).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("OUTSUM", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTS"]).build();
                                    builder.addOption("POWER", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["POW"]).build();
                                    builder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["S"]).build();
                                    builder.addOption("STANDARD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["STD"]).build();
                                    builder.addOption("SUM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TEST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("THRESHOLD", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["THR"]).build();
                                    builder.addOption("TRACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("NESTED");
                                    builder.addOption("AOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("NLIN");
                                    builder.setAllowsAssignment(true);
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("BEST", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("BIAS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CONVERGEOBJ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CONVERGEPARM", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("G4", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HOUGAARD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTDEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSUBIT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["GAUSS", "MARQUARDT", "NEWTON", "GRADIENT"]).build();
                                    builder.addOption("NLINMEASURES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOHALVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOITPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTEMPS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NUMERICDIFFERENTIATION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NUMERICDIFF"]).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RHO", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SAVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIGSQ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SMETHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["HALVE", "GOLDEN", "CUBIC"]).build();
                                    builder.addOption("TAU", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("TOTALSS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("UNCORRECTEDDF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UNCORRECTEDGF"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BOUNDS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTROL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARAMETERS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARAMS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARMS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RETAIN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("NPAR1WAY");
                                    builder.addOption("AB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ANOVA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CONOVER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CORRECT", AbstractSasLanguageSupport_Lua.OptionType.CHOICE_OR_KEYWORD, false).build();
                                    builder.addOption("D", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EDF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["KS"]).build();
                                    builder.addOption("HL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("KLOTZ", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MEDIAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MOOD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORMAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["VW"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SAVAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SCORES", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA"]).build();
                                    builder.addOption("ST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TEST0644184C192A44DDB0C2FDA0E6CD21DE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TESTCEDB3DC4C36749A28CC31F9ACC483858", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TESTF885B263F13F4483A03372D6EAA000E8", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WILCOXON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXACT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ODSTEST");
                                    builder.setRunGroups(true);
                                    builder.addOption("PATH", AbstractSasLanguageSupport_Lua.OptionType.COMPOUND_NAME, false).build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DYNAMIC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE1", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE10", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE3", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE4", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE5", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE6", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE7", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE8", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBANOTE9", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE1", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE10", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE3", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE4", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE5", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE6", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE7", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE8", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBBNOTE9", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN1", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN10", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN3", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN4", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN5", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN6", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN7", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN8", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBFOOTN9", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBPAGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE1", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE10", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE3", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE4", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE5", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE6", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE7", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE8", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBSTITLE9", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE1", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE10", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE2", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE3", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE4", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE5", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE6", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE7", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE8", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OBTITLE9", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("OPTIMALBIN");
                                    builder.addOption("CRITERION", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLUDEMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INBINS", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("MAXPREDICTIVEPOWERCHANGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MAXPREDPWRCHANGE"]).build();
                                    builder.addOption("MERGEMISSINGBIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MINBINSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINBINSIZERATIO", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MONOTONEWOE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOOPENLEFT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOOPENRIGHT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTPUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTATS", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTATSONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WOE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WOEADJUST", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INPUT", false, null);
                                    statementBuilder.aliases(["IN"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TARGET", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("OPTIONS");
                                    builder.addOption("DEFINE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EXPAND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("GROUP", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("HEXVALUE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HOST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTGROUPS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LISTINSERTAPPEND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOGNUMBERFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LONG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOEXPAND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOHOST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PORT", "PORTABLE"]).build();
                                    builder.addOption("NOLOGNUMBERFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("RESTRICT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VALUE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("OPTLOAD");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("OPTSAVE");
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PDS");
                                    builder.addOption("DDNAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("KILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOLIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOREFRESH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REFRESH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STRICT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("CHANGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCHANGE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PDSCOPY");
                                    builder.addOption("INDD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTDD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PHREG");
                                    builder.setAllowsAssignment(true);
                                    builder.aliases(["TPHREG"]);
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("ATRISK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVSANDWICH", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["COVS"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BASELINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.addOption("ADJUST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DIVISOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LOWERTAILED"]).build();
                                    statementBuilder.addOption("NOFILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("TESTVALUE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["TESTMEAN"]).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UPPERTAILED"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STRATA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.addOption("AVERAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    this.createProcInformation2();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createProcInformation2 = function () {
                                    var builder;
                                    var statementBuilder;
                                    builder = this.newProcInfoBuilder("PLAN");
                                    builder.setRunGroups(true);
                                    builder.addOption("ORDERED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FACTORS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TREATMENTS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PLOT");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("HPERCENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("NOLEGEND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VPERCENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PLS");
                                    builder.addOption("CENSCALE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CV", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CVTEST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NFAC", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOCENTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCVSTDIZE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSCALE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("VARSCALE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VARSS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.addOption("INTERCEPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SOLUTION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("H", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("PREDICTED", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("PRESS", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("STDX", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("STDXSSE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("STDY", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("STDYSSE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("TSQUARE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("XRESIDUAL", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("XSCORE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("YRESIDUAL", AbstractSasLanguageSupport_Lua.OptionType.NAME_LIST, false).build();
                                    statementBuilder.addOption("YSCORE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("POWER");
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOGISTIC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MULTREG", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ONECORR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ONESAMPLEFREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ONESAMPLEMEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ONEWAYANOVA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PAIREDFREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PAIREDMEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TWOSAMPLEFREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TWOSAMPLEMEANS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TWOSAMPLESURVIVAL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TWOSAMPLEWILCOXON", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PRINCOMP");
                                    builder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["COVARIANCE"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["PARPREFIX"]).build();
                                    builder.addOption("PREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SING"]).build();
                                    builder.addOption("STANDARD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["STD"]).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARTIAL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PRINT");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DOUBLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["D"]).build();
                                    builder.addOption("HEADING", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["HEADINGS"]).choices(["HORIZONTAL", "H", "VERTICAL", "V"]).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["L"]).build();
                                    builder.addOption("LABELANDNAME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LN"]).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OBS", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["R"]).build();
                                    builder.addOption("ROWS", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["PAGE"]).build();
                                    builder.addOption("SPLIT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["S"]).build();
                                    builder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SUMLABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("UNIFORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["U"]).build();
                                    builder.addOption("WIDTH", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["FULL", "MINIMUM", "MIN/MINIMUM", "UNIFORM", "U/UNIFORM", "UNIFORMBY", "UBY/UNIFORMBY"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PAGEBY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUMBY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PRINTTO");
                                    builder.addOption("LOG", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NEW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FILE", "NAME"]).build();
                                    builder.addOption("UNIT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PROBIT");
                                    builder.addOption("C", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESC", "DECENDING"]).build();
                                    builder.addOption("HPROB", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("INVERSECL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LACKFIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOG10", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OPTC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("XDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.addOption("ADJUST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DIVISOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LOWERTAILED"]).build();
                                    statementBuilder.addOption("NOFILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("TESTVALUE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["TESTMEAN"]).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UPPERTAILED"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PWENCODE");
                                    builder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["SAS001", "SAS002", "SASENC", "SAS003"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("PYTHON");
                                    builder.addOption("KEEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIB", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("TERMINATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["TERM"]).build();
                                    statementBuilder = builder.addStatement("EXEC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXECUTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXPORT", false, null);
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PYTHON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IMPORT", false, null);
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RECV", false, null);
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SEND", false, null);
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PYTHON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUBMIT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("QUANTREG");
                                    builder.addOption("ALGORITHM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CI", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("PP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.addOption("ADJUST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DIVISOR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("E", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LOWERTAILED"]).build();
                                    statementBuilder.addOption("NOFILL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("TESTVALUE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["TESTMEAN"]).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UPPERTAILED"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.addOption("CORRB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COVB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CUTOFF", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("DIAGNOSTICS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ITPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LEVERAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NODIAG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOSUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    statementBuilder.addOption("QUANTILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["QUANTLEV"]).build();
                                    statementBuilder.addOption("SCALE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("COLUMNWISE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LEVERAGE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("MA", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["MAHADIST"]).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("OUTLIER", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("P", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["PREDICTED"]).build();
                                    statementBuilder.addOption("Q", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["QUANTILE"]).build();
                                    statementBuilder.addOption("RD", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["ROBDIST"]).build();
                                    statementBuilder.addOption("RES", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["RESIDUAL"]).build();
                                    statementBuilder.addOption("SP", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["SPLINE"]).build();
                                    statementBuilder.addOption("SR", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["SRESIDUAL"]).build();
                                    statementBuilder.addOption("STDP", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.addOption("LR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("QINTERACT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("RANKSCORE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("WALD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("R");
                                    builder.addOption("GMTOFFSET", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("KEEP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIB", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("TERMINATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["TERM"]).build();
                                    builder.addOption("TIMESASCHRON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ASSIGN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXEC", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXECUTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXPORT", false, null);
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IMPORT", false, null);
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOAD", false, null);
                                    statementBuilder.addOption("C", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RECV", false, null);
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SAVE", false, null);
                                    statementBuilder.addOption("C", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CATALOG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SEND", false, null);
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("R", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SUBMIT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("RANK");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESC", "DECENDING"]).build();
                                    builder.addOption("FRACTION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["F"]).build();
                                    builder.addOption("GROUPS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NORMAL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["BLOM", "TUKEY", "VW"]).build();
                                    builder.addOption("NPLUS1", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["FN1", "N1"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PERCENT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["P"]).build();
                                    builder.addOption("SAVAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TIES", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["HIGH", "LOW", "MEAN", "DENSE", "CONDENSE"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RANKS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("RBF");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESC"]).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("MAXCENTRES", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXCENTERS"]).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINMEMBERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MINMEM"]).build();
                                    builder.addOption("NOFIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOOVERLAP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OVERLAP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("LOWER", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["L"]).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("PREDICTED", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["PRED", "PROB", "P"]).build();
                                    statementBuilder.addOption("UPPER", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["U"]).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("REG");
                                    builder.setRunGroups(true);
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EDF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RSQUARE"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTPMML", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("OUTSEB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSSCP", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTB", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTVIF", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PCOMIT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PMMLVER", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PRESS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RIDGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("TABLEOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("USSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ADD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CODE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MTEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PRINT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REFIT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RESTRICT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REWEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("RELEASE");
                                    builder.addOption("BOUNDARY", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["TYPE"]).choices(["DATASET", "DSCB", "CYLINDERS", "CYLINDER", "CYLS", "CYL", "TRACKS", "TRACK", "TRK", "TRK", "ALLOC", "DD", "JCL"]).build();
                                    builder.addOption("DDNAME", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["DD"]).build();
                                    builder.addOption("TRACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("REPORT");
                                    builder.addOption("BOX", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CENTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COLWIDTH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("COMMAND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COMPLETECOLS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("COMPLETEROWS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLNPWGT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGTS"]).build();
                                    builder.addOption("FORMCHAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FC"]).build();
                                    builder.addOption("HEADLINE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HEADSKIP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HELP", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("LIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NAMED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCENTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCOMPLETECOLS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCOMPLETEROWS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOEXEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOEXECUTE"]).build();
                                    builder.addOption("NOHEADER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTHREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOWD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOWINDOWS", "NOFS"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTREPT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PANELS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PSPACE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("QMARKERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("QMETHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["OS", "P2", "HIST/P2"]).build();
                                    builder.addOption("QNTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PCTLDEF"]).build();
                                    builder.addOption("REPORT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SHOWALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SPACING", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("SPLIT", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("THREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT"]).build();
                                    builder.addOption("WD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["WINDOWS", "FS"]).build();
                                    builder.addOption("WRAP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BREAK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COLUMN", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COLUMNS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COMPUTE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DEFINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RBREAK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WGT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("ROBUSTREG");
                                    builder.addOption("COVOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("FWLS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("ITPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NAMELEN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL"]).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PLOT"]).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TEST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("RSREG");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RIDGE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SCORE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("NOSTD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PREDICT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("RESIDUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SCORE", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("TYPE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SEGMENT");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DETAILS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DIFFERENCES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DISTRIBUTIONS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ENTROPY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FAST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FITOPTIONS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FITMETHOD"]).build();
                                    builder.addOption("INEST", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("INMODEL", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSEGMENTS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXSEG"]).build();
                                    builder.addOption("MAXSUMMARYBARS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSUMMARYPLOTS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINMEMBERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MINMEM"]).build();
                                    builder.addOption("MINPERCENT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NOFIT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OTHERLABEL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("OUTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTMODEL", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOT", AbstractSasLanguageSupport_Lua.OptionType.MULTI_CHOICE, false).aliases(["PLOTS"]).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PROFILES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SEGMENTFORMAT", AbstractSasLanguageSupport_Lua.OptionType.FORMAT, false).aliases(["SEGFMT"]).build();
                                    builder.addOption("SIMILARITIES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WEIGHTING", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["CONSTANT", "PROBABILITY", "PROB/PROBABILITY", "LOG", "SURPRISAL/LOG"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INPUT", false, null);
                                    statementBuilder.addOption("BANDED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BINS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("COMPARE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESCEND", "DESC"]).build();
                                    statementBuilder.addOption("DISCRETE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INACTIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["REPORTONLY"]).build();
                                    statementBuilder.addOption("MAX", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["TO"]).build();
                                    statementBuilder.addOption("MIN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["FROM"]).build();
                                    statementBuilder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOMINAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["FORMATTED/FMT", "EXTERNAL/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT"]).build();
                                    statementBuilder.addOption("ORDINAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OTHERLABEL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    statementBuilder.addOption("WEIGHT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("WINSOR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.addOption("MARGIN", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("SCORE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("SEGMENT", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.addOption("COUNT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    statementBuilder.addOption("SCORE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.addOption("SEGMENT", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SETINIT");
                                    statementBuilder = builder.addStatement("CPU", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXPIRE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SAVE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SITEINFO", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SITEINITSTMT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SITEOPTIONS", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SGPANEL");
                                    builder.addOption("CYCLEATTRS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["DES"]).build();
                                    builder.addOption("NOAUTOLEGEND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCYCLEATTRS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PAD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("WPS_TMPLOUT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("BAND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BUBBLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COLAXIS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DENSITY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBARPARM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBOX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HIGHLOW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HISTOGRAM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KEYLEGEND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LINEPARM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOESS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NEEDLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PANELBY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PBSPLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REFLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REG", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ROWAXIS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCATTER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SERIES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STEP", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBARPARM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBOX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VECTOR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SGPLOT");
                                    builder.addOption("CYCLEATTRS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["DES"]).build();
                                    builder.addOption("NOAUTOLEGEND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOCYCLEATTRS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PAD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("WPS_TMPLOUT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("BAND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BUBBLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DENSITY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ELLIPSE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBARPARM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HBOX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HIGHLOW", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HISTOGRAM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KEYLEGEND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LINEPARM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOESS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NEEDLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PBSPLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REFLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REG", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCATTER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SERIES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STEP", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBARPARM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VBOX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VECTOR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VLINE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WATERFALL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("X2AXIS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("XAXIS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("Y2AXIS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("YAXIS", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SGRENDER");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, true).build();
                                    builder.addOption("SGANNO", AbstractSasLanguageSupport_Lua.OptionType.DATASET, true).build();
                                    builder.addOption("TEMPLATE", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    statementBuilder = builder.addStatement("DYNAMIC", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SGSCATTER");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["DES"]).build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COMPARE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MATRIX", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SHEWHART");
                                    builder.addOption("ANNOTATE", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).build();
                                    builder.addOption("ANNOTATE2", AbstractSasLanguageSupport_Lua.OptionType.DATASET, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("GRAPHICS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HISTORY", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("LIMITS", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("TABLE", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IRCHART", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PCHART", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SIMNORMAL");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NUMREAL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["NR"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).aliases(["OUTSIM"]).build();
                                    builder.addOption("OUTCOND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSEED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("SEEDBY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR1", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SING1"]).build();
                                    builder.addOption("SINGULAR2", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SING2"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COND", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONDITION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SOAP");
                                    builder.addOption("ENVELOPE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("MUSTUNDERSTAND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("PROXYHOST", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("PROXYPASSWORD", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("PROXYPORT", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PROXYUSERNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SOAPACTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("URL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBAUTHDOMAIN", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBDOMAIN", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WEBPASSWORD", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("WEBUSERNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("WSSPASSWORD", AbstractSasLanguageSupport_Lua.OptionType.PASSWD, false).build();
                                    builder.addOption("WSSUSERNAME", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SORT");
                                    builder.addOption("ASCII", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DANISH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["IN"]).build();
                                    builder.addOption("DUPOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("EBCDIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EQUALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EQ"]).build();
                                    builder.addOption("FINNISH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FORCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NATIONAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NODUPKEY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODUPKEYS"]).build();
                                    builder.addOption("NODUPRECS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODUPLICATES", "NODUP", "NODUPS", "NODUPREC", "NODUPLICATE"]).build();
                                    builder.addOption("NOEQUALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOEQ"]).build();
                                    builder.addOption("NORWEGIAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTHREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("REVERSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SORTID", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("SORTSEQ", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SORTSIZE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SWEDISH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TAGSORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("THREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.addOption("DECENDING/DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DESC/DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SORTT");
                                    builder.addOption("ASCII", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DANISH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["IN"]).build();
                                    builder.addOption("DUPOUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("EBCDIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EQUALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EQ"]).build();
                                    builder.addOption("FINNISH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FORCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NATIONAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NODUPKEY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODUPKEYS"]).build();
                                    builder.addOption("NODUPRECS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NODUPLICATES", "NODUP", "NODUPS", "NODUPREC", "NODUPLICATE"]).build();
                                    builder.addOption("NOEQUALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOEQ"]).build();
                                    builder.addOption("NORWEGIAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTHREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("REVERSE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SORTID", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).platforms([AbstractSasLanguageSupport_Lua.Platform.zos]).build();
                                    builder.addOption("SORTSEQ", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SORTSIZE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SWEDISH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TAGSORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("THREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.addOption("DECENDING/DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DESC/DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SOURCE");
                                    builder.addOption("DIRDD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("INDD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOALIAS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NODATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTSORTED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTDD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("AFTER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BEFORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FIRST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LAST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SQL");
                                    builder.setRunGroups(true);
                                    builder.addOption("_FORCED_JOIN_TYPE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, true).choices(["MERGE", "HASH"]).build();
                                    builder.addOption("_HASH_JOIN_TRACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_IMPL_PASSTHRU_FILE_", AbstractSasLanguageSupport_Lua.OptionType.STRING, true).build();
                                    builder.addOption("_METHOD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_NO_IMPLICIT_FILTERS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_PJD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_PRINT_JOIN_CHOICE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("_PRINT_JOIN_SIZES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, true).build();
                                    builder.addOption("BUFFERSIZE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CONSTDATETIME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DOUBLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DQUOTE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ANSI", "SAS", "WPL", "WPS"]).build();
                                    builder.addOption("ERRORSTOP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EXEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FEEDBACK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("INOBS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("IPASSTHRU", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOOPS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("NOCONSTDATETIME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NODOUBLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOERRORSTOP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOEXEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOFEEDBACK", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOIPASSTHRU", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NONUMBER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOREMERGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSORTMSG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSTIMER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTHREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NUMBER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTOBS", AbstractSasLanguageSupport_Lua.OptionType.INT64, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REMERGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SORTMSG", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SORTSEQ", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ASCII", "EBCDIC", "DANISH", "FINNISH", "ITALIAN", "NORWEGIAN", "SPANISH", "SWEDISH", "NATIONAL", "REVERSE"]).build();
                                    builder.addOption("STIMER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TAGSORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("THREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("(", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ALTER", false, null);
                                    statementBuilder.addOption("ADD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CHAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CHARACTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DECIMAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DOUBLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DROP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FLOAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INTEGER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MODIFY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NUM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NUMERIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PRECISION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("REAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SMALLINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TABLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VARCHAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONNECT", false, null);
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    var infoBuilder_create = this.newProcInfoBuilder("create");
                                    var statementBuilder_create;
                                    statementBuilder_create = infoBuilder_create.addStatement("INDEX", false, null);
                                    statementBuilder_create.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create.build();
                                    var infoBuilder_unique = this.newProcInfoBuilder("unique");
                                    var statementBuilder_create_unique;
                                    statementBuilder_create_unique = infoBuilder_unique.addStatement("INDEX", false, null);
                                    statementBuilder_create_unique.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_unique.build();
                                    infoBuilder_create.addStatementFromInfoBuilder(infoBuilder_unique);
                                    statementBuilder_create.build();
                                    var infoBuilder_table = this.newProcInfoBuilder("table");
                                    var statementBuilder_create_table;
                                    statementBuilder_create_table = infoBuilder_table.addStatement("SELECT", false, null);
                                    statementBuilder_create_table.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("AND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("ASC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("BETWEEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("BTRIM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("BY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("CALCULATED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("CASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("COALESCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("CONNECTION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("CONTAINS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("CORRESPONDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("DESC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("DISTINCT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("END", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("EXCEPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("EXISTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("FROM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("FULL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("GROUP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("HAVING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("INNER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("INTERSECT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("INTO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("IS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("JOIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("LEFT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("LIBNAME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("LIKE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("MATCH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("MONOTONIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("NATURAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("NOTIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("NOTRIM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("OR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("OUTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("RIGHT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("SELECT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("SEPARATED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("THEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("TO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("TRIMMED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("UNION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("UNIQUE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("USING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("WHEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.addOption("WHERE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create_table.build();
                                    infoBuilder_create.addStatementFromInfoBuilder(infoBuilder_table);
                                    statementBuilder_create.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder_create.build();
                                    statementBuilder_create = infoBuilder_create.addStatement("VIEW", false, null);
                                    statementBuilder_create.build();
                                    builder.addStatementFromInfoBuilder(infoBuilder_create);
                                    statementBuilder.addOption("CHAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CHARACTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DATE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DECIMAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DOUBLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FLOAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INTEGER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NUM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NUMERIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("PRECISION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("REAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SMALLINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VARCHAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.addOption("AND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BETWEEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BTRIM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CALCULATED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COALESCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CONTAINS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("END", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("EXISTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FROM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LIKE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MONOTONIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOTIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("THEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("WHEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("WHERE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DESCRIBE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DISCONNECT", false, null);
                                    statementBuilder.addOption("FROM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DROP", false, null);
                                    statementBuilder.addOption("FROM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INDEX", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TABLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VIEW", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EXECUTE", false, null);
                                    statementBuilder.addOption("BY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INSERT", false, null);
                                    statementBuilder.addOption("INTO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VALUES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("RESET", false, null);
                                    statementBuilder.addOption("RESET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("AND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ASC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BETWEEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BTRIM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CALCULATED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COALESCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CONNECTION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CONTAINS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CORRESPONDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DESC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("DISTINCT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("END", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("EXCEPT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("EXISTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FROM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FULL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("GROUP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("HAVING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INNER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INTERSECT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INTO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("JOIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LEFT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LIBNAME", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LIKE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MATCH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MONOTONIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NATURAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOTIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOTRIM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ON", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OUTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("RIGHT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SELECT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SEPARATED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("THEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TO", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRIMMED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("UNION", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("UNIQUE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("USING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("WHEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("WHERE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("UPDATE", false, null);
                                    statementBuilder.addOption("AND", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("AS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BETWEEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("BTRIM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CALCULATED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CASE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("COALESCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("CONTAINS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("END", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("EXISTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("IS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LIKE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("MONOTONIC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("NOTIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("OR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("SET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("THEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("WHEN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("WHERE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VALIDATE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("STANDARD");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLNPWGT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGTS"]).build();
                                    builder.addOption("MEAN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STD", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("STDIZE");
                                    builder.addOption("ADD", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("FUZZ", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("INITIAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MULT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NMARKERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PCTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("PCTLMTD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["ORD_STAT", "ONEPASS", "P2"]).build();
                                    builder.addOption("PCTLPTS", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("PSTAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPONLY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("UNSTD", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UNSTDIZE"]).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE_OR_KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOCATION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCALE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WGT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("STEPDISC");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("BSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INCLUDE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXMACRO", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSTEP", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["STEPWISE", "SW", "FORWARD", "FW", "BACKWARD", "BW"]).build();
                                    builder.addOption("PCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PR2ENTRY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PR2E"]).build();
                                    builder.addOption("PR2STAY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PR2S"]).build();
                                    builder.addOption("PSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SLENTRY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SLE"]).build();
                                    builder.addOption("SLSTAY", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SLS"]).build();
                                    builder.addOption("START", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("STDMEAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STOP", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("TCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WCORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WCOV", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("WSSCP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SUMMARY");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CHARTYPE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLASSDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("CLM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("COMPLETETYPES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CSS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CV", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDTYPES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DESCEND", "DESCENDING"]).build();
                                    builder.addOption("EXCLNPWGTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGT"]).build();
                                    builder.addOption("EXCLUSIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FW", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("IDMIN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("KURTOSIS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["KURT"]).build();
                                    builder.addOption("LCLM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("LCLM2", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MAX", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MAXDEC", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MEAN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MEDIAN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MIN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MODE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("N", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NMISS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NOLABELS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NONOBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTHREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NWAY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OPTIMISE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "EXTERNAL/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    builder.addOption("P1", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P10", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P20", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P25", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P30", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P40", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P5", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P50", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P60", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P70", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P75", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P80", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P90", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P95", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("P99", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PRINTALLTYPES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PRINTALL"]).build();
                                    builder.addOption("PROBT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["PRT"]).build();
                                    builder.addOption("Q1", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("Q2", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("Q3", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("QMARKERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("QMETHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["OS", "P2", "HIST/P2"]).build();
                                    builder.addOption("QNTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PCTLDEF"]).build();
                                    builder.addOption("QRANGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("RANGE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SKEWNESS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["SKEW"]).build();
                                    builder.addOption("STD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["STDDEV"]).build();
                                    builder.addOption("STDERR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SUM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SUMPRECISION", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("SUMSIZE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("SUMWGT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("T", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("THREADS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("UCLM", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("UCLM2", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("USS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("VAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT", "UWGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TYPES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WAYS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SURVEYSELECT");
                                    builder.addOption("CERTSIZE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("GROUPS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("JTPROBS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXSIZE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["M"]).build();
                                    builder.addOption("MINSIZE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("NMAX", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NMIN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTHITS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSEED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSIZE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTSORT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("RANUNI", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("REPS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["REP"]).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SAMPRATE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["RATE"]).build();
                                    builder.addOption("SAMPSIZE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["N"]).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SELECTALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SORT", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NEST", "SERP"]).build();
                                    builder.addOption("STATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("STRATUMSEED", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["NONE", "RESTORE"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CONTROL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SIZE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("STRATA", false, null);
                                    statementBuilder.addOption("ALLOC", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("ALLOCMIN", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    statementBuilder.addOption("COST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.addOption("NOSAMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("STATS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("VAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("SVM");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("INMODEL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTMODEL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("TYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KERNELINNER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KERNELOUTER", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TABLEAU");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("NOREPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTFILE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["OUT"]).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("UPLOAD", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TABULATE");
                                    builder.addOption("CLASSDATA", AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DEPTH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("EXCLNPWGTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGT"]).build();
                                    builder.addOption("EXCLUSIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.FORMAT, false).aliases(["F"]).build();
                                    builder.addOption("FORMCHAR", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["FC"]).build();
                                    builder.addOption("MISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOSEPS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED/FMT", "EXTERNAL/FMT", "FMT", "UNFORMATTED/UNFMT", "INTERNAL/UNFMT", "UNFMT", "FREQ"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("QMARKERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("QMETHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["OS", "P2", "HIST/P2"]).build();
                                    builder.addOption("QNTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["PCTLDEF"]).build();
                                    builder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["S"]).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASSLEV", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KEYLABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("KEYWORD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIABLE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VARIABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TEMPLATE");
                                    statementBuilder = builder.addStatement("DEFINE", false, null);
                                    statementBuilder.addOption("COLUMN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("FOOTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("HEADER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("STYLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TABLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TAGSET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("DELETE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("EDIT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LINK", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PATH", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SOURCE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TPSPLINE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SCORE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TRANSPOSE");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DELIMITER", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["DELIM"]).build();
                                    builder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LET", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NAME", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("SUFFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COPY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IDLABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TRANSREG");
                                    builder.addOption("ADDITIVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["ADD"]).build();
                                    builder.addOption("AIPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["AIP"]).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["ALP"]).build();
                                    builder.addOption("APPROXIMATIONS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["APP"]).build();
                                    builder.addOption("CANONICAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["CAN"]).build();
                                    builder.addOption("CCC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CCONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["CCO"]).build();
                                    builder.addOption("CDPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["CDP"]).build();
                                    builder.addOption("CEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CILPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["CIL"]).build();
                                    builder.addOption("CIPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["CIP"]).build();
                                    builder.addOption("CIUPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["CIU"]).build();
                                    builder.addOption("CL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLI", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CLM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CMLPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["CML"]).build();
                                    builder.addOption("CMUPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["CMU"]).build();
                                    builder.addOption("COEFFICIENTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["COE"]).build();
                                    builder.addOption("CONVERGE", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["CON"]).build();
                                    builder.addOption("COORDINATES", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["COO"]).build();
                                    builder.addOption("CPC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["CPR"]).build();
                                    builder.addOption("CQC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DAPPROXIMATIONS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DAP"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DEPENDENT", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["DEP"]).build();
                                    builder.addOption("DESIGN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["DES"]).build();
                                    builder.addOption("DETAIL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DET"]).build();
                                    builder.addOption("DREPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DRE"]).build();
                                    builder.addOption("HISTORY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["HIS"]).build();
                                    builder.addOption("IAPPROXIMATIONS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["IAP"]).build();
                                    builder.addOption("INDIVIDUAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["IND"]).build();
                                    builder.addOption("IREPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["IRE"]).build();
                                    builder.addOption("LEVERAGE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["LEV"]).build();
                                    builder.addOption("LILPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["LIL"]).build();
                                    builder.addOption("LIUPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["LIU"]).build();
                                    builder.addOption("LMLPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["LML"]).build();
                                    builder.addOption("LMUPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["LMU"]).build();
                                    builder.addOption("LPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).aliases(["LPR"]).build();
                                    builder.addOption("MACRO", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MAC"]).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["MAX"]).build();
                                    builder.addOption("MEANS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MEA"]).build();
                                    builder.addOption("MEC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["MET"]).choices(["CANALS", "CAN/CANALS", "MORALS", "MOR/MORALS", "REDUNDANCY", "RED/REDUNDANCY", "UNIVARIATE", "UNI/UNIVARIATE"]).build();
                                    builder.addOption("MONOTONE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["MON"]).build();
                                    builder.addOption("MPC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MQC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MRC", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MREDUNDANCY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MRE"]).build();
                                    builder.addOption("NCAN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["NCA"]).build();
                                    builder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOI"]).build();
                                    builder.addOption("NOMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOM"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOP"]).build();
                                    builder.addOption("NORESTOREMISSING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NORESTORE", "NOR"]).build();
                                    builder.addOption("NOSCORES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOS"]).build();
                                    builder.addOption("NOZEROCONSTANT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NOZERO", "NOZ"]).build();
                                    builder.addOption("NSR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["ORD"]).choices(["DATA", "DAT/DATA", "FREQ", "FRE/FREQ", "FORMATTED", "FOR/FORMATTED", "INTERNAL", "INT/INTERNAL"]).build();
                                    builder.addOption("OUTTEST", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PBOXCOXTABLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PBO"]).build();
                                    builder.addOption("PPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["ADPREFIX", "ADP", "PDPREFIX", "PDP"]).build();
                                    builder.addOption("PREDICTED", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PRE", "P"]).build();
                                    builder.addOption("RDPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["RDP"]).build();
                                    builder.addOption("REDUNDANCY", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["RED"]).choices(["STANDARDIZE", "STA/STANDARDIZE", "UNSTANDARDIZE", "UNS/UNSTANDARDIZE"]).build();
                                    builder.addOption("REFERENCE", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["REF"]).choices(["NONE", "NON/NONE", "MISSING", "MIS/MISSING", "ZERO", "ZER/ZERO"]).build();
                                    builder.addOption("REPLACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["REP"]).build();
                                    builder.addOption("RESIDUALS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RES", "R"]).build();
                                    builder.addOption("RPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["RPR"]).build();
                                    builder.addOption("RSQUARE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["RSQ"]).build();
                                    builder.addOption("SEPARATORS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["SEP"]).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SHO"]).build();
                                    builder.addOption("SINGULAR", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["SIN"]).build();
                                    builder.addOption("SOLVE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SOL", "DUMMY", "DUM"]).build();
                                    builder.addOption("SS2", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TDPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["TDP"]).build();
                                    builder.addOption("TEST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["TES"]).build();
                                    builder.addOption("TIPREFIX", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["TIP"]).build();
                                    builder.addOption("TSTANDARD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["TST"]).choices(["CENTER", "CEN/CENTER", "NOMISS", "NOM/NOMISS", "ORIGINAL", "ORI/ORIGINAL", "Z"]).build();
                                    builder.addOption("TSUFFIX", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["TSU"]).build();
                                    builder.addOption("TYPE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["TYP"]).build();
                                    builder.addOption("UNTIE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["UNI"]).build();
                                    builder.addOption("UTILITIES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["UTI"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TRANTAB");
                                    builder.addOption("NLS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TABLE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["TAB"]).build();
                                    statementBuilder = builder.addStatement("CLEAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INVERSE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LOAD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REPLACE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SAVE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SWAP", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TREE");
                                    builder.addOption("CFRAME", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DESCENDING", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["DES"]).build();
                                    builder.addOption("DESCRIPTION", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("DOCK", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("FILLCHAR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["FC"]).build();
                                    builder.addOption("GOUT", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).build();
                                    builder.addOption("GRAPHICS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("HAXIS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("HEIGHT", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).aliases(["H"]).choices(["HEIGHT", "H", "LENGTH", "L", "MODE", "M", "NCL", "N", "RSQ", "R"]).build();
                                    builder.addOption("HORDISPLAY", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["RIGHT"]).build();
                                    builder.addOption("HORIZONTAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["HOR"]).build();
                                    builder.addOption("INC", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("JC", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("JOINCHAR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LC", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LEAFCHAR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("LINEPRINTER", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LIST", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOGNODES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MAXH", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MAXHEIGHT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MINH", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MINHEIGHT", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NAME", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).build();
                                    builder.addOption("NCLUSTERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["NCL", "N"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NTICK", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTFILE", AbstractSasLanguageSupport_Lua.OptionType.FILEREF, false).build();
                                    builder.addOption("PAGES", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("POS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ROOT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SHOWCLUSTERS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["SC"]).build();
                                    builder.addOption("SORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SPACES", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["S"]).build();
                                    builder.addOption("TC", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("TREECHAR", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("VAXIS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("COPY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("NAME", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARENT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("TTEST");
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("BYVAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CI", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CL"]).build();
                                    builder.addOption("COCHRAN", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DIST", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["LOGNORMAL", "NORMAL"]).build();
                                    builder.addOption("H0", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("NOBYVAR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ORDER", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DATA", "FORMATTED", "FREQ", "INTERNAL", "MIXED"]).build();
                                    builder.addOption("SIDES", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["SIDED", "SIDE"]).build();
                                    builder.addOption("TEST", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DIFF", "RATIO"]).build();
                                    builder.addOption("TOST", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PAIRED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("UNIVARIATE");
                                    builder.addOption("ALL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ALPHA", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("CIBASIC", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("CIPCTLDF", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CIQUANTDF"]).build();
                                    builder.addOption("CIPCTLNORMAL", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["CIQUANTNORMAL"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EXCLNPWGTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["EXCLNPWGT"]).build();
                                    builder.addOption("FREQ", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("IDOUT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("LOCCOUNT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("MEMSIZE", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).build();
                                    builder.addOption("MODES", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MODE"]).build();
                                    builder.addOption("MU0", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["LOCATION"]).build();
                                    builder.addOption("NEXTROBS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NEXTRVAL", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("NOBYPLOT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NORMAL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["NORMALTEST"]).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTTABLE", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PCTLDEF", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["DEF"]).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["PLOT"]).build();
                                    builder.addOption("PLOTSIZE", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("ROBUSTSCALE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("ROUND", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST, false).build();
                                    builder.addOption("TRIMMED", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["TRIM"]).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT/WGT", "WGT"]).build();
                                    builder.addOption("WINSORIZED", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["WINSOR"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CDFPLOT", false, null);
                                    statementBuilder.aliases(["CDF"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("HISTOGRAM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PPPLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PROBPLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("QQPLOT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("UPLOAD");
                                    builder.addOption("AFTER", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("BINARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("DATECOPY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("EXTENDSN", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("INDEX", AbstractSasLanguageSupport_Lua.OptionType.YESNO, false).build();
                                    builder.addOption("INFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("INLIB", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["IN", "INDD"]).build();
                                    builder.addOption("MEMTYPE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).aliases(["MTYPE", "MT"]).build();
                                    builder.addOption("OUT", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTFILE", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("OUTLIB", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["OUTDD"]).build();
                                    builder.addOption("V6TRANSPORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VIEWTODATA", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder = builder.addStatement("EXCLUDE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SELECT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("VARCLUS");
                                    builder.addOption("CENTROID", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("CORR", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["C"]).build();
                                    builder.addOption("COVARIANCE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["COV"]).build();
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("HIERARCHY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["HI"]).build();
                                    builder.addOption("INITIAL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["GROUP", "INPUT", "RANDOM", "SEED"]).build();
                                    builder.addOption("MAXCLUSTERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MAXC"]).build();
                                    builder.addOption("MAXEIGEN", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MAXSEARCH", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("MINCLUSTERS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).aliases(["MINC"]).build();
                                    builder.addOption("MULTIPLEGROUP", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["MG"]).build();
                                    builder.addOption("NOINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("OUTPLOTDATA", AbstractSasLanguageSupport_Lua.OptionType.LIBRARY_NAME, false).build();
                                    builder.addOption("OUTSTAT", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("OUTTREE", AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET, false).build();
                                    builder.addOption("PLOTS", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("PROPORTION", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).aliases(["PERCENT"]).build();
                                    builder.addOption("RANDOM", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("SHORT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SIMPLE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).aliases(["S"]).build();
                                    builder.addOption("SUMMARY", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("TRACE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("VARDEF", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["DF", "N", "WDF", "WEIGHT", "WGT"]).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FREQ", false, null);
                                    statementBuilder.aliases(["FREQUENCY"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("PARTIAL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SEED", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WEIGHT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    this.createProcInformation3();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createProcInformation3 = function () {
                                    var builder;
                                    var statementBuilder;
                                    builder = this.newProcInfoBuilder("VARCOMP");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("EPSILON", AbstractSasLanguageSupport_Lua.OptionType.NUMERIC, false).build();
                                    builder.addOption("MAXITER", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("METHOD", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["TYPE1", "MIVQUE0", "ML", "REML"]).build();
                                    builder.addOption("SEED", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("CLASS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("MODEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("X12");
                                    builder.addOption("DATA", AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET, false).build();
                                    builder.addOption("DATE", AbstractSasLanguageSupport_Lua.OptionType.NAME, false).aliases(["DATEVAR"]).build();
                                    builder.addOption("INTERVAL", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["MONTH", "QTR", "QUARTER"]).build();
                                    builder.addOption("NOPRINT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("NOTRIMMISS", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("PERIODOGRAM", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    builder.addOption("SEASONS", AbstractSasLanguageSupport_Lua.OptionType.INT32, false).build();
                                    builder.addOption("SPAN", AbstractSasLanguageSupport_Lua.OptionType.GENERIC, false).build();
                                    builder.addOption("SPECTRUMSERIES", AbstractSasLanguageSupport_Lua.OptionType.CHOICE, false).choices(["A1", "A19", "B1", "E1"]).build();
                                    builder.addOption("START", AbstractSasLanguageSupport_Lua.OptionType.STRING, false).aliases(["STARTDATE"]).build();
                                    statementBuilder = builder.addStatement("ADJUST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ARIMA", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ATTRIB", false, null);
                                    statementBuilder.addOption("FORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("INFORMAT", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LABEL", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("LENGTH", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("TRANSCODE", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_ALL_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_CHARACTER_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.addOption("_NUMERIC_", AbstractSasLanguageSupport_Lua.OptionType.KEYWORD, false).build();
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("BY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ESTIMATE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORECAST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("FORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ID", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("IDENTIFY", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("INFORMAT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LABEL", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("OUTPUT", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("REGRESSION", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TABLES", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("TRANSFORM", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("VAR", false, null);
                                    statementBuilder.aliases(["VARIABLE", "VARIABLES"]);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("WHERE", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("X11", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                    builder = this.newProcInfoBuilder("XREGISTRY");
                                    builder.addOption("REGISTRY", AbstractSasLanguageSupport_Lua.OptionType.CATALOG_NAME, false).aliases(["REG", "R"]).build();
                                    statementBuilder = builder.addStatement("ADD", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("ALIAS", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("LIST", false, null);
                                    statementBuilder.build();
                                    statementBuilder = builder.addStatement("SETLOCALE", false, null);
                                    statementBuilder.build();
                                    builder.build();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createSystemOptions = function () {
                                    this.addSystemOption("__DUMMYLOCATIONS", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NO__DUMMYLOCATIONS", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("__DUMMYTIMER", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NO__DUMMYTIMER", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("__SETDATE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("_LAST_", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ALTLOG", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("AUTOEXEC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("AUTOSIGNON", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOAUTOSIGNON", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("BASEENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("BATCHWPDLOCKING", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOBATCHWPDLOCKING", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("BLKALLOC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOBLKALLOC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("BLKSIZE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("BLKSIZE(3375)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BLKSIZE(3380)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BLKSIZE(3390)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BLKSIZE(9345)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BLKSIZE(DISK)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BLKSIZE(DASD)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BLKSIZE(OTHER)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BLKSIZE);
                                    this.addSystemOption("BOMFILE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOBOMFILE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("BOTTOMMARGIN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("BUFNO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("BUFSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("BUFSIZECMULT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("BUFSIZEUMULT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("BYERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOBYERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("BYLINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOBYLINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CAPS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCAPS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CAPSOUT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCAPSOUT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CARDIMAGE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCARDIMAGE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CENTER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCENTER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CENTRE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCENTRE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CHARCODE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCHARCODE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CHARTRANUNMAPPABLE", false, null, ["STOP", "SUBSTITUTE", "SUBST", "SKIP", "ESCAPE", "ESC"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("CLEANUP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCLEANUP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("COMAMID", false, null, ["TCP"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("COMPRESS", false, null, ["YES", "Y", "ON", "NO", "N", "CHAR", "BINARY"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("CONFIG", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("CONFIGFONT", false, [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.zos, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCONFIGFONT", false, [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.zos, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CONNECTPERSIST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCONNECTPERSIST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CPERSIST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCPERSIST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CONNECTREMOTE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("CREMOTE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PROCESS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("REMOTE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("CONNECTTIMEOUT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("CONNECTWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCONNECTWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CONSIDERXLSXCOLWIDTHS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCONSIDERXLSXCOLWIDTHS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CPORTVER", false, null, ["SAS82", "SAS91", "SAS92", "SAS93"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("CPUCOUNT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("DATASTMTCHK", false, null, ["NONE", "COREKEYWORDS", "ALLKEYWORDS"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DATE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODATE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DATESTYLE", false, null, ["DMY", "DYM", "MDY", "MYD", "YDM", "YMD", "LOCALE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DB2IN", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("DB2READBUFF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("DB2SSID", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("DBIDIRECTEXEC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODBIDIRECTEXEC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DBSLICEPARM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("DDEXLANG", false, null, ["AFRIKAANS", "CATALAN", "CROATIAN", "CZECH", "DANISH", "DUTCH", "ENGLISH", "FINNISH", "FRENCH", "GERMAN", "HUNGARIAN", "ITALIAN", "MACEDONIAN", "NORWEGIAN", "POLISH", "PORTUGUESE", "RUSSIAN", "SPANISH", "SLOVENIAN", "SWEDISH", "SWISS_FRENCH", "SWISS_GERMAN", "LOCALE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DEBUG", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("DELNOREPL", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODELNOREPL", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DETAILS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODETAILS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DEVICE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("DEV", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("DFLANG", false, null, ["AFRIKAANS", "CATALAN", "CROATIAN", "CZECH", "DANISH", "DUTCH", "ENGLISH", "FINNISH", "FRENCH", "GERMAN", "HUNGARIAN", "ITALIAN", "MACEDONIAN", "NORWEGIAN", "POLISH", "PORTUGUESE", "RUSSIAN", "SPANISH", "SLOVENIAN", "SWEDISH", "SWISS_FRENCH", "SWISS_GERMAN", "LOCALE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DIRECTIO", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODIRECTIO", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DKRICOND", false, null, ["ERROR", "WARN", "WARNING", "NOWARN", "NOWARNING"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DKROCOND", false, null, ["ERROR", "WARN", "WARNING", "NOWARN", "NOWARNING"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DLCREATEDIR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODLCREATEDIR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DLDSNTYPE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], ["BASIC", "LARGE", "NONE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("DLEXCPCOUNT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODLEXCPCOUNT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DMR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODMR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DMS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODMS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DQUOTE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODQUOTE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DSNFERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODSNFERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DTRESET", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODTRESET", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DYNALLOC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODYNALLOC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("DYNAMICNOBS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NODYNAMICNOBS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("EBCDICFMTINFMTBEHAVIOUR", false, null, ["DEFAULT", "USELOCALE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("EBCDICFMTINFMTBEHAVIOR", false, null, ["DEFAULT", "USELOCALE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ECHOAUTO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOECHOAUTO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("EMAILAUTHDOMAIN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("EMAILAUTHPROTOCOL", false, null, ["NONE", "LOGIN"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("EMAILHOST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("EMAILID", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("EMAILMASQUERADEHOST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("EMAILPORT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("EMAILPW", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("EMAILSTARTTLS", false, null, ["AUTO", "IGNORE", "REQUIRE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("EMAILSYS", false, null, ["SMTP", "MAPI", "CSSMTP"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ENCODING", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ENCRYPT", false, null, ["NO", "AES"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ENCRYPTKEY", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ERRORABEND", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOERRORABEND", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ERRABEND", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOERRABEND", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ERRORCHECK", false, null, ["NORMAL", "STRICT"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ERRCHECK", false, null, ["NORMAL", "STRICT"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ERRORS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("ERROR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("EXPERIMENTAL", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOEXPERIMENTAL", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FILEBLKSIZE(3375)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(3380)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(3390)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(3400)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(3480)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(3490E)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(3590)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(9345)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(DISK)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FILEBLKSIZE(DASD)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FILEBLKSIZE(OTHER)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(SYSOUT)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILEBLKSIZE(TAPE)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FILEBLKSIZE(TERM)", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILECC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFILECC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FILEDEV", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FILEMSGS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFILEMSGS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FILESPPRI", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILESPSEC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("FILESTAT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFILESTAT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FILESYSOUT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FILESYSTEM", true, null, ["MVS", "HFS"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("FILEUNIT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FILSZ", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFILSZ", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FIRSTOBS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT64);
                                    this.addSystemOption("FMTERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFMTERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FMTSEARCH", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FONTCACHEDIR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FONTPATH", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FORMCHAR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FORMDLIM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("FULLSTATS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFULLSTATS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("FULLSTIMER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOFULLSTIMER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("HELLO", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOHELLO", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("HUB_AUTOLIBS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOHUB_AUTOLIBS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("HUB_PORT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("HUB_PROTOCOL", false, null, ["HTTP", "HTTPS"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("HUB_PWD", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("HUB_SERVER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("HUB_TOKEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("HUB_USER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("IBUFNO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("IBUFSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("IMPLMAC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOIMPLMAC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("IMSDLDBR", false, [AbstractSasLanguageSupport_Lua.Platform.zos], ["Y", "N", "*"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("INITSTMT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("IS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("INVALIDDATA", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPCAPS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPCAPS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPCHARF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPCHARF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPCSR", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPEXECV", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPMISS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPMSG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPNOTES", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPNOTES", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPNUMF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPNUMF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPNZTRC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPNZTRC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPPT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPPT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPTRACE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPTRACE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPVDEFA", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPVDEFA", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPVDLT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPVDLT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPVDTRC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPVDTRC", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPVIMSG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPVRMSG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPVTMSG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPVTNAM", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPVTPNL", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("ISPVTRAP", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOISPVTRAP", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ISPVTVARS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("JREOPTIONS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LABEL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLABEL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEFTMARGIN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LEGACYDB2ENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLEGACYDB2ENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEGACYNETEZZAENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLEGACYNETEZZAENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEGACYODBCENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLEGACYODBCENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEGACYORACLEENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLEGACYORACLEENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEGACYSQLSERVERENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLEGACYSQLSERVERENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEGACYSQLSERVRENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOlegacysqlservrengine", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LEGACYSQLSVRENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOlegacysqlsvrengine", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LINESIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("LS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("LINKINITSTMT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LINKTERMSTMT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LISTINGFILERECFM", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LOCALE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LOG", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LOGPAGE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLOGPAGE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LOGPARM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("LOGTITLE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOLOGTITLE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("LRECL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("MACRO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMACRO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MACROGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMACROGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MAPS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("MAUTOLOCDISPLAY", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMAUTOLOCDISPLAY", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MAUTOSOURCE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMAUTOSOURCE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MCOMPILE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMCOMPILE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MCOMPILENOTE", false, null, ["NONE", "NOAUTOCALL", "ALL"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("MEMRPT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMEMRPT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MEMSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT64);
                                    this.addSystemOption("MERGENOBY", false, null, ["WARN", "ERROR", "NOWARN"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("MERROR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMERROR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MINDELIMITER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("MINOPERATOR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMINOPERATOR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MINSTG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMINSTG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MISSING", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("MLOGIC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMLOGIC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MTRACE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMTRACE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MLOGICNEST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMLOGICNEST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MPRINT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMPRINT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MPRINTNEST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMPRINTNEST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MRECALL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMRECALL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MSGCASE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMSGCASE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MSGLEVEL", false, null, ["N", "I"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("MSTORED", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOMSTORED", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("MSYMTABMAX", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("MVARSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("NEWLINETRIMS", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONEWLINETRIMS", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NEWS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("NLSCOMPATMODE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONLSCOMPATMODE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOAUTOEXEC", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONOAUTOEXEC", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOIPASSTHRU", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONOIPASSTHRU", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONEWS", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONONEWS", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOTES", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONOTES", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NUMBER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NONUMBER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("OBS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT64);
                                    this.addSystemOption("ODSDEST", false, null, ["LISTING", "AUTO", "NONE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ODSHTMLDEST", false, null, ["OLDHTML", "HTMLCSS"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("ODSLISTINGDEST", false, null, ["NEWLISTING", "OLDLISTING"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("OLDMAC", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOOLDMAC", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("OLDSASGRAPH", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOOLDSASGRAPH", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("OPLIST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOOPLIST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("ORACLEKEEPALIVEINTERVAL", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("ORIENTATION", false, null, ["PORTRAIT", "LANDSCAPE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("OVP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOOVP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("PAGENO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("PAGESIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("PS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("PAPERSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PARM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PARMCARDS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PATH", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PREFERLEGACYTABLETEMPLATES", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PRINT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PROCTRANSPOSENAMECOMPATMODE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOPROCTRANSPOSENAMECOMPATMODE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("PRXENCODINGAWARE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOPRXENCODINGAWARE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("PYTHONHOME", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("PYTHONKEEP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOPYTHONKEEP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("QUOTELENMAX", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOQUOTELENMAX", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("REPLACE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOREPLACE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("REPORTSTEPMEMORYUSAGE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOREPORTSTEPMEMORYUSAGE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("RIGHTMARGIN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("RKEEP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NORKEEP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("S", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("S2", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("S99NOMIG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOS99NOMIG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SAHF", true, [AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSAHF", true, [AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SASAUTOS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASCMD", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASHELP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASINITIALFOLDER", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASMSTORE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASSCRIPT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASTRACE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASTRACELOC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASUSER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SASVARDEF", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSASVARDEF", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SCANDEFAULTMODIFERS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SCLEDITOR", true, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.win_x64, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SEQ", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("SEQENGINE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SEQNUMFEACH", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSEQNUMFEACH", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SERROR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSERROR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SET", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SHIFTJISHALFWIDTHYEN", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SIGNONWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSIGNONWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CONNECTSWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCONNECTSWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSWAIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTBLKMODE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTBLKMODE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTCHECK", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTCHECK", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTCONFIG", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTCUTP", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("SORTDEV", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTDEVWARN", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTDEVWARN", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTDUP", false, null, ["PHYSICAL", "LOGICAL"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("SORTEQOP", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTEQOP", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTEQUALS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTEQUALS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTLIST", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTLIST", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTLOCALE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTLOCALE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTMAXKEY", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("SORTMAXOFF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("SORTMMAP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTMMAP", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTMSG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTMSG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTNAME", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTOPTS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTOPTS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTPARM", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTPGM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTSEQ", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SORTSTATS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTSTATS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTSUMF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTSUMF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTVALIDATE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSORTVALIDATE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SORTWKNO", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("SORTWORK", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SOURCE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSOURCE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SOURCE2", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSOURCE2", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SPOOL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSPOOL", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SQLCONSTDATETIME", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSQLCONSTDATETIME", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SQLGENERATION", false, null, ["NONE", "DBMS"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("SQLREMERGE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSQLREMERGE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SSH_HOSTVALIDATION", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SSH_IDENTITYFILE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("STDIO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSTDIO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("STIMEFMT", false, null, ["HOURS", "MINUTES", "SECONDS", "NORMAL", "H", "Z", "M", "S", "N"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("STIMER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSTIMER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SUMBUFNO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("SUMSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SYMBOLGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSYMBOLGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSGEN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SYNCIO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSYNCIO", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SYSIN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SYSMVSJOB", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSYSMVSJOB", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SYSPARM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SYSPREF", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("SYSRPUTSYNC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSYSRPUTSYNC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("CSYSRPUTSYNC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOCSYSRPUTSYNC", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("SYSTEMLOCALEENCODING", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOSYSTEMLOCALEENCODING", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("TABSIZE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("TAPECLOSE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], ["REREAD", "LEAVE", "REWIND", "DISP", "FREE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("TAPEENGINE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("TBUFSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("TCPPORTFIRST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("TCPPORTLAST", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("TERMSTMT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("THREADS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOTHREADS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("TLS_CACERTS", false, [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("TLS_HOSTVALIDATION", false, null, ["SYSTEM", "NONE"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("TOPMARGIN", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("TRANSACTEDFILELOCKINGBLOCKS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOTRANSACTEDFILELOCKINGBLOCKS", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("TRANSACTEDFILEQUENCHDELAY", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("TRANTAB", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("UNLIKEPDSCONCAT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOUNLIKEPDSCONCAT", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("URLENCODING", false, null, ["SESSION", "UTF8"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("USER", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("USSWPSHOME", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("VALIDVARNAME", false, null, ["V6", "UPCASE", "V7", "ANY"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("VARLENCHK", false, null, ["NOWARN", "ERROR", "WARN"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("VBUFSIZE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT64);
                                    this.addSystemOption("VERBOSE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVERBOSE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VNFERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVNFERR", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VSAMLEENGINE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVSAMLEENGINE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VSAMLOAD", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVSAMLOAD", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VSAMREAD", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVSAMREAD", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VSAMRLS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVSAMRLS", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VSAMRLSREAD", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVSAMRLSREAD", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("VSAMUPDATE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOVSAMUPDATE", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WORK", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("WORKINIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWORKINIT", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WORKPERMS", false, [AbstractSasLanguageSupport_Lua.Platform.linux_x86, AbstractSasLanguageSupport_Lua.Platform.solaris_x86, AbstractSasLanguageSupport_Lua.Platform.linux_s390, AbstractSasLanguageSupport_Lua.Platform.mac_x64, AbstractSasLanguageSupport_Lua.Platform.linux_x64, AbstractSasLanguageSupport_Lua.Platform.solaris_x64, AbstractSasLanguageSupport_Lua.Platform.linux_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_powerpcle, AbstractSasLanguageSupport_Lua.Platform.solaris_sparc, AbstractSasLanguageSupport_Lua.Platform.aix_powerpc, AbstractSasLanguageSupport_Lua.Platform.linux_s390x, AbstractSasLanguageSupport_Lua.Platform.zos, AbstractSasLanguageSupport_Lua.Platform.linux_aarch64], null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("WORKTERM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWORKTERM", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WPDDASDLIBNAMEINFO", false, [AbstractSasLanguageSupport_Lua.Platform.zos], ["SIMPLE", "EXTENDED"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("WPDHUGE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWPDHUGE", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WPSCOMCOMPRESS", false, null, ["NONE", "RDC", "RLE", "ZLIB1", "ZLIB2", "ZLIB3", "ZLIB4", "ZLIB5", "ZLIB6", "ZLIB7", "ZLIB8", "ZLIB9", "YES", "CHAR", "ZLIB"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("WPSCOMENCRYPT", false, null, ["NONE", "AES", "AES256"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("WPSCOMENCRYPTKEY", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("WPSCOMPROTOCOL", false, null, ["WPS", "SAS"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("WPSDEVEL", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("WPSDSCOMP", true, null, ["NEW", "OLD", "NO"], AbstractSasLanguageSupport_Lua.OptionType.CHOICE);
                                    this.addSystemOption("WPSDSCOMPARCH", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("WPSDSCOMPDEBUG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWPSDSCOMPDEBUG", false, [AbstractSasLanguageSupport_Lua.Platform.zos], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WPSSCATTERCOMP", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWPSSCATTERCOMP", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WPSSCATTERLIMIT1", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("WPSSCATTERLIMIT2", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                    this.addSystemOption("WPSTAGSETCOMP", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWPSTAGSETCOMP", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("WPSTRACE", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.STRING);
                                    this.addSystemOption("WPSWHERECOMP", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOWPSWHERECOMP", true, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("XCMD", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOXCMD", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("XMIN", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOXMIN", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("XSYNC", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOXSYNC", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("XWAIT", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("NOXWAIT", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64], null, AbstractSasLanguageSupport_Lua.OptionType.BOOL);
                                    this.addSystemOption("YEARCUTOFF", false, null, null, AbstractSasLanguageSupport_Lua.OptionType.INT32);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createDatasetOptions = function () {
                                    this.addDatasetOption("BUFSIZE", false, null);
                                    this.addDatasetOption("COMPRESS", false, null);
                                    this.addDatasetOption("DROP", false, null);
                                    this.addDatasetOption("ENCODING", false, null);
                                    this.addDatasetOption("ENCRYPT", false, null);
                                    this.addDatasetOption("ENCRYPTKEY", false, null);
                                    this.addDatasetOption("FIRSTOBS", false, null);
                                    this.addDatasetOption("INDEX", false, null);
                                    this.addDatasetOption("KEEP", false, null);
                                    this.addDatasetOption("LABEL", false, null);
                                    this.addDatasetOption("OBS", false, null);
                                    this.addDatasetOption("OUTREP", false, null);
                                    this.addDatasetOption("POINTOBS", false, null);
                                    this.addDatasetOption("RENAME", false, null);
                                    this.addDatasetOption("REPLACE", false, null);
                                    this.addDatasetOption("SORTEDBY", false, null);
                                    this.addDatasetOption("TYPE", false, null);
                                    this.addDatasetOption("WHERE", false, null);
                                    this.addDatasetOption("BULKLOAD", false, "db2");
                                    this.addDatasetOption("CURSOR_TYPE", false, "db2");
                                    this.addDatasetOption("DBCOMMIT", false, "db2");
                                    this.addDatasetOption("DBCREATE_TABLE_OPTS", false, "db2");
                                    this.addDatasetOption("DBGEN_NAME", false, "db2");
                                    this.addDatasetOption("DBINDEX", false, "db2");
                                    this.addDatasetOption("DBKEY", false, "db2");
                                    this.addDatasetOption("DBMAX_TEXT", false, "db2");
                                    this.addDatasetOption("DBNULL", false, "db2");
                                    this.addDatasetOption("DBNULLKEYS", false, "db2");
                                    this.addDatasetOption("DBSASLABEL", false, "db2");
                                    this.addDatasetOption("DBSLICE", false, "db2");
                                    this.addDatasetOption("DBSLICEPARM", false, "db2");
                                    this.addDatasetOption("DBTYPE", false, "db2");
                                    this.addDatasetOption("DEGREE", false, "db2");
                                    this.addDatasetOption("IGNORE_READ_ONLY_COLUMNS", false, "db2");
                                    this.addDatasetOption("IN", false, "db2");
                                    this.addDatasetOption("INSERTBUFF", false, "db2");
                                    this.addDatasetOption("LOCATION", false, "db2");
                                    this.addDatasetOption("PRESERVE_COL_NAMES", false, "db2");
                                    this.addDatasetOption("QUERY_TIMEOUT", false, "db2");
                                    this.addDatasetOption("READ_ISOLATION_LEVEL", false, "db2");
                                    this.addDatasetOption("READ_LOCK_TYPE", false, "db2");
                                    this.addDatasetOption("READBUFF", false, "db2");
                                    this.addDatasetOption("SCHEMA", false, "db2");
                                    this.addDatasetOption("UPDATE_ISOLATION_LEVEL", false, "db2");
                                    this.addDatasetOption("UPDATE_LOCK_TYPE", false, "db2");
                                    this.addDatasetOption("BL_BUFFERSIZE", false, "netezza");
                                    this.addDatasetOption("BL_DATAFILE", false, "netezza");
                                    this.addDatasetOption("BL_DELETE_DATAFILE", false, "netezza");
                                    this.addDatasetOption("BL_DELIMITER", false, "netezza");
                                    this.addDatasetOption("BL_OPTIONS", false, "netezza");
                                    this.addDatasetOption("BL_PIPE_NAME", false, "netezza");
                                    this.addDatasetOption("BL_USE_PIPE", false, "netezza");
                                    this.addDatasetOption("BULKLOAD", false, "netezza");
                                    this.addDatasetOption("BULKUNLOAD", false, "netezza");
                                    this.addDatasetOption("DBCOMMIT", false, "netezza");
                                    this.addDatasetOption("DBCREATE_TABLE_OPTS", false, "netezza");
                                    this.addDatasetOption("DBGEN_NAME", false, "netezza");
                                    this.addDatasetOption("DBINDEX", false, "netezza");
                                    this.addDatasetOption("DBMAX_TEXT", false, "netezza");
                                    this.addDatasetOption("DBNULL", false, "netezza");
                                    this.addDatasetOption("DBNULLKEYS", false, "netezza");
                                    this.addDatasetOption("DBSASLABEL", false, "netezza");
                                    this.addDatasetOption("DBTYPE", false, "netezza");
                                    this.addDatasetOption("IGNORE_READ_ONLY_COLUMNS", false, "netezza");
                                    this.addDatasetOption("INSERTBUFF", false, "netezza");
                                    this.addDatasetOption("PRESERVE_COL_NAMES", false, "netezza");
                                    this.addDatasetOption("QUERY_TIMEOUT", false, "netezza");
                                    this.addDatasetOption("READBUFF", false, "netezza");
                                    this.addDatasetOption("SCHEMA", false, "netezza");
                                    this.addDatasetOption("DBCOMMIT", false, "odbc");
                                    this.addDatasetOption("DBCREATE_TABLE_OPTS", false, "odbc");
                                    this.addDatasetOption("DBGEN_NAME", false, "odbc");
                                    this.addDatasetOption("DBINDEX", false, "odbc");
                                    this.addDatasetOption("DBKEY", false, "odbc");
                                    this.addDatasetOption("DBMAX_TEXT", false, "odbc");
                                    this.addDatasetOption("DBNULL", false, "odbc");
                                    this.addDatasetOption("DBNULLKEYS", false, "odbc");
                                    this.addDatasetOption("DBSASLABEL", false, "odbc");
                                    this.addDatasetOption("DBSLICE", false, "odbc");
                                    this.addDatasetOption("DBSLICEPARM", false, "odbc");
                                    this.addDatasetOption("DBTYPE", false, "odbc");
                                    this.addDatasetOption("IGNORE_READ_ONLY_COLUMNS", false, "odbc");
                                    this.addDatasetOption("INSERTBUFF", false, "odbc");
                                    this.addDatasetOption("PRESERVE_COL_NAMES", false, "odbc");
                                    this.addDatasetOption("READ_ISOLATION_LEVEL", false, "odbc");
                                    this.addDatasetOption("READ_LOCK_TYPE", false, "odbc");
                                    this.addDatasetOption("READBUFF", false, "odbc");
                                    this.addDatasetOption("UPDATE_ISOLATION_LEVEL", false, "odbc");
                                    this.addDatasetOption("UPDATE_LOCK_TYPE", false, "odbc");
                                    this.addDatasetOption("DBCOMMIT", false, "odbcold");
                                    this.addDatasetOption("DBMAX_TEXT", false, "odbcold");
                                    this.addDatasetOption("DBNULL", false, "odbcold");
                                    this.addDatasetOption("DBTYPE", false, "odbcold");
                                    this.addDatasetOption("IGNORE_READ_ONLY_COLUMNS", false, "odbcold");
                                    this.addDatasetOption("INSERT_SQL", false, "odbcold");
                                    this.addDatasetOption("INSERTBUFF", false, "odbcold");
                                    this.addDatasetOption("READ_ISOLATION_LEVEL", false, "odbcold");
                                    this.addDatasetOption("READ_LOCK_TYPE", false, "odbcold");
                                    this.addDatasetOption("READBUFF", false, "odbcold");
                                    this.addDatasetOption("UPDATE_ISOLATION_LEVEL", false, "odbcold");
                                    this.addDatasetOption("UPDATE_LOCK_TYPE", false, "odbcold");
                                    this.addDatasetOption("BL_BADFILE", false, "oracle");
                                    this.addDatasetOption("BL_CONTROL", false, "oracle");
                                    this.addDatasetOption("BL_DATAFILE", false, "oracle");
                                    this.addDatasetOption("BL_DEFAULT_DIR", false, "oracle");
                                    this.addDatasetOption("BL_DELETE_DATAFILE", false, "oracle");
                                    this.addDatasetOption("BL_DELETE_ONLY_DATAFILE", false, "oracle");
                                    this.addDatasetOption("BL_DIRECT_PATH", false, "oracle");
                                    this.addDatasetOption("BL_DISCARDFILE", false, "oracle");
                                    this.addDatasetOption("BL_INDEX_OPTIONS", false, "oracle");
                                    this.addDatasetOption("BL_LOAD_METHOD", false, "oracle");
                                    this.addDatasetOption("BL_LOG", false, "oracle");
                                    this.addDatasetOption("BL_OPTIONS", false, "oracle");
                                    this.addDatasetOption("BL_PARFILE", false, "oracle");
                                    this.addDatasetOption("BL_PRESERVE_BLANKS", false, "oracle");
                                    this.addDatasetOption("BL_RECOVERABLE", false, "oracle");
                                    this.addDatasetOption("BL_RETURN_WARNINGS_AS_ERRORS", false, "oracle");
                                    this.addDatasetOption("BL_SQLLDR_PATH", false, "oracle");
                                    this.addDatasetOption("BL_SUPPRESS_NULLIF", false, "oracle");
                                    this.addDatasetOption("BL_USE_SQLLDR", false, "oracle");
                                    this.addDatasetOption("BULKLOAD", false, "oracle");
                                    this.addDatasetOption("DBCOMMIT", false, "oracle");
                                    this.addDatasetOption("DBCREATE_TABLE_OPTS", false, "oracle");
                                    this.addDatasetOption("DBINDEX", false, "oracle");
                                    this.addDatasetOption("DBKEY", false, "oracle");
                                    this.addDatasetOption("DBNULL", false, "oracle");
                                    this.addDatasetOption("DBNULLKEYS", false, "oracle");
                                    this.addDatasetOption("DBSLICE", false, "oracle");
                                    this.addDatasetOption("DBSLICEPARM", false, "oracle");
                                    this.addDatasetOption("DBTYPE", false, "oracle");
                                    this.addDatasetOption("INSERTBUFF", false, "oracle");
                                    this.addDatasetOption("PRESERVE_COL_NAMES", false, "oracle");
                                    this.addDatasetOption("PRESERVE_NAMES", false, "oracle");
                                    this.addDatasetOption("PRESERVE_TAB_NAMES", false, "oracle");
                                    this.addDatasetOption("READ_LOCK_TYPE", false, "oracle");
                                    this.addDatasetOption("READBUFF", false, "oracle");
                                    this.addDatasetOption("SCHEMA", false, "oracle");
                                    this.addDatasetOption("UPDATE_LOCK_TYPE", false, "oracle");
                                    this.addDatasetOption("BL_BADFILE", false, "oracleold");
                                    this.addDatasetOption("BL_CONTROL", false, "oracleold");
                                    this.addDatasetOption("BL_DATAFILE", false, "oracleold");
                                    this.addDatasetOption("BL_DEFAULT_DIR", false, "oracleold");
                                    this.addDatasetOption("BL_DELETE_DATAFILE", false, "oracleold");
                                    this.addDatasetOption("BL_DELETE_ONLY_DATAFILE", false, "oracleold");
                                    this.addDatasetOption("BL_DIRECT_PATH", false, "oracleold");
                                    this.addDatasetOption("BL_DISCARDFILE", false, "oracleold");
                                    this.addDatasetOption("BL_INDEX_OPTIONS", false, "oracleold");
                                    this.addDatasetOption("BL_LOAD_METHOD", false, "oracleold");
                                    this.addDatasetOption("BL_LOG", false, "oracleold");
                                    this.addDatasetOption("BL_OPTIONS", false, "oracleold");
                                    this.addDatasetOption("BL_PARFILE", false, "oracleold");
                                    this.addDatasetOption("BL_PRESERVE_BLANKS", false, "oracleold");
                                    this.addDatasetOption("BL_RECOVERABLE", false, "oracleold");
                                    this.addDatasetOption("BL_RETURN_WARNINGS_AS_ERRORS", false, "oracleold");
                                    this.addDatasetOption("BL_SQLLDR_PATH", false, "oracleold");
                                    this.addDatasetOption("BL_SUPPRESS_NULLIF", false, "oracleold");
                                    this.addDatasetOption("BL_USE_SQLLDR", false, "oracleold");
                                    this.addDatasetOption("BULKLOAD", false, "oracleold");
                                    this.addDatasetOption("DBCREATE_TABLE_OPTS", false, "oracleold");
                                    this.addDatasetOption("DBNULL", false, "oracleold");
                                    this.addDatasetOption("SCHEMA", false, "oracleold");
                                    this.addDatasetOption("BL_BCPEXE", false, "sqlserver");
                                    this.addDatasetOption("BL_BCPEXE_PATH", false, "sqlserver");
                                    this.addDatasetOption("BL_DATAFILE", false, "sqlserver");
                                    this.addDatasetOption("BL_DELETE_ONLY_DATAFILE", false, "sqlserver");
                                    this.addDatasetOption("BL_LOG", false, "sqlserver");
                                    this.addDatasetOption("BL_OPTIONS", false, "sqlserver");
                                    this.addDatasetOption("BULKLOAD", false, "sqlserver");
                                    this.addDatasetOption("BULKUNLOAD", false, "sqlserver");
                                    this.addDatasetOption("DBCOMMIT", false, "sqlserver");
                                    this.addDatasetOption("DBCREATE_TABLE_OPTS", false, "sqlserver");
                                    this.addDatasetOption("DBGEN_NAME", false, "sqlserver");
                                    this.addDatasetOption("DBINDEX", false, "sqlserver");
                                    this.addDatasetOption("DBMAX_TEXT", false, "sqlserver");
                                    this.addDatasetOption("DBNULL", false, "sqlserver");
                                    this.addDatasetOption("DBNULLKEYS", false, "sqlserver");
                                    this.addDatasetOption("DBSASLABEL", false, "sqlserver");
                                    this.addDatasetOption("DBSLICE", false, "sqlserver");
                                    this.addDatasetOption("DBSLICEPARM", false, "sqlserver");
                                    this.addDatasetOption("DBTYPE", false, "sqlserver");
                                    this.addDatasetOption("IGNORE_READ_ONLY_COLUMNS", false, "sqlserver");
                                    this.addDatasetOption("INSERT_SQL", false, "sqlserver");
                                    this.addDatasetOption("INSERTBUFF", false, "sqlserver");
                                    this.addDatasetOption("PRESERVE_COL_NAMES", false, "sqlserver");
                                    this.addDatasetOption("QUERY_TIMEOUT", false, "sqlserver");
                                    this.addDatasetOption("READ_ISOLATION_LEVEL", false, "sqlserver");
                                    this.addDatasetOption("READ_LOCK_TYPE", false, "sqlserver");
                                    this.addDatasetOption("READBUFF", false, "sqlserver");
                                    this.addDatasetOption("SCHEMA", false, "sqlserver");
                                    this.addDatasetOption("UPDATE_ISOLATION_LEVEL", false, "sqlserver");
                                    this.addDatasetOption("UPDATE_LOCK_TYPE", false, "sqlserver");
                                    this.addDatasetOption("BL_BCPEXE", false, "sqlserverold");
                                    this.addDatasetOption("BL_BCPEXE_PATH", false, "sqlserverold");
                                    this.addDatasetOption("BL_DATAFILE", false, "sqlserverold");
                                    this.addDatasetOption("BL_DELETE_ONLY_DATAFILE", false, "sqlserverold");
                                    this.addDatasetOption("BL_LOG", false, "sqlserverold");
                                    this.addDatasetOption("BL_OPTIONS", false, "sqlserverold");
                                    this.addDatasetOption("BULKLOAD", false, "sqlserverold");
                                    this.addDatasetOption("BULKUNLOAD", false, "sqlserverold");
                                    this.addDatasetOption("DBCOMMIT", false, "sqlserverold");
                                    this.addDatasetOption("DBMAX_TEXT", false, "sqlserverold");
                                    this.addDatasetOption("DBNULL", false, "sqlserverold");
                                    this.addDatasetOption("DBTYPE", false, "sqlserverold");
                                    this.addDatasetOption("IGNORE_READ_ONLY_COLUMNS", false, "sqlserverold");
                                    this.addDatasetOption("INSERT_SQL", false, "sqlserverold");
                                    this.addDatasetOption("INSERTBUFF", false, "sqlserverold");
                                    this.addDatasetOption("READ_ISOLATION_LEVEL", false, "sqlserverold");
                                    this.addDatasetOption("READ_LOCK_TYPE", false, "sqlserverold");
                                    this.addDatasetOption("READBUFF", false, "sqlserverold");
                                    this.addDatasetOption("UPDATE_ISOLATION_LEVEL", false, "sqlserverold");
                                    this.addDatasetOption("UPDATE_LOCK_TYPE", false, "sqlserverold");
                                    this.addDatasetOption("DBMAX_TEXT", false, "sybase");
                                    this.addDatasetOption("BL_CLIENT_DATAFILE", false, "sybaseiq");
                                    this.addDatasetOption("BL_DATAFILE", false, "sybaseiq");
                                    this.addDatasetOption("BL_DELETE_DATAFILE", false, "sybaseiq");
                                    this.addDatasetOption("BL_DELIMITER", false, "sybaseiq");
                                    this.addDatasetOption("BL_OPTIONS", false, "sybaseiq");
                                    this.addDatasetOption("BL_USE_PIPE", false, "sybaseiq");
                                    this.addDatasetOption("BULKLOAD", false, "sybaseiq");
                                    this.addDatasetOption("CONSIDERXLSXCOLWIDTHS", false, "xlsx");
                                    this.addDatasetOption("DATAROW", false, "xlsx");
                                    this.addDatasetOption("HEADER", false, "xlsx");
                                    this.addDatasetOption("HEADERROW", false, "xlsx");
                                    this.addDatasetOption("NOCONSIDERXLSXCOLWIDTHS", false, "xlsx");
                                    this.addDatasetOption("XLSX_FORMAT", false, "xlsx");
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createFunctions = function () {
                                    this.addFunction("__C_DISPLAY", null, true, null, "SCL", false);
                                    this.addFunction("__L_DISPLAY", null, true, null, "SCL", false);
                                    this.addFunction("__N_DISPLAY", null, true, null, "SCL", false);
                                    this.addFunction("ABS", null, false, null, "@", false);
                                    this.addFunction("ACTIVATE", null, true, null, "SCL", false);
                                    this.addFunction("ADDR", null, false, null, "@", false);
                                    this.addFunction("ADDRLONG", null, false, null, "@", false);
                                    this.addFunction("ADDRLONGX", null, false, null, "@", false);
                                    this.addFunction("ADDRX", null, false, null, "@", false);
                                    this.addFunction("AES256DECC", null, false, null, "@", false);
                                    this.addFunction("AES256DECN", null, false, null, "@", false);
                                    this.addFunction("AES256ENCC", null, false, null, "@", false);
                                    this.addFunction("AES256ENCN", null, false, null, "@", false);
                                    this.addFunction("AIRY", null, false, null, "@", false);
                                    this.addFunction("ALLPERM", null, false, null, "@", false);
                                    this.addFunction("ANYALNUM", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYALNUM", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYALPHA", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYALPHA", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYCNTRL", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYCNTRL", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYDIGIT", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYDIGIT", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYFIRST", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYFIRST", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYGRAPH", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYGRAPH", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYLOWER", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYLOWER", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYNAME", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYNAME", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYPRINT", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYPRINT", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYPUNCT", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYPUNCT", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYSPACE", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYSPACE", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYUPPER", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYUPPER", null, false, null, "@SBCS", false);
                                    this.addFunction("ANYXDIGIT", null, false, null, "@MBCS", false);
                                    this.addFunction("ANYXDIGIT", null, false, null, "@SBCS", false);
                                    this.addFunction("APPEND", null, true, null, "SCL", false);
                                    this.addFunction("APPSRV_AUTHCLS", null, false, null, "@", false);
                                    this.addFunction("APPSRV_AUTHDS", null, false, null, "@", false);
                                    this.addFunction("APPSRV_AUTHLIB", null, false, null, "@", false);
                                    this.addFunction("APPSRV_HEADER", null, false, null, "@", false);
                                    this.addFunction("APPSRV_SESSION", null, false, null, "@", false);
                                    this.addFunction("APPSRV_SET", null, false, null, "@", false);
                                    this.addFunction("APPSRV_UNSAFE", null, false, null, "@", false);
                                    this.addFunction("APPSRVGETC", null, false, null, "@", false);
                                    this.addFunction("APPSRVGETN", null, false, null, "@", false);
                                    this.addFunction("APPSRVSET", null, false, null, "@", false);
                                    this.addFunction("ARCOS", null, false, null, "@", false);
                                    this.addFunction("ARCOSH", null, false, null, "@", false);
                                    this.addFunction("ARSIN", null, false, null, "@", false);
                                    this.addFunction("ARSINH", null, false, null, "@", false);
                                    this.addFunction("ARTANH", null, false, null, "@", false);
                                    this.addFunction("ATAN", null, false, null, "@", false);
                                    this.addFunction("ATAN2", null, false, null, "@", false);
                                    this.addFunction("ATTRC", null, false, null, "@", false);
                                    this.addFunction("ATTRN", null, false, null, "@", false);
                                    this.addFunction("BAND", null, false, null, "@", false);
                                    this.addFunction("BETA", null, false, null, "@", false);
                                    this.addFunction("BETAINV", null, false, null, "@", false);
                                    this.addFunction("BLACKCLPRC", null, false, null, "@", false);
                                    this.addFunction("BLACKPTPRC", null, false, null, "@", false);
                                    this.addFunction("BLKSHCLPRC", null, false, null, "@", false);
                                    this.addFunction("BLKSHPTPRC", null, false, null, "@", false);
                                    this.addFunction("BLOCK", null, true, null, "SCL", false);
                                    this.addFunction("BLSHIFT", null, false, null, "@", false);
                                    this.addFunction("BNOT", null, false, null, "@", false);
                                    this.addFunction("BOR", null, false, null, "@", false);
                                    this.addFunction("BRSHIFT", null, false, null, "@", false);
                                    this.addFunction("BXOR", null, false, null, "@", false);
                                    this.addFunction("BYTE", null, false, null, "@", false);
                                    this.addFunction("CAT", null, false, null, "@", false);
                                    this.addFunction("CATQ", null, false, null, "@", false);
                                    this.addFunction("CATS", null, false, null, "@", false);
                                    this.addFunction("CATT", null, false, null, "@", false);
                                    this.addFunction("CATX", null, false, null, "@", false);
                                    this.addFunction("CDF", null, false, null, "@", false);
                                    this.addFunction("CEIL", null, false, null, "@", false);
                                    this.addFunction("CEILZ", null, false, null, "@", false);
                                    this.addFunction("CENTER", null, false, null, "SCL", false);
                                    this.addFunction("CEXIST", null, false, null, "@", false);
                                    this.addFunction("CHAR", null, false, null, "@", false);
                                    this.addFunction("CHOOSEC", null, false, null, "@", false);
                                    this.addFunction("CHOOSEN", null, false, null, "@", false);
                                    this.addFunction("CINV", null, false, null, "@", false);
                                    this.addFunction("CLEARLIST", null, false, null, "@", false);
                                    this.addFunction("CLOSE", null, false, null, "@", false);
                                    this.addFunction("CMISS", null, false, null, "@", false);
                                    this.addFunction("CMP", null, false, null, "@", false);
                                    this.addFunction("COALESCE", null, false, null, "@", false);
                                    this.addFunction("COALESCEC", null, false, null, "@", false);
                                    this.addFunction("COLLATE", null, false, null, "@", false);
                                    this.addFunction("COMB", null, false, null, "@", false);
                                    this.addFunction("COMPARE", null, false, null, "@", false);
                                    this.addFunction("COMPARELIST", null, false, null, "@", false);
                                    this.addFunction("COMPBL", null, false, null, "@", false);
                                    this.addFunction("COMPGED", null, false, null, "@", false);
                                    this.addFunction("COMPLEV", null, false, null, "@", false);
                                    this.addFunction("COMPOUND", null, false, null, "@", false);
                                    this.addFunction("COMPRESS", null, false, null, "@", false);
                                    this.addFunction("CONSTANT", null, false, null, "@", false);
                                    this.addFunction("CONTAINS", null, false, null, "@", false);
                                    this.addFunction("CONVX", null, false, null, "@", false);
                                    this.addFunction("CONVXP", null, false, null, "@", false);
                                    this.addFunction("COPYLIST", null, false, null, "@", false);
                                    this.addFunction("COS", null, false, null, "@", false);
                                    this.addFunction("COSH", null, false, null, "@", false);
                                    this.addFunction("COUNT", null, false, null, "@", false);
                                    this.addFunction("COUNTC", null, false, null, "@", false);
                                    this.addFunction("COUNTW", null, false, null, "@", false);
                                    this.addFunction("CSS", null, false, null, "@", false);
                                    this.addFunction("CUMIPMT", null, false, null, "@", false);
                                    this.addFunction("CUMPRINC", null, false, null, "@", false);
                                    this.addFunction("CURFLD", null, true, null, "SCL", false);
                                    this.addFunction("CURLIST", null, false, null, "@", false);
                                    this.addFunction("CUROBS", null, false, null, "@", false);
                                    this.addFunction("CURTOP", null, true, null, "SCL", false);
                                    this.addFunction("CURWORD", null, true, null, "SCL", false);
                                    this.addFunction("CV", null, false, null, "@", false);
                                    this.addFunction("DACCDB", null, false, null, "@", false);
                                    this.addFunction("DACCDBSL", null, false, null, "@", false);
                                    this.addFunction("DACCSL", null, false, null, "@", false);
                                    this.addFunction("DACCSYD", null, false, null, "@", false);
                                    this.addFunction("DACCTAB", null, false, null, "@", false);
                                    this.addFunction("DAIRY", null, false, null, "@", false);
                                    this.addFunction("DATDIF", null, false, null, "@", false);
                                    this.addFunction("DATE", null, false, null, "@", false);
                                    this.addFunction("DATEJUL", null, false, null, "@", false);
                                    this.addFunction("DATEPART", null, false, null, "@", false);
                                    this.addFunction("DATETIME", null, false, null, "@", false);
                                    this.addFunction("DAY", null, false, null, "@", false);
                                    this.addFunction("DCLOSE", null, false, null, "@", false);
                                    this.addFunction("DCREATE", null, false, null, "@", false);
                                    this.addFunction("DECISIONFOREST_OPEN", null, false, null, "@", false);
                                    this.addFunction("DECISIONFOREST_PREDICTC", null, false, null, "@", false);
                                    this.addFunction("DECISIONFOREST_PREDICTR", null, false, null, "@", false);
                                    this.addFunction("DELITEM", null, false, null, "@", false);
                                    this.addFunction("DELLIST", null, false, null, "@", false);
                                    this.addFunction("DELNITEM", null, false, null, "DATASTEP", false);
                                    this.addFunction("DELNITEM", null, false, null, "SCL", false);
                                    this.addFunction("DELOBS", null, true, null, "SCL", false);
                                    this.addFunction("DEPDB", null, false, null, "@", false);
                                    this.addFunction("DEPDBSL", null, false, null, "@", false);
                                    this.addFunction("DEPSL", null, false, null, "@", false);
                                    this.addFunction("DEPSYD", null, false, null, "@", false);
                                    this.addFunction("DEPTAB", null, false, null, "@", false);
                                    this.addFunction("DEQUOTE", null, false, null, "@MBCS", false);
                                    this.addFunction("DEQUOTE", null, false, null, "@SBCS", false);
                                    this.addFunction("DESCRIBE", null, false, null, "@", false);
                                    this.addFunction("DEVIANCE", null, false, null, "@", false);
                                    this.addFunction("DF_OPEN", null, false, null, "@", false);
                                    this.addFunction("DF_PREDICT", null, false, null, "@", false);
                                    this.addFunction("DHMS", null, false, null, "@", false);
                                    this.addFunction("DIF", null, false, null, "DATASTEP", true);
                                    this.addFunction("DIGAMMA", null, false, null, "@", false);
                                    this.addFunction("DIM", null, false, null, "@", false);
                                    this.addFunction("DIM", null, false, null, "DATASTEP", true);
                                    this.addFunction("DINFO", null, false, null, "@", false);
                                    this.addFunction("DIRLIST", null, true, null, "SCL", false);
                                    this.addFunction("DISPLAYED", null, true, null, "SCL", false);
                                    this.addFunction("DIVIDE", null, false, null, "@", false);
                                    this.addFunction("DNUM", null, false, null, "@", false);
                                    this.addFunction("DOPEN", null, false, null, "@", false);
                                    this.addFunction("DOPTNAME", null, false, null, "@", false);
                                    this.addFunction("DOPTNUM", null, false, null, "@", false);
                                    this.addFunction("DOSUB", null, false, null, "@", false);
                                    this.addFunction("DOSUBL", null, false, null, "@", false);
                                    this.addFunction("DREAD", null, false, null, "@", false);
                                    this.addFunction("DROPNOTE", null, false, null, "@", false);
                                    this.addFunction("DSID", null, false, null, "SCL", false);
                                    this.addFunction("DSNAME", null, false, null, "@", false);
                                    this.addFunction("DSNAME", null, false, null, "SCL", false);
                                    this.addFunction("DSNCATLGD", null, false, [AbstractSasLanguageSupport_Lua.Platform.zos], "@", false);
                                    this.addFunction("DUR", null, false, null, "@", false);
                                    this.addFunction("DURP", null, false, null, "@", false);
                                    this.addFunction("EFFRATE", null, false, null, "@", false);
                                    this.addFunction("ENCODCOMPAT", null, false, null, "@", false);
                                    this.addFunction("ENCODISVALID", null, false, null, "@", false);
                                    this.addFunction("ENVLEN", null, false, null, "@", false);
                                    this.addFunction("ENVLIST", null, false, null, "@", false);
                                    this.addFunction("ENVLIST", null, false, null, "SCL", false);
                                    this.addFunction("ERF", null, false, null, "@", false);
                                    this.addFunction("ERFC", null, false, null, "@", false);
                                    this.addFunction("ERROR", null, true, null, "SCL", false);
                                    this.addFunction("EUCLID", null, false, null, "@", false);
                                    this.addFunction("EUROCURR", null, false, null, "@", false);
                                    this.addFunction("EXIST", null, false, null, "@", false);
                                    this.addFunction("EXP", null, false, null, "@", false);
                                    this.addFunction("FACT", null, false, null, "@", false);
                                    this.addFunction("FCLOSE", null, false, null, "@", false);
                                    this.addFunction("FCOL", null, false, null, "@", false);
                                    this.addFunction("FDELETE", null, false, null, "@", false);
                                    this.addFunction("FETCH", null, false, null, "@", false);
                                    this.addFunction("FETCHOBS", null, false, null, "@", false);
                                    this.addFunction("FEXIST", null, false, null, "@", false);
                                    this.addFunction("FGET", null, false, null, "DATASTEP", false);
                                    this.addFunction("FGET", null, false, null, "MACRO", false);
                                    this.addFunction("FGET", null, false, null, "SCL", false);
                                    this.addFunction("FIELD", null, true, null, "SCL", false);
                                    this.addFunction("FILEEXIST", null, false, null, "@", false);
                                    this.addFunction("FILENAME", null, false, null, "@", false);
                                    this.addFunction("FILENAME", null, false, null, "DATASTEP", false);
                                    this.addFunction("FILENAME", null, false, null, "MACRO", false);
                                    this.addFunction("FILEREF", null, false, null, "@", false);
                                    this.addFunction("FILLIST", null, false, null, "DATASTEP", false);
                                    this.addFunction("FILLIST", null, false, null, "JAVA", false);
                                    this.addFunction("FILLIST", null, false, null, "MACRO", false);
                                    this.addFunction("FILLIST", null, false, null, "SCL", false);
                                    this.addFunction("FINANCE", null, false, null, "@", false);
                                    this.addFunction("FIND", null, false, null, "@", false);
                                    this.addFunction("FINDC", null, false, null, "@", false);
                                    this.addFunction("FINDW", null, false, null, "@", false);
                                    this.addFunction("FINFO", null, false, null, "@", false);
                                    this.addFunction("FINV", null, false, null, "@", false);
                                    this.addFunction("FIPNAME", null, false, null, "@", false);
                                    this.addFunction("FIPNAMEL", null, false, null, "@", false);
                                    this.addFunction("FIPSTATE", null, false, null, "@", false);
                                    this.addFunction("FIRST", null, false, null, "@", false);
                                    this.addFunction("FKEYNAME", null, true, null, "SCL", false);
                                    this.addFunction("FLDATTR", null, true, null, "SCL", false);
                                    this.addFunction("FLDCOLOR", null, true, null, "SCL", false);
                                    this.addFunction("FLOOR", null, false, null, "@", false);
                                    this.addFunction("FLOORZ", null, false, null, "@", false);
                                    this.addFunction("FNOTE", null, false, null, "@", false);
                                    this.addFunction("FOPEN", null, false, null, "@", false);
                                    this.addFunction("FOPTNAME", null, false, null, "@", false);
                                    this.addFunction("FOPTNUM", null, false, null, "@", false);
                                    this.addFunction("FORMAT", null, false, null, "@", false);
                                    this.addFunction("FPOINT", null, false, null, "@", false);
                                    this.addFunction("FPOS", null, false, null, "@", false);
                                    this.addFunction("FPUT", null, false, null, "@", false);
                                    this.addFunction("FREAD", null, false, null, "@", false);
                                    this.addFunction("FRECCNT", null, false, null, "@", false);
                                    this.addFunction("FREWIND", null, false, null, "@", false);
                                    this.addFunction("FRLEN", null, false, null, "@", false);
                                    this.addFunction("FSEDIT", null, true, null, "SCL", false);
                                    this.addFunction("FSEP", null, false, null, "@", false);
                                    this.addFunction("FSVIEW", null, true, null, "SCL", false);
                                    this.addFunction("FUZZ", null, false, null, "@", false);
                                    this.addFunction("FWRITE", null, false, null, "@", false);
                                    this.addFunction("GAMINV", null, false, null, "@", false);
                                    this.addFunction("GAMMA", null, false, null, "@", false);
                                    this.addFunction("GARKHCLPRC", null, false, null, "@", false);
                                    this.addFunction("GARKHPTPRC", null, false, null, "@", false);
                                    this.addFunction("GCD", null, false, null, "@", false);
                                    this.addFunction("GEODIST", null, false, null, "@", false);
                                    this.addFunction("GEOMEAN", null, false, null, "@", false);
                                    this.addFunction("GEOMEANZ", null, false, null, "@", false);
                                    this.addFunction("GETFKEY", null, true, null, "SCL", false);
                                    this.addFunction("GETITEMC", null, false, null, "@", false);
                                    this.addFunction("GETITEML", null, false, null, "@", false);
                                    this.addFunction("GETITEMN", null, false, null, "@", false);
                                    this.addFunction("GETLATTR", null, false, null, "@", false);
                                    this.addFunction("GETLCNTA", null, false, null, "@", false);
                                    this.addFunction("GETLCNTP", null, false, null, "@", false);
                                    this.addFunction("GETLOCENV", null, false, null, "@", false);
                                    this.addFunction("GETNITEMC", null, false, null, "@", false);
                                    this.addFunction("GETNITEML", null, false, null, "@", false);
                                    this.addFunction("GETNITEMN", null, false, null, "@", false);
                                    this.addFunction("GETOPTION", null, false, null, "@", false);
                                    this.addFunction("GETPXLANGUAGE", null, false, null, "@", false);
                                    this.addFunction("GETPXLOCALE", null, false, null, "@", false);
                                    this.addFunction("GETPXREGION", null, false, null, "@", false);
                                    this.addFunction("GETVARC", null, false, null, "@", false);
                                    this.addFunction("GETVARF", null, false, null, "SCL", false);
                                    this.addFunction("GETVARN", null, false, null, "@", false);
                                    this.addFunction("GMTOFF", null, false, null, "@", false);
                                    this.addFunction("GRAY", null, true, null, "SCL", false);
                                    this.addFunction("HARMEAN", null, false, null, "@", false);
                                    this.addFunction("HARMEANZ", null, false, null, "@", false);
                                    this.addFunction("HASATTR", null, false, null, "@", false);
                                    this.addFunction("HBOUND", null, false, null, "DATASTEP", true);
                                    this.addFunction("HMS", null, false, null, "@", false);
                                    this.addFunction("HOLIDAY", null, false, null, "@", false);
                                    this.addFunction("HOUR", null, false, null, "@", false);
                                    this.addFunction("HTMLDECODE", null, false, null, "@MBCS", false);
                                    this.addFunction("HTMLDECODE", null, false, null, "@SBCS", false);
                                    this.addFunction("HTMLENCODE", null, false, null, "@MBCS", false);
                                    this.addFunction("HTMLENCODE", null, false, null, "@SBCS", false);
                                    this.addFunction("IBESSEL", null, false, null, "@", false);
                                    this.addFunction("IFC", null, false, null, "@", false);
                                    this.addFunction("IFN", null, false, null, "@", false);
                                    this.addFunction("INDEX", null, false, null, "@", false);
                                    this.addFunction("INDEXC", null, false, null, "@", false);
                                    this.addFunction("INDEXW", null, false, null, "@", false);
                                    this.addFunction("INFORMAT", null, false, null, "@", false);
                                    this.addFunction("INITROW", null, true, null, "SCL", false);
                                    this.addFunction("INPUT", null, false, null, "DATASTEP", false);
                                    this.addFunction("INPUTC", null, false, null, "@", false);
                                    this.addFunction("INPUTN", null, false, null, "@", false);
                                    this.addFunction("INSERTC", null, false, null, "@", false);
                                    this.addFunction("INSERTL", null, false, null, "@", false);
                                    this.addFunction("INSERTN", null, false, null, "@", false);
                                    this.addFunction("INT", null, false, null, "@", false);
                                    this.addFunction("INTCK", null, false, null, "@", false);
                                    this.addFunction("INTCYCLE", null, false, null, "@", false);
                                    this.addFunction("INTFIT", null, false, null, "@", false);
                                    this.addFunction("INTFMT", null, false, null, "@", false);
                                    this.addFunction("INTGET", null, false, null, "@", false);
                                    this.addFunction("INTINDEX", null, false, null, "@", false);
                                    this.addFunction("INTNX", null, false, null, "@", false);
                                    this.addFunction("INTRR", null, false, null, "@", false);
                                    this.addFunction("INTSEAS", null, false, null, "@", false);
                                    this.addFunction("INTSHIFT", null, false, null, "@", false);
                                    this.addFunction("INTTEST", null, false, null, "@", false);
                                    this.addFunction("INTZ", null, false, null, "@", false);
                                    this.addFunction("IORCMSG", null, false, null, "DATASTEP", false);
                                    this.addFunction("IPMT", null, false, null, "@", false);
                                    this.addFunction("IQR", null, false, null, "@", false);
                                    this.addFunction("IRR", null, false, null, "@", false);
                                    this.addFunction("ISACTIVE", null, true, null, "SCL", false);
                                    this.addFunction("ISGRAY", null, true, null, "SCL", false);
                                    this.addFunction("ISSEL", null, true, null, "SCL", false);
                                    this.addFunction("ITEMTYPE", null, false, null, "@", false);
                                    this.addFunction("JARO", null, false, null, "@", false);
                                    this.addFunction("JAROWINKLER", null, false, null, "@", false);
                                    this.addFunction("JBESSEL", null, false, null, "@", false);
                                    this.addFunction("JSONPP", null, false, null, "@", false);
                                    this.addFunction("JULDATE", null, false, null, "@", false);
                                    this.addFunction("JULDATE7", null, false, null, "@", false);
                                    this.addFunction("KCOMPARE", null, false, null, "@", false);
                                    this.addFunction("KCOMPRESS", null, false, null, "@", false);
                                    this.addFunction("KCOUNT", null, false, null, "@", false);
                                    this.addFunction("KCVT", null, false, null, "@", false);
                                    this.addFunction("KINDEX", null, false, null, "@", false);
                                    this.addFunction("KINDEXC", null, false, null, "@", false);
                                    this.addFunction("KLEFT", null, false, null, "@", false);
                                    this.addFunction("KLENGTH", null, false, null, "@", false);
                                    this.addFunction("KLOWCASE", null, false, null, "@", false);
                                    this.addFunction("KPROPCASE", null, false, null, "@", false);
                                    this.addFunction("KREVERSE", null, false, null, "@", false);
                                    this.addFunction("KRIGHT", null, false, null, "@", false);
                                    this.addFunction("KSCAN", null, false, null, "@", false);
                                    this.addFunction("KSTRCAT", null, false, null, "@", false);
                                    this.addFunction("KSUBSTR", null, false, null, "@", false);
                                    this.addFunction("KSUBSTRB", null, false, null, "@", false);
                                    this.addFunction("KTRANSLATE", null, false, null, "@", false);
                                    this.addFunction("KTRIM", null, false, null, "@", false);
                                    this.addFunction("KTRUNCATE", null, false, null, "@", false);
                                    this.addFunction("KUPCASE", null, false, null, "@", false);
                                    this.addFunction("KUPDATE", null, false, null, "@", false);
                                    this.addFunction("KUPDATEB", null, false, null, "@", false);
                                    this.addFunction("KURTOSIS", null, false, null, "@", false);
                                    this.addFunction("KVERIFY", null, false, null, "@", false);
                                    this.addFunction("LAG", null, false, null, "DATASTEP", true);
                                    this.addFunction("LARGEST", null, false, null, "@", false);
                                    this.addFunction("LASTCMD", null, true, null, "SCL", false);
                                    this.addFunction("LASTKEY", null, true, null, "SCL", false);
                                    this.addFunction("LBOUND", null, false, null, "DATASTEP", true);
                                    this.addFunction("LCM", null, false, null, "@", false);
                                    this.addFunction("LCOMB", null, false, null, "@", false);
                                    this.addFunction("LEFT", null, false, null, "@", false);
                                    this.addFunction("LEFT", null, false, null, "SCL", false);
                                    this.addFunction("LENGTH", null, false, null, "@", false);
                                    this.addFunction("LENGTH", null, false, null, "SCL", false);
                                    this.addFunction("LENGTHC", null, false, null, "@", false);
                                    this.addFunction("LENGTHM", null, false, null, "@", false);
                                    this.addFunction("LENGTHN", null, false, null, "@", false);
                                    this.addFunction("LFACT", null, false, null, "@", false);
                                    this.addFunction("LGAMMA", null, false, null, "@", false);
                                    this.addFunction("LIBNAME", null, false, null, "@", false);
                                    this.addFunction("LIBREF", null, false, null, "@", false);
                                    this.addFunction("LIKE", null, false, null, "@", false);
                                    this.addFunction("LISTLEN", null, false, null, "@", false);
                                    this.addFunction("LOCATEC", null, false, null, "SCL", false);
                                    this.addFunction("LOCATEN", null, false, null, "SCL", false);
                                    this.addFunction("LOG", null, false, null, "@", false);
                                    this.addFunction("LOG10", null, false, null, "@", false);
                                    this.addFunction("LOG1PX", null, false, null, "@", false);
                                    this.addFunction("LOG2", null, false, null, "@", false);
                                    this.addFunction("LOGBETA", null, false, null, "@", false);
                                    this.addFunction("LOGCDF", null, false, null, "@", false);
                                    this.addFunction("LOGPDF", ["LOGPMF"], false, null, "@", false);
                                    this.addFunction("LOGSDF", null, false, null, "@", false);
                                    this.addFunction("LOOKSLIKENUMBER", null, false, null, "@", false);
                                    this.addFunction("LOOKUPC", null, true, null, "SCL", false);
                                    this.addFunction("LOWCASE", null, false, null, "@MBCS", false);
                                    this.addFunction("LOWCASE", null, false, null, "@SBCS", false);
                                    this.addFunction("LPERM", null, false, null, "@", false);
                                    this.addFunction("LPNORM", null, false, null, "@", false);
                                    this.addFunction("LUHN", ["MOD10"], false, null, "@", false);
                                    this.addFunction("LUHNC", ["MOD10C"], false, null, "@", false);
                                    this.addFunction("LUHNDIGIT", ["MOD10DIGIT"], false, null, "@", false);
                                    this.addFunction("LUHNDIGITC", ["MOD10DIGITC"], false, null, "@", false);
                                    this.addFunction("LVARLEVEL", null, false, null, "DATASTEP", false);
                                    this.addFunction("LVARLEVEL", null, false, null, "JAVA", false);
                                    this.addFunction("LVARLEVEL", null, false, null, "SCL", false);
                                    this.addFunction("MAD", null, false, null, "@", false);
                                    this.addFunction("MAKELIST", null, false, null, "@", false);
                                    this.addFunction("MAKELIST", null, false, null, "SCL", false);
                                    this.addFunction("MAKENLIST", null, false, null, "@", false);
                                    this.addFunction("MAKENLIST", null, false, null, "SCL", false);
                                    this.addFunction("MARGRCLPRC", null, false, null, "@", false);
                                    this.addFunction("MARGRPTPRC", null, false, null, "@", false);
                                    this.addFunction("MAX", null, false, null, "@", false);
                                    this.addFunction("MAXC", null, false, null, "@", false);
                                    this.addFunction("MD5", null, false, null, "@", false);
                                    this.addFunction("MDY", null, false, null, "@", false);
                                    this.addFunction("MEAN", null, false, null, "@", false);
                                    this.addFunction("MEDIAN", null, false, null, "@", false);
                                    this.addFunction("MIN", null, false, null, "@", false);
                                    this.addFunction("MINC", null, false, null, "@", false);
                                    this.addFunction("MINUTE", null, false, null, "@", false);
                                    this.addFunction("MISSING", null, false, null, "@", false);
                                    this.addFunction("MLENGTH", null, false, null, "SCL", false);
                                    this.addFunction("MOD", null, false, null, "@", false);
                                    this.addFunction("MODFATHER", null, false, null, "@", false);
                                    this.addFunction("MODIFIED", null, true, null, "SCL", false);
                                    this.addFunction("MODULEC", null, false, null, "@", false);
                                    this.addFunction("MODULEN", null, false, null, "@", false);
                                    this.addFunction("MODZ", null, false, null, "@", false);
                                    this.addFunction("MONTH", null, false, null, "@", false);
                                    this.addFunction("MOPEN", null, false, null, "@", false);
                                    this.addFunction("MORT", null, false, null, "@", false);
                                    this.addFunction("N", null, false, null, "@", false);
                                    this.addFunction("NAMEDITEM", null, false, null, "DATASTEP", false);
                                    this.addFunction("NAMEDITEM", null, false, null, "SCL", false);
                                    this.addFunction("NAMEITEM", null, false, null, "@", false);
                                    this.addFunction("NETPV", null, false, null, "@", false);
                                    this.addFunction("NGRAM", null, false, null, "@", false);
                                    this.addFunction("NLDATE", null, false, null, "@", false);
                                    this.addFunction("NLDATM", null, false, null, "@", false);
                                    this.addFunction("NLITERAL", null, false, null, "@", false);
                                    this.addFunction("NLTIME", null, false, null, "@", false);
                                    this.addFunction("NMISS", null, false, null, "@", false);
                                    this.addFunction("NOMRATE", null, false, null, "@", false);
                                    this.addFunction("NOTALNUM", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTALNUM", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTALPHA", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTALPHA", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTCNTRL", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTCNTRL", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTDIGIT", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTDIGIT", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTE", null, false, null, "@", false);
                                    this.addFunction("NOTFIRST", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTFIRST", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTGRAPH", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTGRAPH", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTLOWER", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTLOWER", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTNAME", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTNAME", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTPRINT", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTPRINT", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTPUNCT", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTPUNCT", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTSPACE", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTSPACE", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTUPPER", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTUPPER", null, false, null, "@SBCS", false);
                                    this.addFunction("NOTXDIGIT", null, false, null, "@MBCS", false);
                                    this.addFunction("NOTXDIGIT", null, false, null, "@SBCS", false);
                                    this.addFunction("NPV", null, false, null, "@", false);
                                    this.addFunction("NSELECT", null, true, null, "SCL", false);
                                    this.addFunction("NUMFKEYS", null, true, null, "SCL", false);
                                    this.addFunction("NVALID", null, false, null, "@", false);
                                    this.addFunction("NWKDOM", null, false, null, "@", false);
                                    this.addFunction("OPEN", null, false, null, "@", false);
                                    this.addFunction("OPEN", null, true, null, "SCL", false);
                                    this.addFunction("ORDINAL", null, false, null, "@", false);
                                    this.addFunction("PATHNAME", null, false, null, "@", false);
                                    this.addFunction("PCTL", null, false, null, "@", false);
                                    this.addFunction("PCTL1", null, false, null, "@", false);
                                    this.addFunction("PCTL2", null, false, null, "@", false);
                                    this.addFunction("PCTL3", null, false, null, "@", false);
                                    this.addFunction("PCTL4", null, false, null, "@", false);
                                    this.addFunction("PCTL5", null, false, null, "@", false);
                                    this.addFunction("PDF", ["PMF"], false, null, "@", false);
                                    this.addFunction("PEEK", null, false, null, "@", false);
                                    this.addFunction("PEEKC", null, false, null, "@", false);
                                    this.addFunction("PEEKCLONG", null, false, null, "@", false);
                                    this.addFunction("PEEKLONG", null, false, null, "@", false);
                                    this.addFunction("PERM", null, false, null, "@", false);
                                    this.addFunction("PMT", null, false, null, "@", false);
                                    this.addFunction("POINT", null, false, null, "@", false);
                                    this.addFunction("POISSON", null, false, null, "@", false);
                                    this.addFunction("POPC", null, false, null, "@", false);
                                    this.addFunction("POPL", null, false, null, "@", false);
                                    this.addFunction("POPN", null, false, null, "@", false);
                                    this.addFunction("POW", null, false, null, "@", false);
                                    this.addFunction("PPMT", null, false, null, "@", false);
                                    this.addFunction("PREVIEW", null, true, null, "SCL", false);
                                    this.addFunction("PROBBETA", null, false, null, "@", false);
                                    this.addFunction("PROBBNML", null, false, null, "@", false);
                                    this.addFunction("PROBBNRM", null, false, null, "@", false);
                                    this.addFunction("PROBCHI", null, false, null, "@", false);
                                    this.addFunction("PROBF", null, false, null, "@", false);
                                    this.addFunction("PROBGAM", null, false, null, "@", false);
                                    this.addFunction("PROBHYPR", null, false, null, "@", false);
                                    this.addFunction("PROBIT", null, false, null, "@", false);
                                    this.addFunction("PROBNEGB", null, false, null, "@", false);
                                    this.addFunction("PROBNORM", null, false, null, "@", false);
                                    this.addFunction("PROBT", null, false, null, "@", false);
                                    this.addFunction("PROPCASE", null, false, null, "@MBCS", false);
                                    this.addFunction("PROPCASE", null, false, null, "@SBCS", false);
                                    this.addFunction("PRXCHANGE", null, false, null, "@", false);
                                    this.addFunction("PRXMATCH", null, false, null, "@", false);
                                    this.addFunction("PRXPAREN", null, false, null, "@", false);
                                    this.addFunction("PRXPARSE", null, false, null, "@", false);
                                    this.addFunction("PRXPOSN", null, false, null, "@", false);
                                    this.addFunction("PTRLONGADD", null, false, null, "@", false);
                                    this.addFunction("PUT", null, false, null, "DATASTEP", false);
                                    this.addFunction("PUTC", null, false, null, "@", false);
                                    this.addFunction("PUTN", null, false, null, "@", false);
                                    this.addFunction("PVP", null, false, null, "@", false);
                                    this.addFunction("PWENCODE", null, false, null, "@", false);
                                    this.addFunction("QTR", null, false, null, "@", false);
                                    this.addFunction("QUANTILE", null, false, null, "@", false);
                                    this.addFunction("QUOTE", null, false, null, "@MBCS", false);
                                    this.addFunction("QUOTE", null, false, null, "@SBCS", false);
                                    this.addFunction("RANBIN", null, false, null, "@", false);
                                    this.addFunction("RANCAU", null, false, null, "@", false);
                                    this.addFunction("RAND", null, false, null, "@", false);
                                    this.addFunction("RANEXP", null, false, null, "@", false);
                                    this.addFunction("RANGAM", null, false, null, "@", false);
                                    this.addFunction("RANGE", null, false, null, "@", false);
                                    this.addFunction("RANK", null, false, null, "@", false);
                                    this.addFunction("RANNOR", ["NORMAL"], false, null, "@", false);
                                    this.addFunction("RANPOI", null, false, null, "@", false);
                                    this.addFunction("RANTBL", null, false, null, "@", false);
                                    this.addFunction("RANTRI", null, false, null, "@", false);
                                    this.addFunction("RANUNI", ["UNIFORM"], false, null, "@", false);
                                    this.addFunction("READ_ARRAY", null, false, null, "@SBCS", false);
                                    this.addFunction("REPEAT", null, false, null, "@", false);
                                    this.addFunction("RESOLVE", null, false, null, "DATASTEP", false);
                                    this.addFunction("REVERSE", null, false, null, "@", false);
                                    this.addFunction("REVLIST", null, false, null, "@", false);
                                    this.addFunction("REWIND", null, false, null, "@", false);
                                    this.addFunction("RIGHT", null, false, null, "@", false);
                                    this.addFunction("RIGHT", null, false, null, "SCL", false);
                                    this.addFunction("RLINK", null, false, null, "@", false);
                                    this.addFunction("RMS", null, false, null, "@", false);
                                    this.addFunction("ROTLIST", null, false, null, "@", false);
                                    this.addFunction("ROUND", null, false, null, "@", false);
                                    this.addFunction("ROUNDE", null, false, null, "@", false);
                                    this.addFunction("ROUNDZ", null, false, null, "@", false);
                                    this.addFunction("SAVELIST", null, false, null, "DATASTEP", false);
                                    this.addFunction("SAVELIST", null, false, null, "JAVA", false);
                                    this.addFunction("SAVELIST", null, false, null, "MACRO", false);
                                    this.addFunction("SAVELIST", null, false, null, "SCL", false);
                                    this.addFunction("SAVING", null, false, null, "@", false);
                                    this.addFunction("SAVINGS", null, false, null, "@", false);
                                    this.addFunction("SCAN", null, false, null, "@", false);
                                    this.addFunction("SCANQ", null, false, null, "@", false);
                                    this.addFunction("SDF", null, false, null, "@", false);
                                    this.addFunction("SEARCHC", null, false, null, "@", false);
                                    this.addFunction("SEARCHL", null, false, null, "@", false);
                                    this.addFunction("SEARCHN", null, false, null, "@", false);
                                    this.addFunction("SECOND", null, false, null, "@", false);
                                    this.addFunction("SELECT", null, true, null, "SCL", false);
                                    this.addFunction("SELECTED", null, true, null, "SCL", false);
                                    this.addFunction("SETITEMC", null, false, null, "@", false);
                                    this.addFunction("SETITEML", null, false, null, "@", false);
                                    this.addFunction("SETITEMN", null, false, null, "@", false);
                                    this.addFunction("SETLATTR", null, false, null, "@", false);
                                    this.addFunction("SETNITEMC", null, false, null, "DATASTEP", false);
                                    this.addFunction("SETNITEMC", null, false, null, "SCL", false);
                                    this.addFunction("SETNITEML", null, false, null, "DATASTEP", false);
                                    this.addFunction("SETNITEML", null, false, null, "SCL", false);
                                    this.addFunction("SETNITEMN", null, false, null, "DATASTEP", false);
                                    this.addFunction("SETNITEMN", null, false, null, "SCL", false);
                                    this.addFunction("SHA1", null, false, null, "@", false);
                                    this.addFunction("SHA256", null, false, null, "@", false);
                                    this.addFunction("SHA384", null, false, null, "@", false);
                                    this.addFunction("SHA512", null, false, null, "@", false);
                                    this.addFunction("SHOWLIST", null, true, null, "SCL", false);
                                    this.addFunction("SIGN", null, false, null, "@", false);
                                    this.addFunction("SIN", null, false, null, "@", false);
                                    this.addFunction("SINH", null, false, null, "@", false);
                                    this.addFunction("SKEWNESS", null, false, null, "@", false);
                                    this.addFunction("SLEEP", null, false, null, "@", false);
                                    this.addFunction("SMALLEST", null, false, null, "@", false);
                                    this.addFunction("SORTLIST", null, false, null, "@", false);
                                    this.addFunction("SOUNDEX", null, false, null, "@", false);
                                    this.addFunction("SOUNDSLIKE", null, false, null, "@", false);
                                    this.addFunction("SPEDIS", null, false, null, "@", false);
                                    this.addFunction("SQRT", null, false, null, "@", false);
                                    this.addFunction("STD", null, false, null, "@", false);
                                    this.addFunction("STDERR", null, false, null, "@", false);
                                    this.addFunction("STFIPS", null, false, null, "@", false);
                                    this.addFunction("STNAME", null, false, null, "@", false);
                                    this.addFunction("STNAMEL", null, false, null, "@", false);
                                    this.addFunction("STRATTR", null, true, null, "SCL", false);
                                    this.addFunction("STRIP", null, false, null, "@", false);
                                    this.addFunction("SUBMITCLEAR", null, true, null, "SCL", false);
                                    this.addFunction("SUBPAD", null, false, null, "@", false);
                                    this.addFunction("SUBSTR", null, false, null, "@", false);
                                    this.addFunction("SUBSTRN", null, false, null, "@", false);
                                    this.addFunction("SUM", null, false, null, "@", false);
                                    this.addFunction("SUMABS", null, false, null, "@", false);
                                    this.addFunction("SYMEXIST", null, false, null, "@", false);
                                    this.addFunction("SYMGET", null, false, null, "@", false);
                                    this.addFunction("SYMGETN", null, false, null, "@", false);
                                    this.addFunction("SYMGLOBL", null, false, null, "@", false);
                                    this.addFunction("SYMLOCAL", null, false, null, "@", false);
                                    this.addFunction("SYSEXIST", null, false, null, "@", false);
                                    this.addFunction("SYSGET", null, false, null, "@", false);
                                    this.addFunction("SYSMSG", null, false, null, "@", false);
                                    this.addFunction("SYSPARM", null, false, null, "@", false);
                                    this.addFunction("SYSPROCESSID", null, false, null, "@", false);
                                    this.addFunction("SYSPROCESSNAME", null, false, null, "@", false);
                                    this.addFunction("SYSPROD", null, false, null, "@", false);
                                    this.addFunction("SYSRC", null, false, null, "@", false);
                                    this.addFunction("SYSTEM", null, false, null, "@", false);
                                    this.addFunction("TAN", null, false, null, "@", false);
                                    this.addFunction("TANH", null, false, null, "@", false);
                                    this.addFunction("TIME", null, false, null, "@", false);
                                    this.addFunction("TIMEPART", null, false, null, "@", false);
                                    this.addFunction("TIMEVALUE", null, false, null, "@", false);
                                    this.addFunction("TINV", null, false, null, "@", false);
                                    this.addFunction("TODAY", null, false, null, "@", false);
                                    this.addFunction("TRANSLATE", null, false, null, "@", false);
                                    this.addFunction("TRANSTRN", null, false, null, "@", false);
                                    this.addFunction("TRANTAB", null, false, null, "@", false);
                                    this.addFunction("TRANWRD", null, false, null, "@MBCS", false);
                                    this.addFunction("TRANWRD", null, false, null, "@SBCS", false);
                                    this.addFunction("TRANWRDS", null, false, null, "@SBCS", false);
                                    this.addFunction("TRIGAMMA", null, false, null, "@", false);
                                    this.addFunction("TRIM", null, false, null, "@", false);
                                    this.addFunction("TRIMN", null, false, null, "@", false);
                                    this.addFunction("TRUNC", null, false, null, "@", false);
                                    this.addFunction("TZONEOFF", null, false, null, "@", false);
                                    this.addFunction("UNGRAY", null, true, null, "SCL", false);
                                    this.addFunction("UNICODE", null, false, null, "@", false);
                                    this.addFunction("UNICODEC", null, false, null, "@", false);
                                    this.addFunction("UNICODELEN", null, false, null, "@", false);
                                    this.addFunction("UNSELECT", null, true, null, "SCL", false);
                                    this.addFunction("UPCASE", null, false, null, "@MBCS", false);
                                    this.addFunction("UPCASE", null, false, null, "@SBCS", false);
                                    this.addFunction("UPDATE", null, true, null, "SCL", false);
                                    this.addFunction("URLDECODE", null, false, null, "@", false);
                                    this.addFunction("URLENCODE", null, false, null, "@", false);
                                    this.addFunction("USS", null, false, null, "@", false);
                                    this.addFunction("UUIDGEN", null, false, null, "@", false);
                                    this.addFunction("VAR", null, false, null, "@", false);
                                    this.addFunction("VARFMT", null, false, null, "@", false);
                                    this.addFunction("VARINFMT", null, false, null, "@", false);
                                    this.addFunction("VARLABEL", null, false, null, "@", false);
                                    this.addFunction("VARLEN", null, false, null, "@", false);
                                    this.addFunction("VARNAME", null, false, null, "@", false);
                                    this.addFunction("VARNUM", null, false, null, "@", false);
                                    this.addFunction("VARRAY", null, false, null, "DATASTEP", false);
                                    this.addFunction("VARRAYX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VARTYPE", null, false, null, "@", false);
                                    this.addFunction("VERIFY", null, false, null, "@", false);
                                    this.addFunction("VFORMAT", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATD", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATDX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATN", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATNX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATW", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATWX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VFORMATX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINARRAY", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINARRAYX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMAT", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATD", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATDX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATN", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATNX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATW", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATWX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VINFORMATX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VLABEL", null, false, null, "DATASTEP", false);
                                    this.addFunction("VLABELX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VLENGTH", null, false, null, "DATASTEP", false);
                                    this.addFunction("VLENGTHX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VNAME", null, false, null, "DATASTEP", false);
                                    this.addFunction("VNAMEX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VTRANSCODE", null, false, null, "DATASTEP", false);
                                    this.addFunction("VTRANSCODEX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VTYPE", null, false, null, "DATASTEP", false);
                                    this.addFunction("VTYPEX", null, false, null, "DATASTEP", false);
                                    this.addFunction("VVALUE", null, false, null, "DATASTEP", false);
                                    this.addFunction("VVALUEX", null, false, null, "DATASTEP", false);
                                    this.addFunction("WEEK", null, false, null, "@", false);
                                    this.addFunction("WEEKDAY", null, false, null, "@", false);
                                    this.addFunction("WHERE", null, false, null, "JAVA", false);
                                    this.addFunction("WHERE", null, false, null, "SCL", false);
                                    this.addFunction("WHICHC", null, false, null, "@", false);
                                    this.addFunction("WHICHN", null, false, null, "@", false);
                                    this.addFunction("WORD", null, true, null, "SCL", false);
                                    this.addFunction("WORDTYPE", null, true, null, "SCL", false);
                                    this.addFunction("WPSTRACE", null, false, null, "@", false);
                                    this.addFunction("WRITE_ARRAY", null, false, null, "@SBCS", false);
                                    this.addFunction("YEAR", null, false, null, "@", false);
                                    this.addFunction("YIELDP", null, false, null, "@", false);
                                    this.addFunction("YRDIF", null, false, null, "@", false);
                                    this.addFunction("YYQ", null, false, null, "@", false);
                                    this.addFunction("ZIPCITY", null, false, null, "@", false);
                                    this.addFunction("ZIPCITYDISTANCE", null, false, null, "@", false);
                                    this.addFunction("ZIPFIPS", null, false, null, "@", false);
                                    this.addFunction("ZIPNAME", null, false, null, "@", false);
                                    this.addFunction("ZIPNAMEL", null, false, null, "@", false);
                                    this.addFunction("ZIPSTATE", null, false, null, "@", false);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createImlFunctions = function () {
                                    this.addImlFunction("ALL", false, null);
                                    this.addImlFunction("ALLCOMB", false, null);
                                    this.addImlFunction("ALLPERM", false, null);
                                    this.addImlFunction("ANY", false, null);
                                    this.addImlFunction("APPLY", false, null);
                                    this.addImlFunction("ARMASIM", false, null);
                                    this.addImlFunction("BIN", false, null);
                                    this.addImlFunction("BLANKSTR", false, null);
                                    this.addImlFunction("BLOCK", false, null);
                                    this.addImlFunction("BRANKS", false, null);
                                    this.addImlFunction("BSPLINE", false, null);
                                    this.addImlFunction("BTRAN", false, null);
                                    this.addImlFunction("BYTE", false, null);
                                    this.addImlFunction("CHAR", false, null);
                                    this.addImlFunction("CHOOSE", false, null);
                                    this.addImlFunction("COL", false, null);
                                    this.addImlFunction("COLVEC", false, null);
                                    this.addImlFunction("CONCAT", false, null);
                                    this.addImlFunction("CONTENTS", false, null);
                                    this.addImlFunction("CONVEXIT", false, null);
                                    this.addImlFunction("COUNTMISS", false, null);
                                    this.addImlFunction("COUNTN", false, null);
                                    this.addImlFunction("COUNTUNIQUE", false, null);
                                    this.addImlFunction("COV", false, null);
                                    this.addImlFunction("COVLAG", false, null);
                                    this.addImlFunction("CSHAPE", false, null);
                                    this.addImlFunction("CUPROD", false, null);
                                    this.addImlFunction("CUSUM", false, null);
                                    this.addImlFunction("DATASETS", false, null);
                                    this.addImlFunction("DESIGN", false, null);
                                    this.addImlFunction("DESIGNF", false, null);
                                    this.addImlFunction("DET", false, null);
                                    this.addImlFunction("DIAG", false, null);
                                    this.addImlFunction("DIF", false, null);
                                    this.addImlFunction("DIMENSION", false, null);
                                    this.addImlFunction("DISTANCE", false, null);
                                    this.addImlFunction("DO", false, null);
                                    this.addImlFunction("DURATION", false, null);
                                    this.addImlFunction("ECHELON", false, null);
                                    this.addImlFunction("EIGVAL", false, null);
                                    this.addImlFunction("EIGVEC", false, null);
                                    this.addImlFunction("ELEMENT", false, null);
                                    this.addImlFunction("FFT", false, null);
                                    this.addImlFunction("FORWARD", false, null);
                                    this.addImlFunction("FROOT", false, null);
                                    this.addImlFunction("FULL", false, null);
                                    this.addImlFunction("GEOMEAN", false, null);
                                    this.addImlFunction("GINV", false, null);
                                    this.addImlFunction("HANKEL", false, null);
                                    this.addImlFunction("HARMEAN", false, null);
                                    this.addImlFunction("HDIR", false, null);
                                    this.addImlFunction("HERMITE", false, null);
                                    this.addImlFunction("HOMOGEN", false, null);
                                    this.addImlFunction("I", false, null);
                                    this.addImlFunction("IFFT", false, null);
                                    this.addImlFunction("INSERT", false, null);
                                    this.addImlFunction("INT", false, null);
                                    this.addImlFunction("INV", false, null);
                                    this.addImlFunction("INVUPDT", false, null);
                                    this.addImlFunction("ISEMPTY", false, null);
                                    this.addImlFunction("ISSKIPPED", false, null);
                                    this.addImlFunction("J", false, null);
                                    this.addImlFunction("LAG", false, null);
                                    this.addImlFunction("LENGTH", false, null);
                                    this.addImlFunction("LOC", false, null);
                                    this.addImlFunction("LOGABSDET", false, null);
                                    this.addImlFunction("MAD", false, null);
                                    this.addImlFunction("MAGIC", false, null);
                                    this.addImlFunction("MAHALANOBIS", false, null);
                                    this.addImlFunction("MAX", false, null);
                                    this.addImlFunction("MEAN", false, null);
                                    this.addImlFunction("MIN", false, null);
                                    this.addImlFunction("MOD", false, null);
                                    this.addImlFunction("NAME", false, null);
                                    this.addImlFunction("NCOL", false, null);
                                    this.addImlFunction("NLENG", false, null);
                                    this.addImlFunction("NORM", false, null);
                                    this.addImlFunction("NORMAL", false, null);
                                    this.addImlFunction("NROW", false, null);
                                    this.addImlFunction("NUM", false, null);
                                    this.addImlFunction("ORPOL", false, null);
                                    this.addImlFunction("POLYROOT", false, null);
                                    this.addImlFunction("PROD", false, null);
                                    this.addImlFunction("PRODUCT", false, null);
                                    this.addImlFunction("PV", false, null);
                                    this.addImlFunction("RANCOMB", false, null);
                                    this.addImlFunction("RANGE", false, null);
                                    this.addImlFunction("RANK", false, null);
                                    this.addImlFunction("RANKTIE", false, null);
                                    this.addImlFunction("RANPERK", false, null);
                                    this.addImlFunction("RANPERM", false, null);
                                    this.addImlFunction("RATES", false, null);
                                    this.addImlFunction("REMOVE", false, null);
                                    this.addImlFunction("REPEAT", false, null);
                                    this.addImlFunction("ROOT", false, null);
                                    this.addImlFunction("ROW", false, null);
                                    this.addImlFunction("ROWCAT", false, null);
                                    this.addImlFunction("ROWCATC", false, null);
                                    this.addImlFunction("SETDIF", false, null);
                                    this.addImlFunction("SHAPE", false, null);
                                    this.addImlFunction("SHAPECOL", false, null);
                                    this.addImlFunction("SOLVE", false, null);
                                    this.addImlFunction("SPARSE", false, null);
                                    this.addImlFunction("SPLINEV", false, null);
                                    this.addImlFunction("SPOT", false, null);
                                    this.addImlFunction("SQRSYM", false, null);
                                    this.addImlFunction("SQRVECH", false, null);
                                    this.addImlFunction("SSQ", false, null);
                                    this.addImlFunction("STD", false, null);
                                    this.addImlFunction("STORAGE", false, null);
                                    this.addImlFunction("SUM", false, null);
                                    this.addImlFunction("SWEEP", false, null);
                                    this.addImlFunction("SYMSQR", false, null);
                                    this.addImlFunction("T", false, null);
                                    this.addImlFunction("TOEPLITZ", false, null);
                                    this.addImlFunction("TRACE", false, null);
                                    this.addImlFunction("TRISOLV", false, null);
                                    this.addImlFunction("TYPE", false, null);
                                    this.addImlFunction("UNIFORM", false, null);
                                    this.addImlFunction("UNIQUE", false, null);
                                    this.addImlFunction("VALUE", false, null);
                                    this.addImlFunction("VAR", false, null);
                                    this.addImlFunction("VECDIAG", false, null);
                                    this.addImlFunction("VECH", false, null);
                                    this.addImlFunction("XMULT", false, null);
                                    this.addImlFunction("XSECT", false, null);
                                    this.addImlFunction("YIELD", false, null);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createCallRoutines = function () {
                                    this.addCallRoutine("ADDMATRIX", false, null);
                                    this.addCallRoutine("AES256DEC", false, null);
                                    this.addCallRoutine("AES256DECV", false, null);
                                    this.addCallRoutine("AES256ENC", false, null);
                                    this.addCallRoutine("AES256ENCV", false, null);
                                    this.addCallRoutine("ALLPERM", false, null);
                                    this.addCallRoutine("CATS", false, null);
                                    this.addCallRoutine("CATT", false, null);
                                    this.addCallRoutine("CATX", false, null);
                                    this.addCallRoutine("CEE3DMP", false, [AbstractSasLanguageSupport_Lua.Platform.zos]);
                                    this.addCallRoutine("CLOSE", false, null);
                                    this.addCallRoutine("CLRFLD", true, null);
                                    this.addCallRoutine("COMPCOST", false, null);
                                    this.addCallRoutine("DECISIONFOREST_CLOSE", false, null);
                                    this.addCallRoutine("DECISIONFOREST_DESCRIBE", false, null);
                                    this.addCallRoutine("DECISIONFOREST_PREDICTC", false, null);
                                    this.addCallRoutine("DF_CLOSE", false, null);
                                    this.addCallRoutine("DF_DESCRIBE", false, null);
                                    this.addCallRoutine("DF_PREDICT", false, null);
                                    this.addCallRoutine("DISPLAY", true, null);
                                    this.addCallRoutine("DYNAMIC_ARRAY", false, null);
                                    this.addCallRoutine("ELEMMULT", false, null);
                                    this.addCallRoutine("ENDBLOCK", true, null);
                                    this.addCallRoutine("ENDTABLE", true, null);
                                    this.addCallRoutine("EXECCMD", true, null);
                                    this.addCallRoutine("EXECCMDI", true, null);
                                    this.addCallRoutine("EXECUTE", false, null);
                                    this.addCallRoutine("FILLMATRIX", false, null);
                                    this.addCallRoutine("FSEDIT", true, null);
                                    this.addCallRoutine("FSVIEW", true, null);
                                    this.addCallRoutine("GOTO", true, null);
                                    this.addCallRoutine("IDENTITY", false, null);
                                    this.addCallRoutine("IS8601_CONVERT", false, null);
                                    this.addCallRoutine("ISPEXEC", false, [AbstractSasLanguageSupport_Lua.Platform.zos]);
                                    this.addCallRoutine("ISPLINK", false, [AbstractSasLanguageSupport_Lua.Platform.zos]);
                                    this.addCallRoutine("LABEL", false, null);
                                    this.addCallRoutine("LISTPROF", false, null);
                                    this.addCallRoutine("LOGISTIC", false, null);
                                    this.addCallRoutine("MISSING", false, null);
                                    this.addCallRoutine("MODULE", false, null);
                                    this.addCallRoutine("MULT", false, null);
                                    this.addCallRoutine("NEXTCMD", true, null);
                                    this.addCallRoutine("NEXTWORD", true, null);
                                    this.addCallRoutine("NOCHANGE", true, null);
                                    this.addCallRoutine("POKE", false, null);
                                    this.addCallRoutine("POKELONG", false, null);
                                    this.addCallRoutine("POWER", false, null);
                                    this.addCallRoutine("PRXCHANGE", false, null);
                                    this.addCallRoutine("PRXDEBUG", false, null);
                                    this.addCallRoutine("PRXFREE", false, null);
                                    this.addCallRoutine("PRXNEXT", false, null);
                                    this.addCallRoutine("PRXPOSN", false, null);
                                    this.addCallRoutine("PRXSUBSTR", false, null);
                                    this.addCallRoutine("PUTLIST", false, null);
                                    this.addCallRoutine("PUTLOG", false, null);
                                    this.addCallRoutine("PUTVARC", true, null);
                                    this.addCallRoutine("PUTVARN", true, null);
                                    this.addCallRoutine("RANBIN", false, null);
                                    this.addCallRoutine("RANCAU", false, null);
                                    this.addCallRoutine("RANDTEXT", false, null);
                                    this.addCallRoutine("RANEXP", false, null);
                                    this.addCallRoutine("RANGAM", false, null);
                                    this.addCallRoutine("RANNOR", false, null);
                                    this.addCallRoutine("RANPERK", false, null);
                                    this.addCallRoutine("RANPERM", false, null);
                                    this.addCallRoutine("RANPOI", false, null);
                                    this.addCallRoutine("RANTBL", false, null);
                                    this.addCallRoutine("RANTRI", false, null);
                                    this.addCallRoutine("RANUNI", false, null);
                                    this.addCallRoutine("SCAN", false, null);
                                    this.addCallRoutine("SCANQ", false, null);
                                    this.addCallRoutine("SET", false, null);
                                    this.addCallRoutine("SET", false, null);
                                    this.addCallRoutine("SET", true, null);
                                    this.addCallRoutine("SETFKEY", true, null);
                                    this.addCallRoutine("SETFLD", true, null);
                                    this.addCallRoutine("SETROW", true, null);
                                    this.addCallRoutine("SLEEP", false, null);
                                    this.addCallRoutine("SORTC", false, null);
                                    this.addCallRoutine("SORTN", false, null);
                                    this.addCallRoutine("SOUND", false, [AbstractSasLanguageSupport_Lua.Platform.win_x86, AbstractSasLanguageSupport_Lua.Platform.win_x64]);
                                    this.addCallRoutine("STREAMINIT", false, null);
                                    this.addCallRoutine("SUBTRACTMATRIX", false, null);
                                    this.addCallRoutine("SYMDEL", false, null);
                                    this.addCallRoutine("SYMPUT", false, null);
                                    this.addCallRoutine("SYMPUTN", false, null);
                                    this.addCallRoutine("SYMPUTX", false, null);
                                    this.addCallRoutine("SYSTEM", false, null);
                                    this.addCallRoutine("TANH", false, null);
                                    this.addCallRoutine("TOPROW", true, null);
                                    this.addCallRoutine("TRANSPOSE", false, null);
                                    this.addCallRoutine("VNAME", false, null);
                                    this.addCallRoutine("VNEXT", false, null);
                                    this.addCallRoutine("WAIT", false, null);
                                    this.addCallRoutine("WAIT", false, null);
                                    this.addCallRoutine("WNAME", true, null);
                                    this.addCallRoutine("WPSTRACE", false, null);
                                    this.addCallRoutine("ZEROMATRIX", false, null);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createImlCallRoutines = function () {
                                    this.addImlCallRoutine("__WPS__SHOWMODULESOURCE", false, null);
                                    this.addImlCallRoutine("ARMACOV", false, null);
                                    this.addImlCallRoutine("ARMALIK", false, null);
                                    this.addImlCallRoutine("CHANGE", false, null);
                                    this.addImlCallRoutine("DELETE", false, null);
                                    this.addImlCallRoutine("EIGEN", false, null);
                                    this.addImlCallRoutine("EXECUTE", false, null);
                                    this.addImlCallRoutine("EXECUTEFILE", false, null);
                                    this.addImlCallRoutine("EXPORTDATASETTOR", false, null);
                                    this.addImlCallRoutine("EXPORTMATRIXTOR", false, null);
                                    this.addImlCallRoutine("FARMACOV", false, null);
                                    this.addImlCallRoutine("FARMAFIT", false, null);
                                    this.addImlCallRoutine("FARMALIK", false, null);
                                    this.addImlCallRoutine("FARMASIM", false, null);
                                    this.addImlCallRoutine("FDIF", false, null);
                                    this.addImlCallRoutine("GSORTH", false, null);
                                    this.addImlCallRoutine("IMPORTDATASETFROMR", false, null);
                                    this.addImlCallRoutine("IMPORTMATRIXFROMR", false, null);
                                    this.addImlCallRoutine("KALCVF", false, null);
                                    this.addImlCallRoutine("KALCVS", false, null);
                                    this.addImlCallRoutine("KALDFF", false, null);
                                    this.addImlCallRoutine("KALDFS", false, null);
                                    this.addImlCallRoutine("LCP", false, null);
                                    this.addImlCallRoutine("NLPCG", false, null);
                                    this.addImlCallRoutine("NLPFDD", false, null);
                                    this.addImlCallRoutine("NLPFEA", false, null);
                                    this.addImlCallRoutine("NLPNMS", false, null);
                                    this.addImlCallRoutine("NLPNRA", false, null);
                                    this.addImlCallRoutine("NLPQN", false, null);
                                    this.addImlCallRoutine("PGRAF", false, null);
                                    this.addImlCallRoutine("PUSH", false, null);
                                    this.addImlCallRoutine("QNTL", false, null);
                                    this.addImlCallRoutine("QUAD", false, null);
                                    this.addImlCallRoutine("QUEUE", false, null);
                                    this.addImlCallRoutine("RANDSEED", false, null);
                                    this.addImlCallRoutine("RENAME", false, null);
                                    this.addImlCallRoutine("SORT", false, null);
                                    this.addImlCallRoutine("SPLINE", false, null);
                                    this.addImlCallRoutine("SPLINEC", false, null);
                                    this.addImlCallRoutine("STL", false, null);
                                    this.addImlCallRoutine("SVD", false, null);
                                    this.addImlCallRoutine("TABULATE", false, null);
                                    this.addImlCallRoutine("TSBAYSEA", false, null);
                                    this.addImlCallRoutine("TSDECOMP", false, null);
                                    this.addImlCallRoutine("TSMLOCAR", false, null);
                                    this.addImlCallRoutine("TSMLOMAR", false, null);
                                    this.addImlCallRoutine("TSMULMAR", false, null);
                                    this.addImlCallRoutine("TSPEARS", false, null);
                                    this.addImlCallRoutine("TSPRED", false, null);
                                    this.addImlCallRoutine("TSROOT", false, null);
                                    this.addImlCallRoutine("TSTVCAR", false, null);
                                    this.addImlCallRoutine("TSUNIMAR", false, null);
                                    this.addImlCallRoutine("VALSET", false, null);
                                    this.addImlCallRoutine("VNORMAL", false, null);
                                    this.addImlCallRoutine("WAVFT", false, null);
                                    this.addImlCallRoutine("WAVGET", false, null);
                                    this.addImlCallRoutine("WAVIFT", false, null);
                                    this.addImlCallRoutine("WAVPRINT", false, null);
                                    this.addImlCallRoutine("WAVTHRSH", false, null);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createFormats = function () {
                                    this.addFormat("$", null, null);
                                    this.addFormat("$ASCII", null, null);
                                    this.addFormat("$BASE64X", null, null);
                                    this.addFormat("$BIDI", null, null);
                                    this.addFormat("$BINARY", null, null);
                                    this.addFormat("$BYVAL", null, null);
                                    this.addFormat("$CSTR", null, null);
                                    this.addFormat("$EBCDIC", null, null);
                                    this.addFormat("$F", ["$CHAR", "$VARYING"], null);
                                    this.addFormat("$HEX", null, null);
                                    this.addFormat("$LOGVS", null, null);
                                    this.addFormat("$LOGVSR", null, null);
                                    this.addFormat("$MSGCASE", null, null);
                                    this.addFormat("$N8601B", null, null);
                                    this.addFormat("$N8601BA", null, null);
                                    this.addFormat("$N8601E", null, null);
                                    this.addFormat("$N8601EA", null, null);
                                    this.addFormat("$N8601EH", null, null);
                                    this.addFormat("$N8601EX", null, null);
                                    this.addFormat("$N8601H", null, null);
                                    this.addFormat("$N8601X", null, null);
                                    this.addFormat("$OCTAL", null, null);
                                    this.addFormat("$QUOTE", null, null);
                                    this.addFormat("$REVERJ", null, null);
                                    this.addFormat("$REVERS", null, null);
                                    this.addFormat("$UCS2B", null, null);
                                    this.addFormat("$UCS2BE", null, null);
                                    this.addFormat("$UCS2L", null, null);
                                    this.addFormat("$UCS2LE", null, null);
                                    this.addFormat("$UCS2X", null, null);
                                    this.addFormat("$UCS2XE", null, null);
                                    this.addFormat("$UCS4B", null, null);
                                    this.addFormat("$UCS4BE", null, null);
                                    this.addFormat("$UCS4L", null, null);
                                    this.addFormat("$UCS4LE", null, null);
                                    this.addFormat("$UCS4X", null, null);
                                    this.addFormat("$UCS4XE", null, null);
                                    this.addFormat("$UESC", null, null);
                                    this.addFormat("$UESCE", null, null);
                                    this.addFormat("$UNCR", null, null);
                                    this.addFormat("$UNCRE", null, null);
                                    this.addFormat("$UPAREN", null, null);
                                    this.addFormat("$UPARENE", null, null);
                                    this.addFormat("$UPCASE", null, null);
                                    this.addFormat("$UTF8X", null, null);
                                    this.addFormat("$UTF8XE", null, null);
                                    this.addFormat("$VSLOG", null, null);
                                    this.addFormat("$VSLOGR", null, null);
                                    this.addFormat("_", null, null);
                                    this.addFormat("AFRDFDD", null, null);
                                    this.addFormat("AFRDFDE", null, null);
                                    this.addFormat("AFRDFDN", null, null);
                                    this.addFormat("AFRDFDT", null, null);
                                    this.addFormat("AFRDFDWN", null, null);
                                    this.addFormat("AFRDFMN", null, null);
                                    this.addFormat("AFRDFMY", null, null);
                                    this.addFormat("AFRDFWDX", null, null);
                                    this.addFormat("AFRDFWKX", null, null);
                                    this.addFormat("B8601DA", null, null);
                                    this.addFormat("B8601DN", null, null);
                                    this.addFormat("B8601DT", null, null);
                                    this.addFormat("B8601DZ", null, null);
                                    this.addFormat("B8601LZ", null, null);
                                    this.addFormat("B8601TM", null, null);
                                    this.addFormat("B8601TZ", null, null);
                                    this.addFormat("BEST", null, null);
                                    this.addFormat("BESTX", null, null);
                                    this.addFormat("BINARY", null, null);
                                    this.addFormat("BITCOIN", null, null);
                                    this.addFormat("BITCOINX", null, null);
                                    this.addFormat("CATDFDD", null, null);
                                    this.addFormat("CATDFDE", null, null);
                                    this.addFormat("CATDFDN", null, null);
                                    this.addFormat("CATDFDT", null, null);
                                    this.addFormat("CATDFDWN", null, null);
                                    this.addFormat("CATDFMN", null, null);
                                    this.addFormat("CATDFMY", null, null);
                                    this.addFormat("CATDFWDX", null, null);
                                    this.addFormat("CATDFWKX", null, null);
                                    this.addFormat("COMMA", null, null);
                                    this.addFormat("COMMAX", null, null);
                                    this.addFormat("CRODFDD", null, null);
                                    this.addFormat("CRODFDE", null, null);
                                    this.addFormat("CRODFDN", null, null);
                                    this.addFormat("CRODFDT", null, null);
                                    this.addFormat("CRODFDWN", null, null);
                                    this.addFormat("CRODFMN", null, null);
                                    this.addFormat("CRODFMY", null, null);
                                    this.addFormat("CRODFWDX", null, null);
                                    this.addFormat("CRODFWKX", null, null);
                                    this.addFormat("CSYDFDD", null, null);
                                    this.addFormat("CSYDFDE", null, null);
                                    this.addFormat("CSYDFDN", null, null);
                                    this.addFormat("CSYDFDT", null, null);
                                    this.addFormat("CSYDFDWN", null, null);
                                    this.addFormat("CSYDFMN", null, null);
                                    this.addFormat("CSYDFMY", null, null);
                                    this.addFormat("CSYDFWDX", null, null);
                                    this.addFormat("CSYDFWKX", null, null);
                                    this.addFormat("D", null, null);
                                    this.addFormat("DANDFDD", null, null);
                                    this.addFormat("DANDFDE", null, null);
                                    this.addFormat("DANDFDN", null, null);
                                    this.addFormat("DANDFDT", null, null);
                                    this.addFormat("DANDFDWN", null, null);
                                    this.addFormat("DANDFMN", null, null);
                                    this.addFormat("DANDFMY", null, null);
                                    this.addFormat("DANDFWDX", null, null);
                                    this.addFormat("DANDFWKX", null, null);
                                    this.addFormat("DATE", null, null);
                                    this.addFormat("DATEAMPM", null, null);
                                    this.addFormat("DATETIME", null, null);
                                    this.addFormat("DAY", null, null);
                                    this.addFormat("DDMMYY", null, null);
                                    this.addFormat("DDMMYYB", null, null);
                                    this.addFormat("DDMMYYC", null, null);
                                    this.addFormat("DDMMYYD", null, null);
                                    this.addFormat("DDMMYYN", null, null);
                                    this.addFormat("DDMMYYP", null, null);
                                    this.addFormat("DDMMYYS", null, null);
                                    this.addFormat("DESDFDD", null, null);
                                    this.addFormat("DESDFDE", null, null);
                                    this.addFormat("DESDFDN", null, null);
                                    this.addFormat("DESDFDT", null, null);
                                    this.addFormat("DESDFDWN", null, null);
                                    this.addFormat("DESDFMN", null, null);
                                    this.addFormat("DESDFMY", null, null);
                                    this.addFormat("DESDFWDX", null, null);
                                    this.addFormat("DESDFWKX", null, null);
                                    this.addFormat("DEUDFDD", null, null);
                                    this.addFormat("DEUDFDE", null, null);
                                    this.addFormat("DEUDFDN", null, null);
                                    this.addFormat("DEUDFDT", null, null);
                                    this.addFormat("DEUDFDWN", null, null);
                                    this.addFormat("DEUDFMN", null, null);
                                    this.addFormat("DEUDFMY", null, null);
                                    this.addFormat("DEUDFWDX", null, null);
                                    this.addFormat("DEUDFWKX", null, null);
                                    this.addFormat("DMYAMPM", null, null);
                                    this.addFormat("DOLLAR", null, null);
                                    this.addFormat("DOLLARX", null, null);
                                    this.addFormat("DOWNAME", null, null);
                                    this.addFormat("DTDATE", null, null);
                                    this.addFormat("DTMONYY", null, null);
                                    this.addFormat("DTWKDATX", null, null);
                                    this.addFormat("DTYEAR", null, null);
                                    this.addFormat("DTYYQC", null, null);
                                    this.addFormat("E", null, null);
                                    this.addFormat("E8601DA", ["IS8601DA"], null);
                                    this.addFormat("E8601DN", ["IS8601DN"], null);
                                    this.addFormat("E8601DT", ["IS8601DT"], null);
                                    this.addFormat("E8601DZ", ["IS8601DZ"], null);
                                    this.addFormat("E8601LZ", ["IS8601LZ"], null);
                                    this.addFormat("E8601TM", ["IS8601TM"], null);
                                    this.addFormat("E8601TZ", ["IS8601TZ"], null);
                                    this.addFormat("ENGDFDD", null, null);
                                    this.addFormat("ENGDFDE", null, null);
                                    this.addFormat("ENGDFDN", null, null);
                                    this.addFormat("ENGDFDT", null, null);
                                    this.addFormat("ENGDFDWN", null, null);
                                    this.addFormat("ENGDFMN", null, null);
                                    this.addFormat("ENGDFMY", null, null);
                                    this.addFormat("ENGDFWDX", null, null);
                                    this.addFormat("ENGDFWKX", null, null);
                                    this.addFormat("ESPDFDD", null, null);
                                    this.addFormat("ESPDFDE", null, null);
                                    this.addFormat("ESPDFDN", null, null);
                                    this.addFormat("ESPDFDT", null, null);
                                    this.addFormat("ESPDFDWN", null, null);
                                    this.addFormat("ESPDFMN", null, null);
                                    this.addFormat("ESPDFMY", null, null);
                                    this.addFormat("ESPDFWDX", null, null);
                                    this.addFormat("ESPDFWKX", null, null);
                                    this.addFormat("EURDFDD", null, null);
                                    this.addFormat("EURDFDE", null, null);
                                    this.addFormat("EURDFDN", null, null);
                                    this.addFormat("EURDFDT", null, null);
                                    this.addFormat("EURDFDWN", null, null);
                                    this.addFormat("EURDFMN", null, null);
                                    this.addFormat("EURDFMY", null, null);
                                    this.addFormat("EURDFWDX", null, null);
                                    this.addFormat("EURDFWKX", null, null);
                                    this.addFormat("EURO", null, null);
                                    this.addFormat("EUROX", null, null);
                                    this.addFormat("F", null, null);
                                    this.addFormat("FINDFDD", null, null);
                                    this.addFormat("FINDFDE", null, null);
                                    this.addFormat("FINDFDN", null, null);
                                    this.addFormat("FINDFDT", null, null);
                                    this.addFormat("FINDFDWN", null, null);
                                    this.addFormat("FINDFMN", null, null);
                                    this.addFormat("FINDFMY", null, null);
                                    this.addFormat("FINDFWDX", null, null);
                                    this.addFormat("FINDFWKX", null, null);
                                    this.addFormat("FLOAT", null, null);
                                    this.addFormat("FRACT", null, null);
                                    this.addFormat("FRADFDD", null, null);
                                    this.addFormat("FRADFDE", null, null);
                                    this.addFormat("FRADFDN", null, null);
                                    this.addFormat("FRADFDT", null, null);
                                    this.addFormat("FRADFDWN", null, null);
                                    this.addFormat("FRADFMN", null, null);
                                    this.addFormat("FRADFMY", null, null);
                                    this.addFormat("FRADFWDX", null, null);
                                    this.addFormat("FRADFWKX", null, null);
                                    this.addFormat("FRSDFDD", null, null);
                                    this.addFormat("FRSDFDE", null, null);
                                    this.addFormat("FRSDFDN", null, null);
                                    this.addFormat("FRSDFDT", null, null);
                                    this.addFormat("FRSDFDWN", null, null);
                                    this.addFormat("FRSDFMN", null, null);
                                    this.addFormat("FRSDFMY", null, null);
                                    this.addFormat("FRSDFWDX", null, null);
                                    this.addFormat("FRSDFWKX", null, null);
                                    this.addFormat("HDATE", null, null);
                                    this.addFormat("HEBDATE", null, null);
                                    this.addFormat("HEX", null, null);
                                    this.addFormat("HHMM", null, null);
                                    this.addFormat("HOUR", null, null);
                                    this.addFormat("HUNDFDD", null, null);
                                    this.addFormat("HUNDFDE", null, null);
                                    this.addFormat("HUNDFDN", null, null);
                                    this.addFormat("HUNDFDT", null, null);
                                    this.addFormat("HUNDFDWN", null, null);
                                    this.addFormat("HUNDFMN", null, null);
                                    this.addFormat("HUNDFMY", null, null);
                                    this.addFormat("HUNDFWDX", null, null);
                                    this.addFormat("HUNDFWKX", null, null);
                                    this.addFormat("IB", null, null);
                                    this.addFormat("IBR", null, null);
                                    this.addFormat("IEEE", null, null);
                                    this.addFormat("ITADFDD", null, null);
                                    this.addFormat("ITADFDE", null, null);
                                    this.addFormat("ITADFDN", null, null);
                                    this.addFormat("ITADFDT", null, null);
                                    this.addFormat("ITADFDWN", null, null);
                                    this.addFormat("ITADFMN", null, null);
                                    this.addFormat("ITADFMY", null, null);
                                    this.addFormat("ITADFWDX", null, null);
                                    this.addFormat("ITADFWKX", null, null);
                                    this.addFormat("JULDAY", null, null);
                                    this.addFormat("JULIAN", ["JULDATE"], null);
                                    this.addFormat("MACDFDD", null, null);
                                    this.addFormat("MACDFDE", null, null);
                                    this.addFormat("MACDFDN", null, null);
                                    this.addFormat("MACDFDT", null, null);
                                    this.addFormat("MACDFDWN", null, null);
                                    this.addFormat("MACDFMN", null, null);
                                    this.addFormat("MACDFMY", null, null);
                                    this.addFormat("MACDFWDX", null, null);
                                    this.addFormat("MACDFWKX", null, null);
                                    this.addFormat("MDYAMPM", null, null);
                                    this.addFormat("MINGUO", null, null);
                                    this.addFormat("MMDDYY", null, null);
                                    this.addFormat("MMDDYYB", null, null);
                                    this.addFormat("MMDDYYC", null, null);
                                    this.addFormat("MMDDYYD", null, null);
                                    this.addFormat("MMDDYYN", null, null);
                                    this.addFormat("MMDDYYP", null, null);
                                    this.addFormat("MMDDYYS", null, null);
                                    this.addFormat("MMSS", null, null);
                                    this.addFormat("MMYY", null, null);
                                    this.addFormat("MMYYC", null, null);
                                    this.addFormat("MMYYD", null, null);
                                    this.addFormat("MMYYN", null, null);
                                    this.addFormat("MMYYP", null, null);
                                    this.addFormat("MMYYS", null, null);
                                    this.addFormat("MONDYTM", null, null);
                                    this.addFormat("MONNAME", null, null);
                                    this.addFormat("MONTH", null, null);
                                    this.addFormat("MONYY", null, null);
                                    this.addFormat("NEGPAREN", null, null);
                                    this.addFormat("NENGO", null, null);
                                    this.addFormat("NLBEST", null, null);
                                    this.addFormat("NLDATE", null, null);
                                    this.addFormat("NLDATEMD", null, null);
                                    this.addFormat("NLDATEMN", null, null);
                                    this.addFormat("NLDATEW", null, null);
                                    this.addFormat("NLDATEWN", null, null);
                                    this.addFormat("NLDATEYM", null, null);
                                    this.addFormat("NLDATEYR", null, null);
                                    this.addFormat("NLDATM", null, null);
                                    this.addFormat("NLDATMAP", null, null);
                                    this.addFormat("NLDATMDT", null, null);
                                    this.addFormat("NLDATMMD", null, null);
                                    this.addFormat("NLDATMMN", null, null);
                                    this.addFormat("NLDATMTM", null, null);
                                    this.addFormat("NLDATMTZ", null, null);
                                    this.addFormat("NLDATMW", null, null);
                                    this.addFormat("NLDATMWZ", null, null);
                                    this.addFormat("NLDATMYM", null, null);
                                    this.addFormat("NLDATMYR", null, null);
                                    this.addFormat("NLDATMZ", null, null);
                                    this.addFormat("NLDDFDD", null, null);
                                    this.addFormat("NLDDFDE", null, null);
                                    this.addFormat("NLDDFDN", null, null);
                                    this.addFormat("NLDDFDT", null, null);
                                    this.addFormat("NLDDFDWN", null, null);
                                    this.addFormat("NLDDFMN", null, null);
                                    this.addFormat("NLDDFMY", null, null);
                                    this.addFormat("NLDDFWDX", null, null);
                                    this.addFormat("NLDDFWKX", null, null);
                                    this.addFormat("NLMNIAED", null, null);
                                    this.addFormat("NLMNIAUD", null, null);
                                    this.addFormat("NLMNIBGN", null, null);
                                    this.addFormat("NLMNIBRL", null, null);
                                    this.addFormat("NLMNICAD", null, null);
                                    this.addFormat("NLMNICHF", null, null);
                                    this.addFormat("NLMNICNY", null, null);
                                    this.addFormat("NLMNICZK", null, null);
                                    this.addFormat("NLMNIDKK", null, null);
                                    this.addFormat("NLMNIEGP", null, null);
                                    this.addFormat("NLMNIEUR", null, null);
                                    this.addFormat("NLMNIGBP", null, null);
                                    this.addFormat("NLMNIHKD", null, null);
                                    this.addFormat("NLMNIHRK", null, null);
                                    this.addFormat("NLMNIHUF", null, null);
                                    this.addFormat("NLMNIIDR", null, null);
                                    this.addFormat("NLMNIILS", null, null);
                                    this.addFormat("NLMNIINR", null, null);
                                    this.addFormat("NLMNIJPY", null, null);
                                    this.addFormat("NLMNIKRW", null, null);
                                    this.addFormat("NLMNILTL", null, null);
                                    this.addFormat("NLMNILVL", null, null);
                                    this.addFormat("NLMNIMOP", null, null);
                                    this.addFormat("NLMNIMXN", null, null);
                                    this.addFormat("NLMNIMYR", null, null);
                                    this.addFormat("NLMNINOK", null, null);
                                    this.addFormat("NLMNINZD", null, null);
                                    this.addFormat("NLMNIPLN", null, null);
                                    this.addFormat("NLMNIRUB", null, null);
                                    this.addFormat("NLMNISEK", null, null);
                                    this.addFormat("NLMNISGD", null, null);
                                    this.addFormat("NLMNITHB", null, null);
                                    this.addFormat("NLMNITRY", null, null);
                                    this.addFormat("NLMNITWD", null, null);
                                    this.addFormat("NLMNIUSD", null, null);
                                    this.addFormat("NLMNIZAR", null, null);
                                    this.addFormat("NLMNLAED", null, null);
                                    this.addFormat("NLMNLAUD", null, null);
                                    this.addFormat("NLMNLBGN", null, null);
                                    this.addFormat("NLMNLBRL", null, null);
                                    this.addFormat("NLMNLCAD", null, null);
                                    this.addFormat("NLMNLCHF", null, null);
                                    this.addFormat("NLMNLCNY", null, null);
                                    this.addFormat("NLMNLCZK", null, null);
                                    this.addFormat("NLMNLDKK", null, null);
                                    this.addFormat("NLMNLEGP", null, null);
                                    this.addFormat("NLMNLEUR", null, null);
                                    this.addFormat("NLMNLGBP", null, null);
                                    this.addFormat("NLMNLHKD", null, null);
                                    this.addFormat("NLMNLHRK", null, null);
                                    this.addFormat("NLMNLHUF", null, null);
                                    this.addFormat("NLMNLIDR", null, null);
                                    this.addFormat("NLMNLILS", null, null);
                                    this.addFormat("NLMNLINR", null, null);
                                    this.addFormat("NLMNLJPY", null, null);
                                    this.addFormat("NLMNLKRW", null, null);
                                    this.addFormat("NLMNLLTL", null, null);
                                    this.addFormat("NLMNLLVL", null, null);
                                    this.addFormat("NLMNLMOP", null, null);
                                    this.addFormat("NLMNLMXN", null, null);
                                    this.addFormat("NLMNLMYR", null, null);
                                    this.addFormat("NLMNLNOK", null, null);
                                    this.addFormat("NLMNLNZD", null, null);
                                    this.addFormat("NLMNLPLN", null, null);
                                    this.addFormat("NLMNLRUB", null, null);
                                    this.addFormat("NLMNLSEK", null, null);
                                    this.addFormat("NLMNLSGD", null, null);
                                    this.addFormat("NLMNLTHB", null, null);
                                    this.addFormat("NLMNLTRY", null, null);
                                    this.addFormat("NLMNLTWD", null, null);
                                    this.addFormat("NLMNLUSD", null, null);
                                    this.addFormat("NLMNLZAR", null, null);
                                    this.addFormat("NLMNY", null, null);
                                    this.addFormat("NLMNYI", null, null);
                                    this.addFormat("NLNUM", null, null);
                                    this.addFormat("NLNUMI", null, null);
                                    this.addFormat("NLPCT", null, null);
                                    this.addFormat("NLPCTI", null, null);
                                    this.addFormat("NLPCTN", null, null);
                                    this.addFormat("NLPCTP", null, null);
                                    this.addFormat("NLPVALUE", null, null);
                                    this.addFormat("NLSTRMON", null, null);
                                    this.addFormat("NLSTRQTR", null, null);
                                    this.addFormat("NLSTRWK", null, null);
                                    this.addFormat("NLTIMAP", null, null);
                                    this.addFormat("NLTIME", null, null);
                                    this.addFormat("NORDFDD", null, null);
                                    this.addFormat("NORDFDE", null, null);
                                    this.addFormat("NORDFDN", null, null);
                                    this.addFormat("NORDFDT", null, null);
                                    this.addFormat("NORDFDWN", null, null);
                                    this.addFormat("NORDFMN", null, null);
                                    this.addFormat("NORDFMY", null, null);
                                    this.addFormat("NORDFWDX", null, null);
                                    this.addFormat("NORDFWKX", null, null);
                                    this.addFormat("NUM", null, null);
                                    this.addFormat("NUMX", null, null);
                                    this.addFormat("OCTAL", null, null);
                                    this.addFormat("ODDSR", null, null);
                                    this.addFormat("PD", null, null);
                                    this.addFormat("PDJULG", null, null);
                                    this.addFormat("PDJULI", null, null);
                                    this.addFormat("PERCENT", null, null);
                                    this.addFormat("PERCENTN", null, null);
                                    this.addFormat("PIB", null, null);
                                    this.addFormat("PIBR", null, null);
                                    this.addFormat("PK", null, null);
                                    this.addFormat("POLDFDD", null, null);
                                    this.addFormat("POLDFDE", null, null);
                                    this.addFormat("POLDFDN", null, null);
                                    this.addFormat("POLDFDT", null, null);
                                    this.addFormat("POLDFDWN", null, null);
                                    this.addFormat("POLDFMN", null, null);
                                    this.addFormat("POLDFMY", null, null);
                                    this.addFormat("POLDFWDX", null, null);
                                    this.addFormat("POLDFWKX", null, null);
                                    this.addFormat("POUND", null, null);
                                    this.addFormat("POUNDX", null, null);
                                    this.addFormat("PTGDFDD", null, null);
                                    this.addFormat("PTGDFDE", null, null);
                                    this.addFormat("PTGDFDN", null, null);
                                    this.addFormat("PTGDFDT", null, null);
                                    this.addFormat("PTGDFDWN", null, null);
                                    this.addFormat("PTGDFMN", null, null);
                                    this.addFormat("PTGDFMY", null, null);
                                    this.addFormat("PTGDFWDX", null, null);
                                    this.addFormat("PTGDFWKX", null, null);
                                    this.addFormat("PVALUE", null, null);
                                    this.addFormat("PVALUEX", null, null);
                                    this.addFormat("QTR", null, null);
                                    this.addFormat("QTRR", null, null);
                                    this.addFormat("RB", null, null);
                                    this.addFormat("ROMAN", null, null);
                                    this.addFormat("RUSDFDD", null, null);
                                    this.addFormat("RUSDFDE", null, null);
                                    this.addFormat("RUSDFDN", null, null);
                                    this.addFormat("RUSDFDT", null, null);
                                    this.addFormat("RUSDFDWN", null, null);
                                    this.addFormat("RUSDFMN", null, null);
                                    this.addFormat("RUSDFMY", null, null);
                                    this.addFormat("RUSDFWDX", null, null);
                                    this.addFormat("RUSDFWKX", null, null);
                                    this.addFormat("S370FF", null, null);
                                    this.addFormat("S370FIB", null, null);
                                    this.addFormat("S370FIBU", null, null);
                                    this.addFormat("S370FPD", null, null);
                                    this.addFormat("S370FPDU", null, null);
                                    this.addFormat("S370FPIB", null, null);
                                    this.addFormat("S370FRB", null, null);
                                    this.addFormat("S370FZD", null, null);
                                    this.addFormat("S370FZDL", null, null);
                                    this.addFormat("S370FZDS", null, null);
                                    this.addFormat("S370FZDT", null, null);
                                    this.addFormat("S370FZDU", null, null);
                                    this.addFormat("SIZEK", null, null);
                                    this.addFormat("SIZEKB", null, null);
                                    this.addFormat("SIZEKMG", null, null);
                                    this.addFormat("SLODFDD", null, null);
                                    this.addFormat("SLODFDE", null, null);
                                    this.addFormat("SLODFDN", null, null);
                                    this.addFormat("SLODFDT", null, null);
                                    this.addFormat("SLODFDWN", null, null);
                                    this.addFormat("SLODFMN", null, null);
                                    this.addFormat("SLODFMY", null, null);
                                    this.addFormat("SLODFWDX", null, null);
                                    this.addFormat("SLODFWKX", null, null);
                                    this.addFormat("SSN", null, null);
                                    this.addFormat("SVEDFDD", null, null);
                                    this.addFormat("SVEDFDE", null, null);
                                    this.addFormat("SVEDFDN", null, null);
                                    this.addFormat("SVEDFDT", null, null);
                                    this.addFormat("SVEDFDWN", null, null);
                                    this.addFormat("SVEDFMN", null, null);
                                    this.addFormat("SVEDFMY", null, null);
                                    this.addFormat("SVEDFWDX", null, null);
                                    this.addFormat("SVEDFWKX", null, null);
                                    this.addFormat("TIME", null, null);
                                    this.addFormat("TIMEAMPM", null, null);
                                    this.addFormat("TOD", null, null);
                                    this.addFormat("WEEKDATE", null, null);
                                    this.addFormat("WEEKDATX", null, null);
                                    this.addFormat("WEEKDAY", null, null);
                                    this.addFormat("WEEKU", null, null);
                                    this.addFormat("WEEKV", null, null);
                                    this.addFormat("WEEKW", null, null);
                                    this.addFormat("WORDDATE", null, null);
                                    this.addFormat("WORDDATX", null, null);
                                    this.addFormat("WORDF", null, null);
                                    this.addFormat("WORDS", null, null);
                                    this.addFormat("YEAR", null, null);
                                    this.addFormat("YEN", null, null);
                                    this.addFormat("YYMM", null, null);
                                    this.addFormat("YYMMC", null, null);
                                    this.addFormat("YYMMD", null, null);
                                    this.addFormat("YYMMDD", null, null);
                                    this.addFormat("YYMMDDB", null, null);
                                    this.addFormat("YYMMDDC", null, null);
                                    this.addFormat("YYMMDDD", null, null);
                                    this.addFormat("YYMMDDN", null, null);
                                    this.addFormat("YYMMDDP", null, null);
                                    this.addFormat("YYMMDDS", null, null);
                                    this.addFormat("YYMMN", null, null);
                                    this.addFormat("YYMMP", null, null);
                                    this.addFormat("YYMMS", null, null);
                                    this.addFormat("YYMON", null, null);
                                    this.addFormat("YYQ", null, null);
                                    this.addFormat("YYQC", null, null);
                                    this.addFormat("YYQD", null, null);
                                    this.addFormat("YYQN", null, null);
                                    this.addFormat("YYQP", null, null);
                                    this.addFormat("YYQR", null, null);
                                    this.addFormat("YYQRC", null, null);
                                    this.addFormat("YYQRD", null, null);
                                    this.addFormat("YYQRN", null, null);
                                    this.addFormat("YYQRP", null, null);
                                    this.addFormat("YYQRS", null, null);
                                    this.addFormat("YYQS", null, null);
                                    this.addFormat("YYWEEKU", null, null);
                                    this.addFormat("YYWEEKV", null, null);
                                    this.addFormat("YYWEEKW", null, null);
                                    this.addFormat("Z", null, null);
                                    this.addFormat("ZD", null, null);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createInformats = function () {
                                    this.addInformat("$ASCII", null, null);
                                    this.addInformat("$BASE64X", null, null);
                                    this.addInformat("$BINARY", null, null);
                                    this.addInformat("$CHAR", null, null);
                                    this.addInformat("$CHARZB", null, null);
                                    this.addInformat("$CSTR", null, null);
                                    this.addInformat("$EBCDIC", null, null);
                                    this.addInformat("$F", ["$", "$VARYING"], null);
                                    this.addInformat("$HEX", null, null);
                                    this.addInformat("$LOGVS", null, null);
                                    this.addInformat("$LOGVSR", null, null);
                                    this.addInformat("$N8601B", null, null);
                                    this.addInformat("$N8601E", null, null);
                                    this.addInformat("$PHEX", null, null);
                                    this.addInformat("$QUOTE", null, null);
                                    this.addInformat("$REVERJ", null, null);
                                    this.addInformat("$REVERS", null, null);
                                    this.addInformat("$UCS2B", null, null);
                                    this.addInformat("$UCS2BE", null, null);
                                    this.addInformat("$UCS2L", null, null);
                                    this.addInformat("$UCS2LE", null, null);
                                    this.addInformat("$UCS2X", null, null);
                                    this.addInformat("$UCS2XE", null, null);
                                    this.addInformat("$UCS4B", null, null);
                                    this.addInformat("$UCS4L", null, null);
                                    this.addInformat("$UCS4X", null, null);
                                    this.addInformat("$UCS4XE", null, null);
                                    this.addInformat("$UESC", null, null);
                                    this.addInformat("$UESCE", null, null);
                                    this.addInformat("$UNCR", null, null);
                                    this.addInformat("$UNCRE", null, null);
                                    this.addInformat("$UPAREN", null, null);
                                    this.addInformat("$UPARENE", null, null);
                                    this.addInformat("$UPCASE", null, null);
                                    this.addInformat("$UTF8X", null, null);
                                    this.addInformat("$UTF8XE", null, null);
                                    this.addInformat("$VSLOG", null, null);
                                    this.addInformat("$VSLOGR", null, null);
                                    this.addInformat("_", ["D", "E"], null);
                                    this.addInformat("ANYDTDTE", null, null);
                                    this.addInformat("ANYDTDTM", null, null);
                                    this.addInformat("ANYDTTME", null, null);
                                    this.addInformat("B8601DA", ["ND8601DA"], null);
                                    this.addInformat("B8601DN", ["ND8601DN"], null);
                                    this.addInformat("B8601DT", ["ND8601DT"], null);
                                    this.addInformat("B8601DZ", ["ND8601DZ"], null);
                                    this.addInformat("B8601TM", ["ND8601TM"], null);
                                    this.addInformat("B8601TZ", ["B8601LZ", "ND8601LZ", "ND8601TZ"], null);
                                    this.addInformat("BEST", null, null);
                                    this.addInformat("BINARY", null, null);
                                    this.addInformat("BITCOIN", null, null);
                                    this.addInformat("BITCOINX", null, null);
                                    this.addInformat("BITS", null, null);
                                    this.addInformat("BZ", null, null);
                                    this.addInformat("CANDATE", null, null);
                                    this.addInformat("CANSTAMP", null, null);
                                    this.addInformat("CANTIME", null, null);
                                    this.addInformat("COMMA", null, null);
                                    this.addInformat("COMMAX", null, null);
                                    this.addInformat("DATE", null, null);
                                    this.addInformat("DATETIME", null, null);
                                    this.addInformat("DDMMYY", null, null);
                                    this.addInformat("DMYAMPM", null, null);
                                    this.addInformat("DOLLAR", null, null);
                                    this.addInformat("DOLLARX", null, null);
                                    this.addInformat("E8601DA", ["IS8601DA"], null);
                                    this.addInformat("E8601DN", ["IS8601DN"], null);
                                    this.addInformat("E8601DT", ["IS8601DT"], null);
                                    this.addInformat("E8601DZ", ["IS8601DZ"], null);
                                    this.addInformat("E8601TM", ["IS8601TM"], null);
                                    this.addInformat("E8601TZ", ["E8601LZ", "IS8601LZ", "IS8601TZ"], null);
                                    this.addInformat("EURO", null, null);
                                    this.addInformat("EUROX", null, null);
                                    this.addInformat("F", null, null);
                                    this.addInformat("FLOAT", null, null);
                                    this.addInformat("HEX", null, null);
                                    this.addInformat("HHMMSS", null, null);
                                    this.addInformat("IB", null, null);
                                    this.addInformat("IBR", null, null);
                                    this.addInformat("JULIAN", null, null);
                                    this.addInformat("MDYAMPM", null, null);
                                    this.addInformat("MINGUO", null, null);
                                    this.addInformat("MMDDYY", null, null);
                                    this.addInformat("MONDYTM", null, null);
                                    this.addInformat("MONYY", null, null);
                                    this.addInformat("MSEC", null, null);
                                    this.addInformat("NENGO", null, null);
                                    this.addInformat("NLDATE", null, null);
                                    this.addInformat("NLDATM", null, null);
                                    this.addInformat("NLMNIAED", null, null);
                                    this.addInformat("NLMNIAUD", null, null);
                                    this.addInformat("NLMNIBGN", null, null);
                                    this.addInformat("NLMNIBRL", null, null);
                                    this.addInformat("NLMNICAD", null, null);
                                    this.addInformat("NLMNICHF", null, null);
                                    this.addInformat("NLMNICNY", null, null);
                                    this.addInformat("NLMNICZK", null, null);
                                    this.addInformat("NLMNIDKK", null, null);
                                    this.addInformat("NLMNIEGP", null, null);
                                    this.addInformat("NLMNIEUR", null, null);
                                    this.addInformat("NLMNIGBP", null, null);
                                    this.addInformat("NLMNIHKD", null, null);
                                    this.addInformat("NLMNIHRK", null, null);
                                    this.addInformat("NLMNIHUF", null, null);
                                    this.addInformat("NLMNIIDR", null, null);
                                    this.addInformat("NLMNIILS", null, null);
                                    this.addInformat("NLMNIINR", null, null);
                                    this.addInformat("NLMNIJPY", null, null);
                                    this.addInformat("NLMNIKRW", null, null);
                                    this.addInformat("NLMNILTL", null, null);
                                    this.addInformat("NLMNILVL", null, null);
                                    this.addInformat("NLMNIMOP", null, null);
                                    this.addInformat("NLMNIMXN", null, null);
                                    this.addInformat("NLMNIMYR", null, null);
                                    this.addInformat("NLMNINOK", null, null);
                                    this.addInformat("NLMNINZD", null, null);
                                    this.addInformat("NLMNIPLN", null, null);
                                    this.addInformat("NLMNIRUB", null, null);
                                    this.addInformat("NLMNISEK", null, null);
                                    this.addInformat("NLMNISGD", null, null);
                                    this.addInformat("NLMNITHB", null, null);
                                    this.addInformat("NLMNITRY", null, null);
                                    this.addInformat("NLMNITWD", null, null);
                                    this.addInformat("NLMNIUSD", null, null);
                                    this.addInformat("NLMNIZAR", null, null);
                                    this.addInformat("NLMNLAED", null, null);
                                    this.addInformat("NLMNLAUD", null, null);
                                    this.addInformat("NLMNLBGN", null, null);
                                    this.addInformat("NLMNLBRL", null, null);
                                    this.addInformat("NLMNLCAD", null, null);
                                    this.addInformat("NLMNLCHF", null, null);
                                    this.addInformat("NLMNLCNY", null, null);
                                    this.addInformat("NLMNLCZK", null, null);
                                    this.addInformat("NLMNLDKK", null, null);
                                    this.addInformat("NLMNLEGP", null, null);
                                    this.addInformat("NLMNLEUR", null, null);
                                    this.addInformat("NLMNLGBP", null, null);
                                    this.addInformat("NLMNLHKD", null, null);
                                    this.addInformat("NLMNLHRK", null, null);
                                    this.addInformat("NLMNLHUF", null, null);
                                    this.addInformat("NLMNLIDR", null, null);
                                    this.addInformat("NLMNLILS", null, null);
                                    this.addInformat("NLMNLINR", null, null);
                                    this.addInformat("NLMNLJPY", null, null);
                                    this.addInformat("NLMNLKRW", null, null);
                                    this.addInformat("NLMNLLTL", null, null);
                                    this.addInformat("NLMNLLVL", null, null);
                                    this.addInformat("NLMNLMOP", null, null);
                                    this.addInformat("NLMNLMXN", null, null);
                                    this.addInformat("NLMNLMYR", null, null);
                                    this.addInformat("NLMNLNOK", null, null);
                                    this.addInformat("NLMNLNZD", null, null);
                                    this.addInformat("NLMNLPLN", null, null);
                                    this.addInformat("NLMNLRUB", null, null);
                                    this.addInformat("NLMNLSEK", null, null);
                                    this.addInformat("NLMNLSGD", null, null);
                                    this.addInformat("NLMNLTHB", null, null);
                                    this.addInformat("NLMNLTRY", null, null);
                                    this.addInformat("NLMNLTWD", null, null);
                                    this.addInformat("NLMNLUSD", null, null);
                                    this.addInformat("NLMNLZAR", null, null);
                                    this.addInformat("NLMNY", null, null);
                                    this.addInformat("NLMNYI", null, null);
                                    this.addInformat("NLNUM", null, null);
                                    this.addInformat("NLNUMI", null, null);
                                    this.addInformat("NLPCT", null, null);
                                    this.addInformat("NLPCTI", null, null);
                                    this.addInformat("NLTIME", null, null);
                                    this.addInformat("NUMX", null, null);
                                    this.addInformat("PD", null, null);
                                    this.addInformat("PDJULG", null, null);
                                    this.addInformat("PDJULI", null, null);
                                    this.addInformat("PDTIME", null, null);
                                    this.addInformat("PERCENT", null, null);
                                    this.addInformat("PIB", null, null);
                                    this.addInformat("PIBR", null, null);
                                    this.addInformat("PK", null, null);
                                    this.addInformat("POUND", null, null);
                                    this.addInformat("POUNDX", null, null);
                                    this.addInformat("RB", null, null);
                                    this.addInformat("RMFDUR", null, null);
                                    this.addInformat("RMFSTAMP", null, null);
                                    this.addInformat("S370FF", null, null);
                                    this.addInformat("S370FIB", null, null);
                                    this.addInformat("S370FIBU", null, null);
                                    this.addInformat("S370FPD", null, null);
                                    this.addInformat("S370FPDU", null, null);
                                    this.addInformat("S370FPIB", null, null);
                                    this.addInformat("S370FRB", null, null);
                                    this.addInformat("S370FZD", null, null);
                                    this.addInformat("S370FZDB", null, null);
                                    this.addInformat("S370FZDL", null, null);
                                    this.addInformat("S370FZDS", null, null);
                                    this.addInformat("S370FZDT", null, null);
                                    this.addInformat("S370FZDU", null, null);
                                    this.addInformat("SHRSTAMP", null, null);
                                    this.addInformat("SIZEKMG", null, null);
                                    this.addInformat("SMFSTAMP", null, null);
                                    this.addInformat("TIME", null, null);
                                    this.addInformat("TODSTAMP", null, null);
                                    this.addInformat("TRAILSGN", null, null);
                                    this.addInformat("TU", null, null);
                                    this.addInformat("YEN", null, null);
                                    this.addInformat("YMDDTTM", null, null);
                                    this.addInformat("YYMMDD", null, null);
                                    this.addInformat("YYMMN", null, null);
                                    this.addInformat("YYQ", null, null);
                                    this.addInformat("ZD", null, null);
                                    this.addInformat("ZDB", null, null);
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createComponents = function () {
                                    this.newComponentBuilder("HASH").setMethods(["_NEW_", "ADD", "CHECK", "CLEAR", "DEFINEDATA", "DEFINEDONE", "DEFINEKEY", "EQUALS", "FIND", "FIND_NEXT", "FIND_PREV", "HAS_NEXT", "HAS_PREV", "OUTPUT", "REF", "REMOVE", "REMOVEDUP", "REPLACE", "REPLACEDUP", "STATS", "SUM", "SUMDUP"]).setAttributes(["DATA_ITEM_SIZE", "DATA_LENGTH", "ITEM_SIZE", "KEY_LENGTH", "NODE_SIZE", "NUM_ITEMS"]).build();
                                    this.newComponentBuilder("HITER").setMethods(["_NEW_", "FIRST", "LAST", "NEXT", "PREV", "SUM"]).build();
                                    this.newComponentBuilder("JAVAOBJ").setMethods(["_NEW_", "CALLBOOLEANMETHOD", "CALLBYTEMETHOD", "CALLCHARMETHOD", "CALLDOUBLEMETHOD", "CALLFLOATMETHOD", "CALLINTMETHOD", "CALLLONGMETHOD", "CALLSHORTMETHOD", "CALLSTATICBOOLEANMETHOD", "CALLSTATICBYTEMETHOD", "CALLSTATICCHARMETHOD", "CALLSTATICDOUBLEMETHOD", "CALLSTATICFLOATMETHOD", "CALLSTATICINTMETHOD", "CALLSTATICLONGMETHOD", "CALLSTATICSHORTMETHOD", "CALLSTATICSTRINGMETHOD", "CALLSTATICVOIDMETHOD", "CALLSTRINGMETHOD", "CALLVOIDMETHOD", "EXCEPTIONCHECK", "EXCEPTIONCLEAR", "EXCEPTIONDESCRIBE", "FLUSHJAVAOUTPUT", "GETBOOLEANFIELD", "GETBYTEFIELD", "GETCHARFIELD", "GETDOUBLEFIELD", "GETFLOATFIELD", "GETINTFIELD", "GETLONGFIELD", "GETSHORTFIELD", "GETSTATICBOOLEANFIELD", "GETSTATICBYTEFIELD", "GETSTATICCHARFIELD", "GETSTATICDOUBLEFIELD", "GETSTATICFLOATFIELD", "GETSTATICINTFIELD", "GETSTATICLONGFIELD", "GETSTATICSHORTFIELD", "GETSTATICSTRINGFIELD", "GETSTRINGFIELD", "SETBOOLEANFIELD", "SETBYTEFIELD", "SETCHARFIELD", "SETDOUBLEFIELD", "SETFLOATFIELD", "SETINTFIELD", "SETLONGFIELD", "SETSHORTFIELD", "SETSTATICBOOLEANFIELD", "SETSTATICBYTEFIELD", "SETSTATICCHARFIELD", "SETSTATICDOUBLEFIELD", "SETSTATICFLOATFIELD", "SETSTATICINTFIELD", "SETSTATICLONGFIELD", "SETSTATICSHORTFIELD", "SETSTATICSTRINGFIELD", "SETSTRINGFIELD"]).build();
                                };
                                AbstractSasLanguageSupport_Lua.prototype.createLibraryEngines = function () {
                                    var libraryEngineBuilder;
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ACCESS");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("COMMAND_TIMEOUT", false).aliases(["TIMEOUT"]).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBPASSWORD", false).aliases(["DBPW", "DBPWD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBSYSFILE", false).aliases(["DBSYS", "WGB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INIT_STRING", false).aliases(["INIT"]).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).aliases(["DBLABEL"]).build();
                                    libraryEngineBuilder.addLibnameOption("MSENGINE", false).choices(["ACE", "JET"]).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PW", "PWD"]).build();
                                    libraryEngineBuilder.addLibnameOption("PATH", false).aliases(["DATASRC", "DS"]).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).choices(["YES", "NO", "REQUIRED", "NOPROMPT", "UDL"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCAN_TEXTSIZE", false).aliases(["SCAN_TEXT", "SCANMEMO", "SCANTEXT"]).build();
                                    libraryEngineBuilder.addLibnameOption("SCAN_TIMETYPE", false).aliases(["SCAN_TIME", "SCANTIME"]).choices(["YES", "NO", "ANY"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).aliases(["STRDATES"]).build();
                                    libraryEngineBuilder.addLibnameOption("UDL", false).aliases(["UDL_FILE"]).build();
                                    libraryEngineBuilder.addLibnameOption("USE_DATETYPE", false).aliases(["USE_DATE", "USEDATE"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID", "USERID"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ACTIANMATRIX");
                                    libraryEngineBuilder.aliases(["PARACCEL", "ACMATRIX"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("DRIVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ANGOSS");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("CVP");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPENGINE", false).aliases(["CVPENG"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("DB2");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_ALLOW_READ_ACCESS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_CPU_PARALLELISM", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATA_BUFFER_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DISK_PARALLELISM", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_INDEXING_MODE", false).choices(["AUTOSELECT", "REBUILD", "INCREMENTAL", "DEFERRED"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOAD_REPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_METHOD", false).choices(["CLILOAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_RECOVERABLE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("COMPLETE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["DYNAMIC", "FORWARD_ONLY", "KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASENAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DATABASE", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBINDEX", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBNULLKEYS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSASLABEL", false).choices(["COMPAT", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBSLICEPARM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DEFER", false).build();
                                    libraryEngineBuilder.addLibnameOption("DEGREE", false).choices(["ANY", "1"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("IN", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("LOCATION", false).build();
                                    libraryEngineBuilder.addLibnameOption("NOPROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).choices(["YES", "NO"]).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["RR", "RS", "CS", "UR", "READCOMMITTED", "COMMITTEDREAD", "UNCOMMITTEDREAD", "READUNCOMMITTED", "REPEATABLEREAD", "READSTABILITY", "CS", "UR", "RR", "RR KEEP UPDATE LOCKS", "RS", "RS KEEP UPDATE LOCKS", "NONE", "READCOMMITTED", "COMMITTEDREAD", "READUNCOMMITTED", "UNCOMMITTEDREAD", "REPEATABLEREAD", "REPEATABLEREAD KEEP UPDATE LOCKS", "READSTABILITY", "READSTABILITY KEEP UPDATE LOCKS"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK", "TABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REQUIRED", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).aliases(["AUTHID"]).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVERNAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("SSID", false).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["CS", "RS", "RR", "READCOMMITTED", "COMMITTEDREAD", "UNCOMMITTEDREAD", "READUNCOMMITTED", "REPEATABLEREAD", "CS", "UR", "RR", "RR KEEP UPDATE LOCKS", "RS", "RS KEEP UPDATE LOCKS", "NONE", "READCOMMITTED", "COMMITTEDREAD", "READUNCOMMITTED", "UNCOMMITTEDREAD", "REPEATABLEREAD", "REPEATABLEREAD KEEP UPDATE LOCKS", "READSTABILITY", "READSTABILITY KEEP UPDATE LOCKS"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK", "TABLE", "LUW"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("DB2OLD");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_ALLOW_READ_ACCESS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_CPU_PARALLELISM", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATA_BUFFER_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DISK_PARALLELISM", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_INDEXING_MODE", false).choices(["AUTOSELECT", "REBUILD", "INCREMENTAL", "DEFERRED"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOAD_REPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_METHOD", false).choices(["CLILOAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_RECOVERABLE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("COMPLETE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["DYNAMIC", "FORWARD_ONLY", "KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASENAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DATABASE", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DEGREE", false).choices(["ANY", "1"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("IN", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("LOCATION", false).build();
                                    libraryEngineBuilder.addLibnameOption("NOPROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["RR", "RS", "CS", "UR", "CS", "UR", "RR", "RR KEEP UPDATE LOCKS", "RS", "RS KEEP UPDATE LOCKS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "NOLOCK", "TABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REQUIRED", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).aliases(["AUTHID"]).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVERNAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("SSID", false).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["CS", "RS", "RR", "CS", "UR", "RR", "RR KEEP UPDATE LOCKS", "RS", "RS KEEP UPDATE LOCKS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK", "TABLE", "LUW"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("DUMMY");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("EXCEL");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("COMMAND_TIMEOUT", false).aliases(["TIMEOUT"]).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("HEADER", false).build();
                                    libraryEngineBuilder.addLibnameOption("INIT_STRING", false).aliases(["INIT"]).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).aliases(["DBLABEL"]).build();
                                    libraryEngineBuilder.addLibnameOption("MIXED", false).build();
                                    libraryEngineBuilder.addLibnameOption("MSENGINE", false).choices(["ACE", "JET"]).build();
                                    libraryEngineBuilder.addLibnameOption("PATH", false).aliases(["DATASRC", "DS"]).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).choices(["YES", "NO", "REQUIRED", "NOPROMPT", "UDL"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCAN_TEXTSIZE", false).aliases(["SCAN_TEXT", "SCANMEMO", "SCANTEXT"]).build();
                                    libraryEngineBuilder.addLibnameOption("SCAN_TIMETYPE", false).aliases(["SCAN_TIME", "SCANTIME"]).choices(["YES", "NO", "ANY"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).aliases(["STRDATES"]).build();
                                    libraryEngineBuilder.addLibnameOption("UDL", false).aliases(["UDL_FILE"]).build();
                                    libraryEngineBuilder.addLibnameOption("USE_DATETYPE", false).aliases(["USE_DATE", "USEDATE"]).build();
                                    libraryEngineBuilder.addLibnameOption("VERSION", false).aliases(["VER"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("GREENPLUM");
                                    libraryEngineBuilder.aliases(["GREENPLM"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BUFFERSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELIMITER", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_NULLSTRING", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKUNLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBINDEX", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMSTEMP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBNULLKEYS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSASLABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("HOST", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TTY", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("HADOOP");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PORT", false).aliases(["BULKLOAD_PORT"]).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONFIG", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("HDFS_TEMPDIR", false).build();
                                    libraryEngineBuilder.addLibnameOption("HIVE_PRINCIPAL", false).build();
                                    libraryEngineBuilder.addLibnameOption("JDBC_CONNECTION_STRING", false).build();
                                    libraryEngineBuilder.addLibnameOption("JDBC_DRIVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).aliases(["DATABASE", "DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SERVICE", false).choices(["HIVE", "IMPALA"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("HUB");
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("INFORMIX");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBDATASRC", false).aliases(["DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBSASLABEL", false).choices(["COMPAT", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LOCKTABLE", false).choices(["EXCLUSIVE", "SHARE"]).build();
                                    libraryEngineBuilder.addLibnameOption("LOCKTIME", false).build();
                                    libraryEngineBuilder.addLibnameOption("LOCKWAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["COMMITTED_READ", "REPEATABLE_READ", "DIRTY_READ", "CURSOR_STABILITY"]).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("USING", false).aliases(["PASSWORD", "PWD"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("JSON");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOMAP", false).choices(["CREATE/REPLACE", "REUSE"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("FILEREF", false).build();
                                    libraryEngineBuilder.addLibnameOption("MAP", false).build();
                                    libraryEngineBuilder.addLibnameOption("ORDINALCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETAIN", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("KOGNITIO");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("DRIVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("MARIADB");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BUFFERSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOCAL", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_USE_PIPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBDATETIME_TYPE", false).choices(["TIMESTAMP", "DATETIME"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("MEMORY");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLOCKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("MYSQL");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BUFFERSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOCAL", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_USE_PIPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBDATETIME_TYPE", false).choices(["TIMESTAMP", "DATETIME"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("SSL", false).build();
                                    libraryEngineBuilder.addLibnameOption("SSL_CA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SSL_CAPATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("SSL_CERT", false).build();
                                    libraryEngineBuilder.addLibnameOption("SSL_CIPHER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SSL_KEY", false).build();
                                    libraryEngineBuilder.addLibnameOption("TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("NETEZZA");
                                    libraryEngineBuilder.aliases(["NETEZZAM"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BUFFERSIZE", false).aliases(["BL_BUFFSIZE"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELIMITER", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PIPE_NAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_USE_PIPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKUNLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBNULLKEYS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DEFER", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).choices(["YES", "NO"]).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("NETEZZAOLD");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BUFFERSIZE", false).aliases(["BL_BUFFSIZE"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELIMITER", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PIPE_NAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_USE_PIPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKUNLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ODBC");
                                    libraryEngineBuilder.aliases(["ODBCM"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("COMPLETE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DATABASE", "DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBINDEX", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBNULLKEYS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSLICEPARM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("NOPROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).choices(["YES", "NO"]).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REQUIRED", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ODBCOLD");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).aliases(["BCP"]).build();
                                    libraryEngineBuilder.addLibnameOption("COMPLETE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["DYNAMIC", "FORWARD_ONLY", "KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DATABASE", "DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("KEYSET_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("NOPROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REQUIRED", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("OLEDB");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("COMMAND_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("COMPLETE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["DYNAMIC", "KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASOURCE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INIT_STRING", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("OLEDB_SERVICES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PROPERTIES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PROVIDER", false).build();
                                    libraryEngineBuilder.addLibnameOption("PROVIDER_STRING", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("REQUIRED", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("UDL", false).aliases(["UDL_FILE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ORACLE");
                                    libraryEngineBuilder.aliases(["ORACLEM"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("ADJUST_BYTE_SEMANTIC_COLUMN_LENGTHS", false).build();
                                    libraryEngineBuilder.addLibnameOption("ADJUST_NCHAR_COLUMN_LENGTHS", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BADFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_CONTROL", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATECACHE_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DEFAULT_DIR", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_DATAFILE", false).aliases(["BL_DELETE_FILES"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_ONLY_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DIRECT_PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DISCARDFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_INDEX_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOAD_METHOD", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PARFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PRESERVE_BLANKS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_RECOVERABLE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_RETURN_WARNINGS_AS_ERRORS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_SQLLDR_PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_STREAM_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_SUPPRESS_NULLIF", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_USE_SQLLDR", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DB_LENGTH_SEMANTICS_BYTE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCLIENT_MAX_BYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBINDEX", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLINK", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMSTEMP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBNULLKEYS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBPROMPT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSERVER_MAX_BYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSLICEPARM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DEFER", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("LOCKWAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["ORAPW", "PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COMMENTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).choices(["YES", "NO"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["READCOMMITTED", "SERIALIZABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).aliases(["BUFFSIZE"]).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SHOW_SYNONYMS", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["READCOMMITTED", "SERIALIZABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATEBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("ORACLEOLD");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("ADJUST_BYTE_SEMANTIC_COLUMN_LENGTHS", false).build();
                                    libraryEngineBuilder.addLibnameOption("ADJUST_NCHAR_COLUMN_LENGTHS", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BADFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_CONTROL", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATECACHE_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DEFAULT_DIR", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_ONLY_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DIRECT_PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DISCARDFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_INDEX_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOAD_METHOD", false).choices(["INSERT", "APPEND", "REPLACE", "TRUNCATE"]).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PARFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_PRESERVE_BLANKS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_RECOVERABLE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_RETURN_WARNINGS_AS_ERRORS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_SQLLDR_PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_STREAM_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_SUPPRESS_NULLIF", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_USE_SQLLDR", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DB_LENGTH_SEMANTICS_BYTE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCLIENT_MAX_BYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBINDEX", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLINK", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSERVER_MAX_BYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("LOCKWAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["ORAPW", "PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COMMENTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["READCOMMITTED", "SERIALIZABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SHOW_SYNONYMS", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["READCOMMITTED", "SERIALIZABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATEBUFF", true).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("POSTGRESQL");
                                    libraryEngineBuilder.aliases(["PGRESQL", "POSTGSQL", "POSTGRES"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BUFFERSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELIMITER", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_NULLSTRING", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKUNLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("HOST", false).aliases(["SERVER"]).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("TTY", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["USR"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SAND");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION_NAME", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("HOST", false).aliases(["SERVER"]).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC"]).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SAS7BDAT");
                                    libraryEngineBuilder.aliases(["V8", "V9"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SASDASD");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SASSEQ");
                                    libraryEngineBuilder.aliases(["SASTAPE", "V8SEQ", "V9SEQ"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("WPSSASSEQV1", true).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SASSEQLE");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("WPSSASSEQV1", true).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SD2");
                                    libraryEngineBuilder.aliases(["V6"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SPSS");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SPSSDIR");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SQLSERVER");
                                    libraryEngineBuilder.aliases(["SQLSERVR", "SQLSVR", "SQLSERVERM"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BCPEXE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BCPEXE_PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_DELETE_ONLY_DATAFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).aliases(["BCP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BULKUNLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DATABASENAME", "DB", "DBASE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBINDEX", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBNULLKEYS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBSLICEPARM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("DRIVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).aliases(["PORTNUMBER"]).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).choices(["YES", "NO"]).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SQLSERVEROLD");
                                    libraryEngineBuilder.aliases(["SQLSERVROLD", "SQLSVROLD"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BCPEXE", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_BCPEXE_PATH", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_LOG", false).build();
                                    libraryEngineBuilder.addLibnameOption("BL_OPTIONS", false).build();
                                    libraryEngineBuilder.addLibnameOption("BULKLOAD", false).aliases(["BCP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BULKUNLOAD", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("CURSOR_TYPE", false).choices(["DYNAMIC", "FORWARD_ONLY", "KEYSET_DRIVEN", "STATIC"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DATABASENAME"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("DRIVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("KEYSET_SIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).aliases(["PORTNUMBER"]).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUALIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "V"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE", "NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SYBASE");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "GLOBALREAD"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("MAX_CONNECTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("PACKETSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTED_IDENTIFIER", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["NOLOCK"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("SYBASEIQ");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("HOST", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["S", "RR", "RC", "RU"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["ROW", "TABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).aliases(["ROWSET", "ROWSET_SIZE"]).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["S", "RR", "RC"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["ROW", "TABLE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("TABLEAU");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("NOREPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("REPLACE", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("TERADATA");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("ACCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("CAST_OVERHEAD_MAXPERCENT", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("MODE", false).choices(["ANSI", "TERADATA"]).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW"]).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_BAND", false).build();
                                    libraryEngineBuilder.addLibnameOption("READ_ISOLATION_LEVEL", false).choices(["ACCESS", "READ", "WRITE"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_LOCK_TYPE", false).choices(["TABLE", "VIEW"]).build();
                                    libraryEngineBuilder.addLibnameOption("READ_MODE_WAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).aliases(["DATABASE"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("TDPID", false).aliases(["SERVER"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_ISOLATION_LEVEL", false).choices(["ACCESS", "READ", "WRITE"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_LOCK_TYPE", false).choices(["TABLE", "VIEW"]).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MODE_WAIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("VERTICA");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("AUTHDOMAIN", false).build();
                                    libraryEngineBuilder.addLibnameOption("AUTOCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("CONNECTION", false).choices(["SHAREDREAD", "UNIQUE", "SHARED", "GLOBALREAD", "GLOBAL"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATABASE", false).aliases(["DB"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATASRC", false).aliases(["DS", "DSN"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBCOMMIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONINIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCONTERM", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBCREATE_TABLE_OPTS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBGEN_NAME", false).choices(["DBMS", "SAS"]).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBINIT", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBLIBTERM", true).build();
                                    libraryEngineBuilder.addLibnameOption("DBMAX_TEXT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DBMSTEMP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DELETE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_EXE", false).choices(["DELETE"]).build();
                                    libraryEngineBuilder.addLibnameOption("DIRECT_SQL", false).build();
                                    libraryEngineBuilder.addLibnameOption("IGNORE_READ_ONLY_COLUMNS", false).build();
                                    libraryEngineBuilder.addLibnameOption("INSERTBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("PASSWORD", false).aliases(["PASS", "PW", "PWD", "USING"]).build();
                                    libraryEngineBuilder.addLibnameOption("PORT", false).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_COL_NAMES", true).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_NAMES", true).build();
                                    libraryEngineBuilder.addLibnameOption("PRESERVE_TAB_NAMES", true).build();
                                    libraryEngineBuilder.addLibnameOption("QUERY_TIMEOUT", false).build();
                                    libraryEngineBuilder.addLibnameOption("QUOTE_CHAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("READBUFF", false).build();
                                    libraryEngineBuilder.addLibnameOption("SCHEMA", false).build();
                                    libraryEngineBuilder.addLibnameOption("SERVER", false).aliases(["HOST"]).build();
                                    libraryEngineBuilder.addLibnameOption("SPOOL", false).choices(["YES", "NO", "DBMS"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQL_FUNCTIONS", false).choices(["ALL"]).build();
                                    libraryEngineBuilder.addLibnameOption("SQLGENERATION", false).choices(["DBMS", "NONE"]).build();
                                    libraryEngineBuilder.addLibnameOption("STRINGDATES", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TRACEFILE", false).build();
                                    libraryEngineBuilder.addLibnameOption("UPDATE_MULT_ROWS", false).build();
                                    libraryEngineBuilder.addLibnameOption("USE_ODBC_CL", false).build();
                                    libraryEngineBuilder.addLibnameOption("USER", false).aliases(["UID"]).build();
                                    libraryEngineBuilder.addLibnameOption("UTILCONN_TRANSIENT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("WPD");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("WPDFILE");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("WPDFILV2");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("WPDSEQ");
                                    libraryEngineBuilder.aliases(["WPSSEQ", "WPSTAPE"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("WPDSEQLE");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("WPDV2");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("XLSX");
                                    libraryEngineBuilder.aliases(["XLS"]);
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY"]).build();
                                    libraryEngineBuilder.addLibnameOption("CONSIDERXLSXCOLWIDTHS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATAROW", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATE_FORMAT", false).build();
                                    libraryEngineBuilder.addLibnameOption("DATETIME_FORMAT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HEADER", false).build();
                                    libraryEngineBuilder.addLibnameOption("HEADERROW", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("NOCONSIDERXLSXCOLWIDTHS", false).build();
                                    libraryEngineBuilder.addLibnameOption("NOREPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("REPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("TIME_FORMAT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("XML");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("FORMATACTIVE", false).build();
                                    libraryEngineBuilder.addLibnameOption("FORMATLIBRARY", false).build();
                                    libraryEngineBuilder.addLibnameOption("FORMATNOREPLACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("INDENT", false).build();
                                    libraryEngineBuilder.addLibnameOption("ODSCHARSET", false).build();
                                    libraryEngineBuilder.addLibnameOption("TAGSET", false).build();
                                    libraryEngineBuilder.addLibnameOption("XMLCONCATENATE", false).build();
                                    libraryEngineBuilder.addLibnameOption("XMLDATAFORM", false).choices(["ELEMENT", "ATTRIBUTE"]).build();
                                    libraryEngineBuilder.addLibnameOption("XMLDOUBLE", false).choices(["INTERNAL", "DISPLAY"]).build();
                                    libraryEngineBuilder.addLibnameOption("XMLENCODING", false).build();
                                    libraryEngineBuilder.addLibnameOption("XMLFILEREF", false).build();
                                    libraryEngineBuilder.addLibnameOption("XMLMAP", false).build();
                                    libraryEngineBuilder.addLibnameOption("XMLTYPE", false).choices(["GENERIC", "ORACLE", "XMLMAP", "SIMPLE", "CDISCODM"]).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("XPORT");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                    libraryEngineBuilder = this.newLibraryEngineBuilder("XPORTLE");
                                    libraryEngineBuilder.addLibnameOption("ACCESS", false).choices(["READONLY", "TEMP"]).build();
                                    libraryEngineBuilder.addLibnameOption("BLKSIZE", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPBYTES", false).build();
                                    libraryEngineBuilder.addLibnameOption("CVPMULTIPLIER", false).aliases(["CVPMULT"]).build();
                                    libraryEngineBuilder.addLibnameOption("DATACLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("DISP", false).build();
                                    libraryEngineBuilder.addLibnameOption("DSNTYPE", false).build();
                                    libraryEngineBuilder.addLibnameOption("EXPDT", false).build();
                                    libraryEngineBuilder.addLibnameOption("HFS", false).build();
                                    libraryEngineBuilder.addLibnameOption("LABEL", false).build();
                                    libraryEngineBuilder.addLibnameOption("LIKE", false).build();
                                    libraryEngineBuilder.addLibnameOption("LINEAR", false).build();
                                    libraryEngineBuilder.addLibnameOption("MGMTCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("RETPD", false).build();
                                    libraryEngineBuilder.addLibnameOption("SPACE", false).build();
                                    libraryEngineBuilder.addLibnameOption("STORCLAS", false).build();
                                    libraryEngineBuilder.addLibnameOption("UNIT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLCOUNT", false).build();
                                    libraryEngineBuilder.addLibnameOption("VOLSER", false).build();
                                    libraryEngineBuilder.addLibnameOption("WAIT", false).build();
                                    libraryEngineBuilder.build();
                                };
                                return AbstractSasLanguageSupport_Lua;
                            }());
                            sas.AbstractSasLanguageSupport_Lua = AbstractSasLanguageSupport_Lua;
                            (function (AbstractSasLanguageSupport_Lua) {
                                /**
                                 * enum of option types.
                                 */
                                var OptionType;
                                (function (OptionType) {
                                    OptionType[OptionType["KEYWORD"] = 0] = "KEYWORD";
                                    OptionType[OptionType["INT32"] = 1] = "INT32";
                                    OptionType[OptionType["INT64"] = 2] = "INT64";
                                    OptionType[OptionType["NUMERIC"] = 3] = "NUMERIC";
                                    OptionType[OptionType["NUMERIC_LIST"] = 4] = "NUMERIC_LIST";
                                    OptionType[OptionType["STRING"] = 5] = "STRING";
                                    OptionType[OptionType["ONEWORD"] = 6] = "ONEWORD";
                                    OptionType[OptionType["PASSWD"] = 7] = "PASSWD";
                                    OptionType[OptionType["CHOICE"] = 8] = "CHOICE";
                                    OptionType[OptionType["MULTI_CHOICE"] = 9] = "MULTI_CHOICE";
                                    OptionType[OptionType["CHOICE_OR_KEYWORD"] = 10] = "CHOICE_OR_KEYWORD";
                                    OptionType[OptionType["YESNO"] = 11] = "YESNO";
                                    OptionType[OptionType["YESNOTRUEFALSE"] = 12] = "YESNOTRUEFALSE";
                                    OptionType[OptionType["FILEREF"] = 13] = "FILEREF";
                                    OptionType[OptionType["GENERIC"] = 14] = "GENERIC";
                                    OptionType[OptionType["DATASET"] = 15] = "DATASET";
                                    OptionType[OptionType["LOOKUP_DATASET"] = 16] = "LOOKUP_DATASET";
                                    OptionType[OptionType["OUTPUT_DATASET"] = 17] = "OUTPUT_DATASET";
                                    OptionType[OptionType["INPUT_DATASET"] = 18] = "INPUT_DATASET";
                                    OptionType[OptionType["LIBRARY_NAME"] = 19] = "LIBRARY_NAME";
                                    OptionType[OptionType["CATALOG_NAME"] = 20] = "CATALOG_NAME";
                                    OptionType[OptionType["NAME"] = 21] = "NAME";
                                    OptionType[OptionType["NAME_LIST"] = 22] = "NAME_LIST";
                                    OptionType[OptionType["COMPOUND_NAME"] = 23] = "COMPOUND_NAME";
                                    OptionType[OptionType["FORMAT"] = 24] = "FORMAT";
                                    OptionType[OptionType["ENCODING"] = 25] = "ENCODING";
                                    OptionType[OptionType["BOOL"] = 26] = "BOOL";
                                    OptionType[OptionType["BLKSIZE"] = 27] = "BLKSIZE";
                                })(OptionType = AbstractSasLanguageSupport_Lua.OptionType || (AbstractSasLanguageSupport_Lua.OptionType = {}));
                                /**
                                 * enum of platforms.
                                 */
                                var Platform;
                                (function (Platform) {
                                    Platform[Platform["aix_powerpc"] = 0] = "aix_powerpc";
                                    Platform[Platform["linux_aarch64"] = 1] = "linux_aarch64";
                                    Platform[Platform["linux_powerpc"] = 2] = "linux_powerpc";
                                    Platform[Platform["linux_powerpcle"] = 3] = "linux_powerpcle";
                                    Platform[Platform["linux_s390"] = 4] = "linux_s390";
                                    Platform[Platform["linux_s390x"] = 5] = "linux_s390x";
                                    Platform[Platform["linux_x64"] = 6] = "linux_x64";
                                    Platform[Platform["linux_x86"] = 7] = "linux_x86";
                                    Platform[Platform["mac_x64"] = 8] = "mac_x64";
                                    Platform[Platform["solaris_sparc"] = 9] = "solaris_sparc";
                                    Platform[Platform["solaris_x64"] = 10] = "solaris_x64";
                                    Platform[Platform["solaris_x86"] = 11] = "solaris_x86";
                                    Platform[Platform["win_x64"] = 12] = "win_x64";
                                    Platform[Platform["win_x86"] = 13] = "win_x86";
                                    Platform[Platform["zos"] = 14] = "zos";
                                })(Platform = AbstractSasLanguageSupport_Lua.Platform || (AbstractSasLanguageSupport_Lua.Platform = {}));
                            })(AbstractSasLanguageSupport_Lua = sas.AbstractSasLanguageSupport_Lua || (sas.AbstractSasLanguageSupport_Lua = {}));
                        })(sas = support.sas || (support.sas = {}));
                    })(support = context_1.support || (context_1.support = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var TokenisationResult = /** @class */ (function () {
                            function TokenisationResult(tokenType, nextState) {
                                if (nextState === void 0) { nextState = null; }
                                this.nextState = nextState;
                                this.tokenType = tokenType;
                            }
                            TokenisationResult.prototype.getTokenType = function () {
                                return this.tokenType;
                            };
                            TokenisationResult.prototype.getNextState = function () {
                                return this.nextState;
                            };
                            TokenisationResult.prototype.hashCode = function () {
                                return 0;
                            };
                            TokenisationResult.prototype.equals = function (obj) {
                                if (this == obj) {
                                    return true;
                                }
                                if (obj == null) {
                                    return false;
                                }
                                var other = obj;
                                if (this.nextState == null) {
                                    if (other.nextState != null) {
                                        return false;
                                    }
                                }
                                else if (!this.nextState.equals(other.nextState)) {
                                    return false;
                                }
                                if (this.tokenType != other.tokenType) {
                                    return false;
                                }
                                return true;
                            };
                            TokenisationResult.prototype.toString = function () {
                                return "TokenisationResult [tokenType=" + this.tokenType + ", nextState=" + this.nextState + "]";
                            };
                            return TokenisationResult;
                        }());
                        tokenisation.TokenisationResult = TokenisationResult;
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var TokenType;
                        (function (TokenType) {
                            TokenType[TokenType["card"] = 0] = "card";
                            TokenType[TokenType["comment"] = 1] = "comment";
                            TokenType[TokenType["curlybrace"] = 2] = "curlybrace";
                            TokenType[TokenType["date_time_literal"] = 3] = "date_time_literal";
                            TokenType[TokenType["date_time_literal_fragment"] = 4] = "date_time_literal_fragment";
                            TokenType[TokenType["float_literal"] = 5] = "float_literal";
                            TokenType[TokenType["format"] = 6] = "format";
                            TokenType[TokenType["format_incomplete"] = 7] = "format_incomplete";
                            TokenType[TokenType["_function"] = 8] = "_function";
                            TokenType[TokenType["hex_literal"] = 9] = "hex_literal";
                            TokenType[TokenType["identifier"] = 10] = "identifier";
                            TokenType[TokenType["identifier_string_literal"] = 11] = "identifier_string_literal";
                            TokenType[TokenType["int_literal"] = 12] = "int_literal";
                            TokenType[TokenType["keyword"] = 13] = "keyword";
                            TokenType[TokenType["macro_function"] = 14] = "macro_function";
                            TokenType[TokenType["macro_invocation"] = 15] = "macro_invocation";
                            TokenType[TokenType["macro_keyword"] = 16] = "macro_keyword";
                            TokenType[TokenType["macro_variable"] = 17] = "macro_variable";
                            TokenType[TokenType["major_keyword"] = 18] = "major_keyword";
                            TokenType[TokenType["parenthesis"] = 19] = "parenthesis";
                            TokenType[TokenType["punctuation"] = 20] = "punctuation";
                            TokenType[TokenType["semicolon"] = 21] = "semicolon";
                            TokenType[TokenType["squarebracket"] = 22] = "squarebracket";
                            TokenType[TokenType["string_literal"] = 23] = "string_literal";
                            TokenType[TokenType["string_literal_fragment"] = 24] = "string_literal_fragment";
                            TokenType[TokenType["unknown"] = 25] = "unknown";
                        })(TokenType = tokenisation.TokenType || (tokenisation.TokenType = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        /**
                         * Tokenises a stream with abstract callback.
                         *
                         * @author ml
                         */
                        var LineTokeniser = /** @class */ (function () {
                            function LineTokeniser(startState) {
                                this.state = startState;
                            }
                            LineTokeniser.prototype.getState = function () {
                                return this.state;
                            };
                            LineTokeniser.prototype.tokenize = function (stream, lastLine) {
                                if (this.state == null) {
                                    return;
                                }
                                while ((!stream.eos())) {
                                    var tokenStartPos = stream.getOffset();
                                    var nextState = this.state;
                                    var tr = this.state.tokenise(stream);
                                    var tokenType = null;
                                    if (tr != null) {
                                        if (tr.getNextState() != null) {
                                            nextState = tr.getNextState();
                                        }
                                        tokenType = tr.getTokenType();
                                    }
                                    var restartTokenisation = false;
                                    if (stream.getOffset() == tokenStartPos) {
                                        if (this.state == nextState) {
                                            stream.skip(1);
                                        }
                                        else {
                                            restartTokenisation = true;
                                        }
                                    }
                                    if (!restartTokenisation) {
                                        this.tokenFound(this.state, tokenType, stream.getOffset(), tokenStartPos);
                                    }
                                    if (stream.eos() && nextState != null && !(nextState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) && lastLine) {
                                        if (tokenType == tokenisation.TokenType.parenthesis || tokenType == tokenisation.TokenType.punctuation || tokenType == tokenisation.TokenType.semicolon) {
                                            var streamOffset = stream.getOffset();
                                            this.tokenFound(nextState, tokenisation.TokenType.unknown, streamOffset, streamOffset);
                                        }
                                    }
                                    this.state = nextState;
                                }
                                ;
                            };
                            return LineTokeniser;
                        }());
                        tokenisation.LineTokeniser = LineTokeniser;
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        /**
                         * Uses {@link LineTokeniser} to see whether there are an UnknownStatementStates if the stream is
                         * tokenised with a given state: so we can speculate as to whether a state might work.
                         *
                         * @author ml
                         */
                        var SpeculativeStreamTokeniser = /** @class */ (function () {
                            function SpeculativeStreamTokeniser() {
                            }
                            /**
                             * Tokenise the Stream from its current offset with the supplied state, see if there any
                             * {@link UnknownStatementState}s returned, if so the method returns true i.e. there's an error if
                             * you tokenise the rest of the line with the given state. Stream is always returned with the same
                             * offset as it started with.
                             *
                             * @param stream
                             * @param state
                             * @return
                             */
                            SpeculativeStreamTokeniser.prototype.streamContainsUnknownStatement = function (stream, state) {
                                var offset = stream.getOffset();
                                try {
                                    var speculativeLineTokeniser = new SpeculativeStreamTokeniser.SpeculativeLineTokeniser(this, state);
                                    speculativeLineTokeniser.tokenize(stream, false);
                                    return speculativeLineTokeniser.unknownStatement;
                                }
                                finally {
                                    stream.setOffset(offset);
                                }
                                ;
                            };
                            return SpeculativeStreamTokeniser;
                        }());
                        tokenisation.SpeculativeStreamTokeniser = SpeculativeStreamTokeniser;
                        (function (SpeculativeStreamTokeniser) {
                            var SpeculativeLineTokeniser = /** @class */ (function (_super) {
                                __extends(SpeculativeLineTokeniser, _super);
                                function SpeculativeLineTokeniser(__parent, startState) {
                                    var _this = _super.call(this, startState) || this;
                                    _this.__parent = __parent;
                                    _this.unknownStatement = false;
                                    return _this;
                                }
                                SpeculativeLineTokeniser.prototype.tokenFound = function (tokenState, tokenType, streamOffset, tokenStartPosition) {
                                    if (tokenState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) {
                                        this.unknownStatement = true;
                                    }
                                };
                                return SpeculativeLineTokeniser;
                            }(tokenisation.LineTokeniser));
                            SpeculativeStreamTokeniser.SpeculativeLineTokeniser = SpeculativeLineTokeniser;
                        })(SpeculativeStreamTokeniser = tokenisation.SpeculativeStreamTokeniser || (tokenisation.SpeculativeStreamTokeniser = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        var BasicSasStepInfo = /** @class */ (function () {
                            function BasicSasStepInfo(languageInfo, allowsIf, allowsAssignment, allowsSelect, runGroups) {
                                if ((languageInfo != null && languageInfo["__interfaces"] != null && languageInfo["__interfaces"].indexOf("com.wpc.wps.language.context.information.LanguageInfo") >= 0) && (typeof allowsIf === 'boolean') && (typeof allowsAssignment === 'boolean') && (typeof allowsSelect === 'boolean') && (typeof runGroups === 'boolean')) {
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.SasStepInfo"] });
                                    this.languageInfo = languageInfo;
                                    this.hidden = languageInfo.isHidden();
                                    this.__allowsAssignment = allowsAssignment;
                                    this.__allowsIf = allowsIf;
                                    this.__allowsSelect = allowsSelect;
                                    this.__runGroups = runGroups;
                                }
                                else if ((languageInfo != null && languageInfo["__interfaces"] != null && languageInfo["__interfaces"].indexOf("com.wpc.wps.language.context.information.LanguageInfo") >= 0) && allowsIf == null && allowsAssignment == null && allowsSelect == null && runGroups == null) {
                                    {
                                        var allowsIf = false;
                                        var allowsAssignment = languageInfo.allowsAssignment();
                                        var allowsSelect = false;
                                        var runGroups = languageInfo.isRunGroups();
                                        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.SasStepInfo"] });
                                        this.languageInfo = languageInfo;
                                        this.hidden = languageInfo.isHidden();
                                        this.__allowsAssignment = allowsAssignment;
                                        this.__allowsIf = allowsIf;
                                        this.__allowsSelect = allowsSelect;
                                        this.__runGroups = runGroups;
                                    }
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.SasStepInfo"] });
                                }
                                else
                                    throw new Error('invalid overload');
                            }
                            BasicSasStepInfo.prototype.getLanguageInfo = function () {
                                return this.languageInfo;
                            };
                            BasicSasStepInfo.prototype.allowsIf = function () {
                                return this.__allowsIf;
                            };
                            BasicSasStepInfo.prototype.allowsAssignment = function () {
                                return this.__allowsAssignment;
                            };
                            BasicSasStepInfo.prototype.allowsSelect = function () {
                                return this.__allowsSelect;
                            };
                            BasicSasStepInfo.prototype.runGroups = function () {
                                return this.__runGroups;
                            };
                            BasicSasStepInfo.prototype.isHidden = function () {
                                return this.hidden;
                            };
                            BasicSasStepInfo.prototype.hashCode = function () {
                                var result = 0;
                                result += this.languageInfo != null ? this.languageInfo.hashCode() : 1;
                                result += this.__allowsAssignment == false ? 0 : 3;
                                result += this.__allowsIf == false ? 0 : 5;
                                result += this.__allowsSelect == false ? 0 : 7;
                                result += this.__runGroups == false ? 0 : 13;
                                return result;
                            };
                            BasicSasStepInfo.prototype.equals = function (basicStepInfo) {
                                var result = this == basicStepInfo;
                                if (!result && (basicStepInfo instanceof com.wpc.wps.language.context.information.BasicSasStepInfo)) {
                                    var bsi = basicStepInfo;
                                    if ((this.languageInfo == null && bsi.languageInfo == null) || this.languageInfo != null && this.languageInfo.equals(bsi.languageInfo)) {
                                        if (this.__allowsAssignment == bsi.__allowsAssignment && this.__allowsIf == bsi.__allowsIf && this.__allowsSelect == bsi.__allowsSelect && this.__runGroups == bsi.__runGroups) {
                                            result = true;
                                        }
                                    }
                                }
                                return result;
                            };
                            BasicSasStepInfo.prototype.toString = function () {
                                return "BasicSasStepInfo [languageInfo=" + this.languageInfo + ", hidden=" + this.hidden + ", allowsIf=" + this.__allowsIf + ", allowsAssignment=" + this.__allowsAssignment + ", allowsSelect=" + this.__allowsSelect + ", runGroups=" + this.__runGroups + "]";
                            };
                            return BasicSasStepInfo;
                        }());
                        information.BasicSasStepInfo = BasicSasStepInfo;
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        /**
                         * Component e.g. HASH
                         *
                         * Example of usage: <code><br/>
                         * data _null_ ;<br/>
                         * dcl hash hh ;<br/>
                         * hh = _new_ hash() ;<br/>
                         * run ;
                         * </code>
                         *
                         * @author ml
                         */
                        var Component = /** @class */ (function () {
                            function Component(name, methods, attributes) {
                                this.name = name;
                                this.methods = methods;
                                this.attributes = attributes;
                            }
                            Component.prototype.getName = function () {
                                return this.name;
                            };
                            Component.prototype.getMethods = function () {
                                return this.methods;
                            };
                            Component.prototype.getAttributes = function () {
                                return this.attributes;
                            };
                            Component.prototype.toString = function () {
                                return "Component [name=" + this.name + ", methods=" + this.methods + ", attributes=" + this.attributes + "]";
                            };
                            return Component;
                        }());
                        information.Component = Component;
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        /**
                         * Basic implementation of {@link LanguageInfo} that is basically null.
                         *
                         * @author nr
                         * @author ml
                         */
                        var EmptyLanguageInfo = /** @class */ (function () {
                            function EmptyLanguageInfo() {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.LanguageInfo"] });
                            }
                            EmptyLanguageInfo.prototype.getName = function () {
                                return "";
                            };
                            EmptyLanguageInfo.prototype.hashCode = function () {
                                return -1;
                            };
                            EmptyLanguageInfo.prototype.equals = function (obj) {
                                return obj == this;
                            };
                            EmptyLanguageInfo.prototype.toString = function () {
                                return "EmptyLanguageInfo []";
                            };
                            EmptyLanguageInfo.prototype.getKeyword = function (keyword) {
                                return null;
                            };
                            EmptyLanguageInfo.prototype.getKeywords = function () {
                                return null;
                            };
                            EmptyLanguageInfo.prototype.getStatement = function (statement) {
                                return null;
                            };
                            EmptyLanguageInfo.prototype.getStatements = function () {
                                return null;
                            };
                            EmptyLanguageInfo.prototype.getOption = function (option) {
                                return null;
                            };
                            EmptyLanguageInfo.prototype.getOptions = function () {
                                return null;
                            };
                            EmptyLanguageInfo.prototype.isNumbered = function () {
                                return false;
                            };
                            EmptyLanguageInfo.prototype.isRunGroups = function () {
                                return false;
                            };
                            EmptyLanguageInfo.prototype.isHidden = function () {
                                return false;
                            };
                            EmptyLanguageInfo.prototype.isGlobal = function () {
                                return false;
                            };
                            EmptyLanguageInfo.prototype.allowsAssignment = function () {
                                return false;
                            };
                            EmptyLanguageInfo.prototype.getOptionType = function () {
                                return null;
                            };
                            EmptyLanguageInfo.INSTANCE = new EmptyLanguageInfo();
                            return EmptyLanguageInfo;
                        }());
                        information.EmptyLanguageInfo = EmptyLanguageInfo;
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        var ProcStepInfo = /** @class */ (function () {
                            function ProcStepInfo() {
                            }
                            return ProcStepInfo;
                        }());
                        information.ProcStepInfo = ProcStepInfo;
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        /**
                         * Immutable class containing a list of keywords in upper case sorted in order.
                         *
                         * @author ml
                         */
                        var SasLanguageInfo = /** @class */ (function () {
                            function SasLanguageInfo(builder) {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.LanguageInfo"] });
                                this.name = builder.name;
                                this.numbered = builder.numbered;
                                this.runGroups = builder.runGroups;
                                this.__allowsAssignment = builder.allowsAssignment;
                                this.keywordsMap = builder.keywordsMap;
                                this.statementsMap = builder.statementsMap;
                                this.optionsMap = builder.optionsMap;
                                this.properties = builder.properties;
                                this.hidden = builder.hidden;
                                this.global = builder.global;
                                this.optionType = builder.optionType;
                            }
                            SasLanguageInfo.prototype.getName = function () {
                                return this.name;
                            };
                            SasLanguageInfo.prototype.isNumbered = function () {
                                return this.numbered;
                            };
                            SasLanguageInfo.prototype.isRunGroups = function () {
                                return this.runGroups;
                            };
                            SasLanguageInfo.prototype.isGlobal = function () {
                                return this.global;
                            };
                            SasLanguageInfo.prototype.getKeyword = function (keyword) {
                                return this.keywordsMap != null ? this.keywordsMap.get(keyword.toUpperCase()) : null;
                            };
                            SasLanguageInfo.prototype.getStatement = function (statement) {
                                return this.statementsMap != null ? this.statementsMap.get(statement.toUpperCase()) : null;
                            };
                            SasLanguageInfo.prototype.getOption = function (option) {
                                return this.optionsMap != null ? this.optionsMap.get(option.toUpperCase()) : null;
                            };
                            SasLanguageInfo.prototype.getProperty = function (prop) {
                                return this.properties != null ? this.properties.get(prop.toUpperCase()) : null;
                            };
                            SasLanguageInfo.prototype.getKeywordsMap = function () {
                                return this.keywordsMap;
                            };
                            SasLanguageInfo.prototype.getStatementsMap = function () {
                                return this.statementsMap;
                            };
                            SasLanguageInfo.prototype.getOptionsMap = function () {
                                return this.optionsMap;
                            };
                            SasLanguageInfo.prototype.getKeywords = function () {
                                var result = null;
                                if (this.keywordsMap != null) {
                                    result = this.keywordsMap.values();
                                }
                                return result;
                            };
                            SasLanguageInfo.prototype.getStatements = function () {
                                var result = null;
                                if (this.statementsMap != null) {
                                    result = this.statementsMap.values();
                                }
                                return result;
                            };
                            SasLanguageInfo.prototype.getOptions = function () {
                                var result = null;
                                if (this.optionsMap != null) {
                                    result = this.optionsMap.values();
                                }
                                return result;
                            };
                            SasLanguageInfo.prototype.isHidden = function () {
                                return this.hidden;
                            };
                            SasLanguageInfo.prototype.getOptionType = function () {
                                return this.optionType;
                            };
                            SasLanguageInfo.prototype.hashCode = function () {
                                var result = 1;
                                result += this.statementsMap == null ? 0 : this.statementsMap.size() * 31;
                                result += this.keywordsMap == null ? 0 : this.keywordsMap.size() * 37;
                                result += this.optionsMap == null ? 0 : this.optionsMap.size() * 41;
                                result += this.name == null ? 0 : this.name.length * 43;
                                return result;
                            };
                            SasLanguageInfo.prototype.equals = function (obj) {
                                if (this == obj) {
                                    return true;
                                }
                                if (!(obj instanceof com.wpc.wps.language.context.information.SasLanguageInfo)) {
                                    return false;
                                }
                                var other = obj;
                                var b = this.keywordsMap == null;
                                if ((b && other.keywordsMap != null) || (!b && !this.keywordsMap.equals(other.keywordsMap))) {
                                    return false;
                                }
                                b = this.statementsMap == null;
                                if ((b && other.statementsMap != null) || (!b && !this.statementsMap.equals(other.statementsMap))) {
                                    return false;
                                }
                                b = this.optionsMap == null;
                                if ((b && other.optionsMap != null) || (!b && !this.optionsMap.equals(other.optionsMap))) {
                                    return false;
                                }
                                if (this.name == null) {
                                    if (other.name != null) {
                                        return false;
                                    }
                                }
                                else if (!(this.name === other.name)) {
                                    return false;
                                }
                                return true;
                            };
                            SasLanguageInfo.prototype.toString = function () {
                                return "SasLanguageInfo [name=" + this.name + "]";
                            };
                            SasLanguageInfo.prototype.allowsAssignment = function () {
                                return this.__allowsAssignment;
                            };
                            return SasLanguageInfo;
                        }());
                        information.SasLanguageInfo = SasLanguageInfo;
                        (function (SasLanguageInfo) {
                            var SasLanguageInfoBuilder = /** @class */ (function () {
                                function SasLanguageInfoBuilder() {
                                }
                                SasLanguageInfoBuilder.prototype.build = function () {
                                    return new SasLanguageInfo(this);
                                };
                                SasLanguageInfoBuilder.prototype.setStatementsMap = function (statementsMap) {
                                    this.statementsMap = statementsMap;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setKeywordsMap = function (keywordsMap) {
                                    this.keywordsMap = keywordsMap;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setOptionsMap = function (optionsMap) {
                                    this.optionsMap = optionsMap;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setProperties = function (properties) {
                                    this.properties = properties;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setName = function (name) {
                                    this.name = name;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setNumbered = function (numbered) {
                                    this.numbered = numbered;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setRunGroups = function (runGroups) {
                                    this.runGroups = runGroups;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setAllowsAssignment = function (allowsAssignment) {
                                    this.allowsAssignment = allowsAssignment;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setHidden = function (hidden) {
                                    this.hidden = hidden;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setGlobal = function (global) {
                                    this.global = global;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setOptionType = function (optionType) {
                                    this.optionType = optionType;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setTranspilableCollections = function (transpilableCollections) {
                                    this.transpilableCollections = transpilableCollections;
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setKeywordsFromArray = function (keywords) {
                                    this.keywordsMap = this.transpilableCollections.buildMapFromArray(keywords, function (s) { return s.toUpperCase(); }, function (s) { return new SasLanguageInfo.SasLanguageInfoBuilder().setName(s.toUpperCase()).build(); });
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setStatementsFromArray = function (statements) {
                                    this.statementsMap = this.transpilableCollections.buildMapFromArray(statements, function (s) { return s.toUpperCase(); }, function (s) { return new SasLanguageInfo.SasLanguageInfoBuilder().setName(s.toUpperCase()).build(); });
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setOptionsFromArray = function (options) {
                                    this.optionsMap = this.transpilableCollections.buildMapFromArray(options, function (s) { return s.toUpperCase(); }, function (s) { return new SasLanguageInfo.SasLanguageInfoBuilder().setName(s.toUpperCase()).build(); });
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setKeywordsFromCollection = function (keywords) {
                                    this.keywordsMap = this.transpilableCollections.buildMapFromCollection(keywords, function (li) { return li.getName().toUpperCase(); }, function (li) { return li; });
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setStatementsFromCollection = function (statements) {
                                    this.statementsMap = this.transpilableCollections.buildMapFromCollection(statements, function (li) { return li.getName().toUpperCase(); }, function (li) { return li; });
                                    return this;
                                };
                                SasLanguageInfoBuilder.prototype.setOptionsFromCollection = function (options) {
                                    this.optionsMap = this.transpilableCollections.buildMapFromCollection(options, function (li) { return li.getName().toUpperCase(); }, function (li) { return li; });
                                    return this;
                                };
                                return SasLanguageInfoBuilder;
                            }());
                            SasLanguageInfo.SasLanguageInfoBuilder = SasLanguageInfoBuilder;
                        })(SasLanguageInfo = information.SasLanguageInfo || (information.SasLanguageInfo = {}));
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        /**
                         * Provides all language information relating to Macros.
                         */
                        var SasMacroLanguageInfo = /** @class */ (function (_super) {
                            __extends(SasMacroLanguageInfo, _super);
                            function SasMacroLanguageInfo(builder) {
                                var _this = _super.call(this, builder) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.LanguageInfo", "com.wpc.wps.language.context.information.MacroLanguageInfo"] });
                                _this.openCode = builder.openCode;
                                _this.macroKeywords = builder.macroKeywords;
                                return _this;
                            }
                            SasMacroLanguageInfo.prototype.containsMacroKeyword = function (keyword) {
                                return this.macroKeywords.containsKey(keyword);
                            };
                            SasMacroLanguageInfo.prototype.isOpenCode = function () {
                                return this.openCode;
                            };
                            SasMacroLanguageInfo.prototype.hashCode = function () {
                                var prime = 31;
                                var result = _super.prototype.hashCode.call(this);
                                result = prime * result + ((this.macroKeywords == null) ? 0 : this.macroKeywords.size());
                                result = prime * result + (this.openCode ? 1231 : 1237);
                                return result;
                            };
                            SasMacroLanguageInfo.prototype.equals = function (obj) {
                                if (this == obj) {
                                    return true;
                                }
                                if (!_super.prototype.equals.call(this, obj)) {
                                    return false;
                                }
                                var other = obj;
                                if (this.macroKeywords == null) {
                                    if (other.macroKeywords != null) {
                                        return false;
                                    }
                                }
                                else if (!this.macroKeywords.equals(other.macroKeywords)) {
                                    return false;
                                }
                                if (this.openCode != other.openCode) {
                                    return false;
                                }
                                return true;
                            };
                            SasMacroLanguageInfo.prototype.toString = function () {
                                return "SasMacroLanguageInfo [name=" + this.name + ", openCode=" + this.openCode + ", keyword count=" + (this.getKeywordsMap() != null ? this.getKeywordsMap().size() : 0) + ", macroKeyword count=" + (this.macroKeywords != null ? this.macroKeywords.size() : 0) + "]";
                            };
                            return SasMacroLanguageInfo;
                        }(information.SasLanguageInfo));
                        information.SasMacroLanguageInfo = SasMacroLanguageInfo;
                        (function (SasMacroLanguageInfo) {
                            var SasMacroLanguageInfoBuilder = /** @class */ (function (_super) {
                                __extends(SasMacroLanguageInfoBuilder, _super);
                                function SasMacroLanguageInfoBuilder() {
                                    return _super !== null && _super.apply(this, arguments) || this;
                                }
                                SasMacroLanguageInfoBuilder.prototype.setMacroKeywords = function (macroKeywords) {
                                    this.macroKeywords = macroKeywords;
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setOpenCode = function (openCode) {
                                    this.openCode = openCode;
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setStatementsMap = function (statementsMap) {
                                    _super.prototype.setStatementsMap.call(this, statementsMap);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setKeywordsMap = function (keywordsMap) {
                                    _super.prototype.setKeywordsMap.call(this, keywordsMap);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setOptionsMap = function (optionsMap) {
                                    _super.prototype.setOptionsMap.call(this, optionsMap);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setProperties = function (properties) {
                                    _super.prototype.setProperties.call(this, properties);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setName = function (name) {
                                    _super.prototype.setName.call(this, name);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setNumbered = function (numbered) {
                                    _super.prototype.setNumbered.call(this, numbered);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setRunGroups = function (runGroups) {
                                    _super.prototype.setRunGroups.call(this, runGroups);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setAllowsAssignment = function (allowsAssignment) {
                                    _super.prototype.setAllowsAssignment.call(this, allowsAssignment);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setHidden = function (hidden) {
                                    _super.prototype.setHidden.call(this, hidden);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setTranspilableCollections = function (transpilableCollections) {
                                    _super.prototype.setTranspilableCollections.call(this, transpilableCollections);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setKeywordsFromArray = function (keywords) {
                                    _super.prototype.setKeywordsFromArray.call(this, keywords);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setStatementsFromArray = function (statements) {
                                    _super.prototype.setStatementsFromArray.call(this, statements);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setOptionsFromArray = function (options) {
                                    _super.prototype.setOptionsFromArray.call(this, options);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setKeywordsFromCollection = function (keywords) {
                                    _super.prototype.setKeywordsFromCollection.call(this, keywords);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setStatementsFromCollection = function (statements) {
                                    _super.prototype.setStatementsFromCollection.call(this, statements);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setOptionsFromCollection = function (options) {
                                    _super.prototype.setOptionsFromCollection.call(this, options);
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setMacroKeywordsFromArray = function (keywords) {
                                    this.macroKeywords = this.transpilableCollections.buildMapFromArray(keywords, function (s) { return s.toUpperCase(); }, function (s) { return new information.SasLanguageInfo.SasLanguageInfoBuilder().setName(s.toUpperCase()).build(); });
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.setMacroKeywordsFromCollection = function (keywords) {
                                    this.macroKeywords = this.transpilableCollections.buildMapFromCollection(keywords, function (li) { return li.getName().toUpperCase(); }, function (li) { return li; });
                                    return this;
                                };
                                SasMacroLanguageInfoBuilder.prototype.build = function () {
                                    return new SasMacroLanguageInfo(this);
                                };
                                return SasMacroLanguageInfoBuilder;
                            }(information.SasLanguageInfo.SasLanguageInfoBuilder));
                            SasMacroLanguageInfo.SasMacroLanguageInfoBuilder = SasMacroLanguageInfoBuilder;
                        })(SasMacroLanguageInfo = information.SasMacroLanguageInfo || (information.SasMacroLanguageInfo = {}));
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var information;
                    (function (information) {
                        var UnknownStepInfo = /** @class */ (function () {
                            function UnknownStepInfo(languageInfo) {
                                if ((languageInfo != null && languageInfo["__interfaces"] != null && languageInfo["__interfaces"].indexOf("com.wpc.wps.language.context.information.LanguageInfo") >= 0)) {
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.SasStepInfo"] });
                                    this.languageInfo = languageInfo;
                                }
                                else if (languageInfo == null) {
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.information.SasStepInfo"] });
                                    this.languageInfo = information.EmptyLanguageInfo.INSTANCE;
                                }
                                else
                                    throw new Error('invalid overload');
                            }
                            UnknownStepInfo.prototype.getLanguageInfo = function () {
                                return this.languageInfo;
                            };
                            UnknownStepInfo.prototype.allowsIf = function () {
                                return false;
                            };
                            UnknownStepInfo.prototype.allowsAssignment = function () {
                                return false;
                            };
                            UnknownStepInfo.prototype.allowsSelect = function () {
                                return false;
                            };
                            UnknownStepInfo.prototype.runGroups = function () {
                                return false;
                            };
                            UnknownStepInfo.prototype.isHidden = function () {
                                return false;
                            };
                            UnknownStepInfo.prototype.toString = function () {
                                return "NullStepInfo []";
                            };
                            UnknownStepInfo.prototype.hashCode = function () {
                                return 1;
                            };
                            UnknownStepInfo.prototype.equals = function (obj) {
                                return this == obj;
                            };
                            UnknownStepInfo.EMPTY_INSTANCE = new UnknownStepInfo();
                            return UnknownStepInfo;
                        }());
                        information.UnknownStepInfo = UnknownStepInfo;
                    })(information = context.information || (context.information = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * Class for returning multiple values from tokenisation.
                             *
                             * @author Nick Rosbson [nr]
                             */
                            var MultipleValueResult = /** @class */ (function () {
                                function MultipleValueResult(tokenType, resultString) {
                                    this.tokenType = tokenType;
                                    this.resultString = resultString;
                                }
                                MultipleValueResult.prototype.getTokenType = function () {
                                    return this.tokenType;
                                };
                                MultipleValueResult.prototype.getResultString = function () {
                                    return this.resultString;
                                };
                                return MultipleValueResult;
                            }());
                            state.MultipleValueResult = MultipleValueResult;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state_1) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                            var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                            /**
                             * WARNING: This class must be 'transpilable'.
                             */
                            var AbstractTokenisationState = /** @class */ (function () {
                                /**
                                 * Constructor: allows GlobalState to be cloned but keeping the parent null yet setting the final
                                 * fields.
                                 *
                                 * @param parent
                                 * @param sasLanguageSupporter
                                 * @param stateTransitionHelper
                                 * @param functionHelper
                                 * @param transpilableCollections
                                 */
                                function AbstractTokenisationState(parent, sasLanguageSupporter, stateTransitionHelper, functionHelper, transpilableCollections) {
                                    if (sasLanguageSupporter === void 0) { sasLanguageSupporter = null; }
                                    if (stateTransitionHelper === void 0) { stateTransitionHelper = null; }
                                    if (functionHelper === void 0) { functionHelper = null; }
                                    if (transpilableCollections === void 0) { transpilableCollections = null; }
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    this.parent = parent;
                                    if (parent != null) {
                                        this.sasLanguageSupporter = parent.getSasLanguageSupporter();
                                        this.stateTransitionHelper = parent.getStateTransitionHelper();
                                        this.functionHelper = parent.getFunctionHelper();
                                        this.transpilableCollections = parent.getTranspilableCollections();
                                    }
                                    else {
                                        this.sasLanguageSupporter = sasLanguageSupporter;
                                        this.stateTransitionHelper = stateTransitionHelper;
                                        this.functionHelper = functionHelper;
                                        this.transpilableCollections = transpilableCollections;
                                    }
                                }
                                AbstractTokenisationState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    if (stream.eos()) {
                                        return null;
                                    }
                                    var c = stream.peek();
                                    var result = null;
                                    var tokenType = null;
                                    var identifier;
                                    var format = null;
                                    if (stream.skipSpace() != 0) {
                                        result = this.tokeniseWhitespace(stream);
                                    }
                                    else if (stream.match(this.getBlockCommentStart()) != 0) {
                                        result = this.createTokenisationResult(TokenType.comment, this.getBlockCommentState(), stream);
                                    }
                                    else if (this.containsMacroVariableAtCurrentPosition(stream)) {
                                        tokenType = this.matchMacroVariable(stream);
                                        result = this.tokeniseMacroVariable(tokenType, stream);
                                    }
                                    else if (c == SasLanguage.PERCENT) {
                                        stream.skip(1);
                                        var parentMacro = this.getParentMacro();
                                        if (parentMacro != null && parentMacro.oldStyleMacro) {
                                            if (stream.peek() == SasLanguage.PERCENT) {
                                                stream.skip(1);
                                            }
                                            else {
                                                result = this.createTokenisationResult(TokenType.punctuation, parentMacro.parent, stream);
                                            }
                                        }
                                        if (result == null && !stream.eos() && stream.peek() == SasLanguage.ASTERISK) {
                                            result = this.createTokenisationResult(TokenType.comment, new state_1.StatementCommentState(this), stream);
                                        }
                                        else if (result == null) {
                                            var macroIdentifier = this.matchIdentifier(stream);
                                            if (this.containsMacroVariableAtCurrentPosition(stream)) {
                                                result = this.createTokenisationResult(TokenType.macro_invocation, new state_1.MacroInvocationExpressionState(this, this.getNextStateAfterMacroState(), macroIdentifier, true), stream);
                                            }
                                            else if (macroIdentifier == null) {
                                                result = this.tokeniseOperator(TokenType.punctuation, c, stream);
                                            }
                                            else {
                                                result = this.tokeniseMacro(macroIdentifier, stream);
                                            }
                                        }
                                    }
                                    else if (c == SasLanguage.SEMI_COLON) {
                                        stream.skip(1);
                                        result = this.tokeniseSemiColon(stream);
                                    }
                                    else if ((tokenType = this.matchStrings(stream, c)) != null) {
                                        result = this.tokeniseString(tokenType, c, stream);
                                    }
                                    else if ((tokenType = this.matchNumbers(stream)) != null) {
                                        result = this.tokeniseNumber(tokenType, stream);
                                    }
                                    else if ((tokenType = this.matchOperators(c, stream)) != null) {
                                        if (c == SasLanguage.DOLLAR && (format = this.matchFormat(stream)) != null) {
                                            result = this.tokeniseFormat(format.getTokenType(), format.getResultString(), stream);
                                        }
                                        else {
                                            stream.skip(1);
                                            result = this.tokeniseOperator(tokenType, c, stream);
                                        }
                                    }
                                    else if ((tokenType = this.matchBrackets(c)) != null) {
                                        stream.skip(1);
                                        result = this.tokeniseBracket(tokenType, c, stream);
                                    }
                                    else if ((format = this.matchFormat(stream)) != null) {
                                        result = this.tokeniseFormat(format.getTokenType(), format.getResultString(), stream);
                                    }
                                    else if ((identifier = this.matchIdentifier(stream)) != null) {
                                        result = this.tokeniseIdentifier(identifier, stream);
                                    }
                                    if (result == null) {
                                        stream.skip(1);
                                        result = this.createTokenisationResult(TokenType.unknown, null, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * @return the tokenisation state responsible for handling a block comment
                                 */
                                AbstractTokenisationState.prototype.getBlockCommentState = function () {
                                    return new state_1.BlockCommentState(this);
                                };
                                /**
                                 * @return String indicating the start of a block comment
                                 */
                                AbstractTokenisationState.prototype.getBlockCommentStart = function () {
                                    return SasLanguage.BLOCK_COMMENT_START;
                                };
                                AbstractTokenisationState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                    return this.createTokenisationResult(tokenType, null, stream);
                                };
                                AbstractTokenisationState.prototype.tokeniseWhitespace = function (stream) {
                                    return this.createTokenisationResult(null, null, stream);
                                };
                                /**
                                 * Get the TokenisationResult for operators.
                                 *
                                 * @param tokenType
                                 * @param c operator char
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    return this.createTokenisationResult(tokenType, null, stream);
                                };
                                /**
                                 * Get the TokenisationResult for brackets.
                                 *
                                 * @param tokenType
                                 * @param c
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    return this.createTokenisationResult(tokenType, null, stream);
                                };
                                /**
                                 * Get the TokenisationResult for strings. If the state needs to change after a string,
                                 * {@link #getStateAfterString()} must be overridden, as the next state can end up
                                 * wrapped in {@link StringLiteralState}.
                                 *
                                 * @param tokenType
                                 * @param quoteChar
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.tokeniseString = function (tokenType, quoteChar, stream) {
                                    var nextState = this.getStateAfterString();
                                    if (tokenType == TokenType.string_literal_fragment || tokenType == TokenType.date_time_literal_fragment) {
                                        nextState = this.getStringLiteralState(quoteChar, nextState, this.getStateAfterIdentifierString());
                                    }
                                    else if (tokenType == TokenType.identifier_string_literal) {
                                        nextState = this.getStateAfterIdentifierString();
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Get an instance of {@link StringLiteralState}, allows type to be overridden.
                                 *
                                 * @param quoteChar
                                 * @param nextState
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.getStringLiteralState = function (quoteChar, nextState, nextStateIfIdentifier) {
                                    return new state_1.StringLiteralState(this, nextState, quoteChar, nextStateIfIdentifier);
                                };
                                /**
                                 * Get the next state after any string or for a {@link StringLiteralState} , allows the state to
                                 * change after finishing a string literal.
                                 *
                                 * @return {@link ITokenisationState}
                                 */
                                AbstractTokenisationState.prototype.getStateAfterString = function () {
                                    return this;
                                };
                                /**
                                 * Get the next state after any string identifier or for a {@link StringLiteralState} , allows the state to
                                 * change after finishing a string literal that is wrapping an identifier.
                                 *
                                 * @return {@link ITokenisationState}
                                 */
                                AbstractTokenisationState.prototype.getStateAfterIdentifierString = function () {
                                    return this.getStateAfterString();
                                };
                                /**
                                 * Get the TokenisationResult for numbers.
                                 *
                                 * @param tokenType
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.tokeniseNumber = function (tokenType, stream) {
                                    return this.createTokenisationResult(tokenType, null, stream);
                                };
                                /**
                                 * Get the TokenisationResult for a semicolon. Go to {@link StatementParentState} by default.
                                 *
                                 * @param tokenType
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.tokeniseSemiColon = function (stream) {
                                    return this.createTokenisationResult(TokenType.semicolon, this.getStatementParentState(), stream);
                                };
                                AbstractTokenisationState.prototype.tokeniseMacro = function (identifier, stream) {
                                    var nextStateAfterMacroState = this.getNextStateAfterMacroState();
                                    var statementParentState = this.getStatementParentState();
                                    switch ((identifier)) {
                                        case SasLanguage.MACRO:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroNameState(nextStateAfterMacroState, false), stream);
                                        case SasLanguage.MEND:
                                            var macroDefinitionState = this.getParentMacro();
                                            if (macroDefinitionState != null && !macroDefinitionState.oldStyleMacro) {
                                                return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroEndState(macroDefinitionState), stream);
                                            }
                                            else {
                                                return this.createTokenisationResult(TokenType.macro_keyword, null, stream);
                                            }
                                        case SasLanguage.IF:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroIfStatementState(statementParentState, this), stream);
                                        case SasLanguage.DO:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroDoExpressionState(statementParentState, this), stream);
                                        case SasLanguage.THEN:
                                        case SasLanguage.ELSE:
                                        case SasLanguage.WHILE:
                                        case SasLanguage.UNTIL:
                                        case SasLanguage.TO:
                                        case SasLanguage.BY:
                                            return this.createTokenisationResult(TokenType.macro_keyword, null, stream);
                                        case SasLanguage.LET:
                                        case SasLanguage.PUT:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroTransitionState(statementParentState, this, this), stream);
                                        case SasLanguage.COPY:
                                        case SasLanguage.END:
                                        case SasLanguage.GLOBAL:
                                        case SasLanguage.GOTO:
                                        case SasLanguage.INC:
                                        case SasLanguage.INCLUDE:
                                        case SasLanguage.LOCAL:
                                        case SasLanguage.SYMDEL:
                                        case SasLanguage.SYSLPUT:
                                        case SasLanguage.SYSRPUT:
                                        case SasLanguage.SYSEXEC:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroTransitionState(statementParentState, this, nextStateAfterMacroState), stream);
                                        case SasLanguage.SYSFUNC:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.BracketBooleanExpressionState(statementParentState, this, nextStateAfterMacroState), stream);
                                        case SasLanguage.SYSCALL:
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.AssignmentExpressionState(statementParentState, nextStateAfterMacroState, state_1.AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER, state_1.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, null, null), stream);
                                    }
                                    if (this.sasLanguageSupporter != null) {
                                        var macroInfo = this.sasLanguageSupporter.getMacroLanguageInfo(identifier);
                                        if (macroInfo != null) {
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state_1.MacroStatementState(nextStateAfterMacroState, macroInfo), stream);
                                        }
                                    }
                                    var result = this.tokeniseMacroFunction(identifier, stream);
                                    if (result == null) {
                                        var containsMacroVariable = this.containsMacroVariableAtCurrentPosition(stream);
                                        result = this.createTokenisationResult(TokenType.macro_invocation, new state_1.MacroInvocationExpressionState(this, nextStateAfterMacroState, identifier, containsMacroVariable), stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Checks for a matching macro function name.
                                 * This is the exhaustive list of functions that we provide specific handling for.
                                 *
                                 * @param identifier - The identifier (function name)
                                 * @param stream - The stream.
                                 * @return {@link TokenisationResult} or null if it is not for a macro function we're providing
                                 * specific handling for.
                                 */
                                AbstractTokenisationState.prototype.tokeniseMacroFunction = function (identifier, stream) {
                                    var result = null;
                                    if (stream.isNextCharacter(SasLanguage.BRACKET_OPEN, SasLanguage.SPACE) >= 0) {
                                        var functionType = null;
                                        switch ((identifier)) {
                                            case SasLanguage.FUNCTION_MACRO_BQUOTE:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.BQUOTE;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_NRBQUOTE:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.NRBQUOTE;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_NRQUOTE:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.NRQUOTE;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_NRSTR:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.NRSTR;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_QUOTE:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.QUOTE;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_STR:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.STR;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_SUPERQ:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.SUPERQ;
                                                break;
                                            case SasLanguage.FUNCTION_MACRO_UNQUOTE:
                                                functionType = state_1.MacroQuotingFunctionState.QuotingFunctionType.UNQUOTE;
                                                break;
                                        }
                                        if (functionType != null) {
                                            result = this.createTokenisationResult(TokenType.macro_function, this.createMacroQuotingFunctionState(identifier, functionType), stream);
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * Create a new {@link MacroQuotingFunctionState} instance.
                                 *
                                 * @param identifier
                                 * @param functionType
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.createMacroQuotingFunctionState = function (identifier, functionType) {
                                    return new state_1.MacroQuotingFunctionState(this.getNextStateAfterMacroState(), identifier, functionType);
                                };
                                /**
                                 * Every state should ultimately be rooted with an instance of {@link StatementParentState} which
                                 * could be itself.
                                 *
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.getStatementParentState = function () {
                                    if (this.parent != null && this.parent["__interfaces"] != null && this.parent["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.StatementParentState") >= 0) {
                                        return this.parent;
                                    }
                                    if (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) {
                                        return this.parent.getStatementParentState();
                                    }
                                    return null;
                                };
                                /**
                                 * Get the parent for new {@link MacroStatementState} or the state after
                                 * {@link MacroInvocationExpressionState}.
                                 * Allows subclasses to alter the state after the statement or invocation.
                                 *
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.getNextStateAfterMacroState = function () {
                                    return this;
                                };
                                /**
                                 * Get the {@link TokenisationResult} for an identifier. Override to provide specific behaviour for
                                 * dealing with an identifier.
                                 *
                                 * @param identifier - The identifier
                                 * @param stream - The stream
                                 * @return {@link TokenisationResult}
                                 */
                                AbstractTokenisationState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    return this.createTokenisationResult(TokenType.identifier, null, stream);
                                };
                                /**
                                 * Get the {@link TokenisationResult} for a format. Override to provide specific behaviour for
                                 * dealing with a format.
                                 *
                                 * @param tokenType - The TokenType. Should be {@link TokenType#format} or
                                 * {@link TokenType#format_incomplete} although this is not enforced.
                                 * @param identifier - The identifier
                                 * @param stream - The stream
                                 * @return {@link TokenisationResult}
                                 */
                                AbstractTokenisationState.prototype.tokeniseFormat = function (tokenType, identifier, stream) {
                                    return this.createTokenisationResult(tokenType, null, stream);
                                };
                                /**
                                 * Creates an {@link TokenisationResult} with the provided {@link ITokenisationState}. Subclasses
                                 * should call this instead of directly constructing a {@link TokenisationResult}, so that it can be
                                 * changed by other subclasses.
                                 *
                                 * @param tokenType - The token type
                                 * @param nextState - ~The next state to move to after the current one.
                                 * @param stream - (Not used here) Used in subclasses to rewind the stream to check contents and
                                 * change the TokenisationResult if required.
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    return new TokenisationResult(tokenType, nextState);
                                };
                                /**
                                 * Match a char to an operator.
                                 *
                                 * @param c char to check
                                 * @return non-null TokenType if the char matches an operator.
                                 */
                                AbstractTokenisationState.prototype.matchOperators = function (c, stream) {
                                    var result = null;
                                    switch ((c)) {
                                        case SasLanguage.AMPERSAND:
                                        case SasLanguage.ASTERISK:
                                        case SasLanguage.AT:
                                        case SasLanguage.BACKTICK:
                                        case SasLanguage.BROKEN_BAR:
                                        case SasLanguage.CARET:
                                        case SasLanguage.COLON:
                                        case SasLanguage.COMMA:
                                        case SasLanguage.DOLLAR:
                                        case SasLanguage.DOT:
                                        case SasLanguage.EXCLAMATION:
                                        case SasLanguage.EQUALS:
                                        case SasLanguage.FORWARD_SLASH:
                                        case SasLanguage.GREATER_THAN:
                                        case SasLanguage.HASH:
                                        case SasLanguage.LESS_THAN:
                                        case SasLanguage.MINUS:
                                        case SasLanguage.OPERATOR_NOT:
                                        case SasLanguage.PIPE:
                                        case SasLanguage.PLUS:
                                        case SasLanguage.QUESTION_MARK:
                                            result = TokenType.punctuation;
                                            break;
                                    }
                                    return result;
                                };
                                /**
                                 * Match a char to a bracket.
                                 *
                                 * @param c
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.matchBrackets = function (c) {
                                    switch ((c)) {
                                        case SasLanguage.BRACKET_OPEN:
                                        case SasLanguage.BRACKET_CLOSE:
                                            return TokenType.parenthesis;
                                        case SasLanguage.BRACKET_CURLY_OPEN:
                                        case SasLanguage.BRACKET_CURLY_CLOSE:
                                            return TokenType.curlybrace;
                                        case SasLanguage.BRACKET_SQUARE_OPEN:
                                        case SasLanguage.BRACKET_SQUARE_CLOSE:
                                            return TokenType.squarebracket;
                                    }
                                    return null;
                                };
                                /**
                                 * Match just digit characters in the stream. Used as width of format.
                                 *
                                 * @param stream
                                 * @return digits found as a String or empty if none found.
                                 */
                                AbstractTokenisationState.prototype.matchDigits = function (stream) {
                                    var startOffset = stream.getOffset();
                                    while ((!stream.eos())) {
                                        if (!SasLanguage.isDigit(stream.peek())) {
                                            break;
                                        }
                                        else {
                                            stream.advance(1);
                                        }
                                    }
                                    ;
                                    return stream.peekBack(startOffset);
                                };
                                /**
                                 * Match a number in the stream.
                                 *
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.matchNumbers = function (stream) {
                                    var startPos = stream.getOffset();
                                    var lastValidIndex = stream.getOffset();
                                    var lastValidState = null;
                                    var state = null;
                                    while ((!stream.eos())) {
                                        var c = stream.next();
                                        if (state == null) {
                                            if (SasLanguage.isDigit(c)) {
                                                state = state_1.MatchNumberState.INT;
                                                lastValidState = state;
                                                lastValidIndex = stream.getOffset();
                                            }
                                            else if (c == SasLanguage.DOT) {
                                                state = state_1.MatchNumberState.FLOAT_NO_EXP;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.HEX_CONTINUED) {
                                            if (SasLanguage.isHexEnd(c)) {
                                                state = state_1.MatchNumberState.HEX;
                                                break;
                                            }
                                            else if (!SasLanguage.isDigit(c) && !SasLanguage.isHexDigit(c)) {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.INT) {
                                            if (c == SasLanguage.EXPONENT || c == SasLanguage.EXPONENT_UPPERCASE) {
                                                state = state_1.MatchNumberState.INT_EXP_STARTED;
                                            }
                                            else if (SasLanguage.isHexDigit(c)) {
                                                state = state_1.MatchNumberState.HEX_CONTINUED;
                                            }
                                            else if (SasLanguage.isHexEnd(c)) {
                                                state = state_1.MatchNumberState.HEX;
                                                break;
                                            }
                                            else if (SasLanguage.isDigit(c)) {
                                                lastValidIndex = stream.getOffset();
                                                continue;
                                            }
                                            else if (c == SasLanguage.DOT) {
                                                state = state_1.MatchNumberState.FLOAT_NO_EXP;
                                                lastValidIndex = stream.getOffset();
                                                lastValidState = state;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.FLOAT_NO_EXP) {
                                            if (SasLanguage.isDigit(c)) {
                                                lastValidIndex = stream.getOffset();
                                                continue;
                                            }
                                            else if (c == SasLanguage.EXPONENT || c == SasLanguage.EXPONENT_UPPERCASE) {
                                                state = state_1.MatchNumberState.FLOAT_EXP_STARTED;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.FLOAT_EXP_STARTED) {
                                            if (SasLanguage.isDigit(c)) {
                                                state = state_1.MatchNumberState.FLOAT_EXP;
                                                lastValidIndex = stream.getOffset();
                                                lastValidState = state;
                                            }
                                            else if (c == SasLanguage.MINUS || c == SasLanguage.PLUS) {
                                                state = state_1.MatchNumberState.FLOAT_EXP_SIGNED;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.INT_EXP_STARTED) {
                                            if (SasLanguage.isDigit(c)) {
                                                state = state_1.MatchNumberState.INT_EXP;
                                                lastValidIndex = stream.getOffset();
                                                lastValidState = state;
                                            }
                                            else if (c == SasLanguage.MINUS || c == SasLanguage.PLUS) {
                                                state = state_1.MatchNumberState.FLOAT_EXP_SIGNED;
                                            }
                                            else if (SasLanguage.isHexDigit(c)) {
                                                state = state_1.MatchNumberState.HEX_CONTINUED;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.INT_EXP) {
                                            if (SasLanguage.isDigit(c)) {
                                                state = state_1.MatchNumberState.INT_EXP;
                                                lastValidIndex = stream.getOffset();
                                                lastValidState = state;
                                            }
                                            else if (SasLanguage.isHexDigit(c)) {
                                                state = state_1.MatchNumberState.HEX_CONTINUED;
                                            }
                                            else if (SasLanguage.isHexEnd(c)) {
                                                state = state_1.MatchNumberState.HEX;
                                                break;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.FLOAT_EXP_SIGNED) {
                                            if (SasLanguage.isDigit(c)) {
                                                state = state_1.MatchNumberState.FLOAT_EXP;
                                                lastValidIndex = stream.getOffset();
                                                lastValidState = state;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else if (state == state_1.MatchNumberState.FLOAT_EXP) {
                                            if (SasLanguage.isDigit(c)) {
                                                lastValidIndex = stream.getOffset();
                                                continue;
                                            }
                                            else {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                    }
                                    ;
                                    if (state == state_1.MatchNumberState.INT) {
                                        return TokenType.int_literal;
                                    }
                                    if (state == state_1.MatchNumberState.HEX) {
                                        return TokenType.hex_literal;
                                    }
                                    if (state == state_1.MatchNumberState.FLOAT_NO_EXP && lastValidIndex > startPos || state == state_1.MatchNumberState.FLOAT_EXP || state == state_1.MatchNumberState.INT_EXP) {
                                        return TokenType.float_literal;
                                    }
                                    if (state == state_1.MatchNumberState.FLOAT_EXP_STARTED || state == state_1.MatchNumberState.FLOAT_EXP_SIGNED || state == state_1.MatchNumberState.HEX_CONTINUED) {
                                        stream.setOffset(lastValidIndex);
                                        if (lastValidState == state_1.MatchNumberState.INT) {
                                            return TokenType.int_literal;
                                        }
                                        if (lastValidState == state_1.MatchNumberState.FLOAT_NO_EXP) {
                                            return TokenType.float_literal;
                                        }
                                    }
                                    stream.setOffset(startPos);
                                    return null;
                                };
                                /**
                                 * Match a string literal in the stream.
                                 *
                                 * @param stream
                                 * @param quoteChar
                                 * @return null if there is no string literal, {@link TokenType#string_literal} or
                                 * {@link TokenType#date_time_literal} if there is a string or date-time literal or return
                                 * {@link TokenType#string_literal_fragment} or
                                 * {@link TokenType#date_time_literal_fragment} if there is a fragment thereof.
                                 */
                                AbstractTokenisationState.prototype.matchStrings = function (stream, quoteChar) {
                                    if (!SasLanguage.isStringLiteralBoundaryChar(quoteChar)) {
                                        return null;
                                    }
                                    stream.skip(1);
                                    return this.matchStringsAfterQuote(stream, quoteChar);
                                };
                                /**
                                 * Given that the stream contains a quote char, continue matching the string literal from after the
                                 * quote char.
                                 *
                                 * @param stream
                                 * @param quoteChar
                                 * @return {@link TokenType#string_literal_fragment} or
                                 * {@link TokenType#date_time_literal_fragment} or {@link TokenType#string_literal} or
                                 * {@link TokenType#date_time_literal}
                                 */
                                AbstractTokenisationState.prototype.matchStringsAfterQuote = function (stream, quoteChar) {
                                    while ((!stream.eos())) {
                                        var c = stream.next();
                                        var nextC = !stream.eos() ? stream.peek() : SasLanguage.NULL_CHARACTER;
                                        if (c == quoteChar) {
                                            var tokenType = this.getTokenTypeOnMatchStringQuoteChar(nextC, quoteChar, stream);
                                            if (tokenType != null) {
                                                return tokenType;
                                            }
                                        }
                                        else if (quoteChar == SasLanguage.DOUBLE_QUOTE && ((c == SasLanguage.PERCENT || c == SasLanguage.AMPERSAND) && SasLanguage.isIdentifierStartChar(nextC)) || (c == SasLanguage.AMPERSAND && this.containsMacroVariableAtCurrentPosition(stream))) {
                                            stream.backup(1);
                                            return this.getStringLiteralFragmentTokenType(stream, quoteChar);
                                        }
                                    }
                                    ;
                                    return TokenType.string_literal_fragment;
                                };
                                /**
                                 * In {@link #matchStrings(ITokenisationStream, char)}, if a macro variable
                                 * or invocation is encountered, then it's a fragment: read ahead in the
                                 * stream to see whether it's a date_time. Stream offset unchanged.
                                 *
                                 * @param stream
                                 * @param quoteChar
                                 * @return {@link TokenType#string_literal_fragment} or
                                 * {@link TokenType#date_time_literal_fragment}
                                 */
                                AbstractTokenisationState.prototype.getStringLiteralFragmentTokenType = function (stream, quoteChar) {
                                    var offset = stream.getOffset();
                                    try {
                                        while ((!stream.eos())) {
                                            var c = stream.next();
                                            var nextC = !stream.eos() ? stream.peek() : SasLanguage.NULL_CHARACTER;
                                            if (c == quoteChar) {
                                                var tokenType = this.getTokenTypeOnMatchStringQuoteChar(nextC, quoteChar, stream);
                                                if (tokenType == TokenType.date_time_literal) {
                                                    return TokenType.date_time_literal_fragment;
                                                }
                                                else if (tokenType != null) {
                                                    break;
                                                }
                                            }
                                        }
                                        ;
                                    }
                                    finally {
                                        stream.setOffset(offset);
                                    }
                                    ;
                                    return TokenType.string_literal_fragment;
                                };
                                /**
                                 * In {@link #matchStrings(ITokenisationStream, char)}, if the quoteChar has
                                 * been found, check the next peek char to see what the token type is.
                                 * Stream is advanced if there's an escaped quoteChar, or there is a literal
                                 * suffix after the quote char e.g. B, X, N, DT, D, T.
                                 *
                                 * @param nextC
                                 * next character peek from the stream
                                 * @param quoteChar
                                 * @param stream
                                 * @return {@link TokenType#date_time_literal} for &lt;quoteChar>d or
                                 * &lt;quoteChar>dt or &lt;quoteChar>t. or null if it's two
                                 * quoteChars together (escape).
                                 */
                                AbstractTokenisationState.prototype.getTokenTypeOnMatchStringQuoteChar = function (nextC, quoteChar, stream) {
                                    if (nextC == quoteChar) {
                                        stream.skip(1);
                                        return null;
                                    }
                                    else {
                                        var tokenType = TokenType.string_literal;
                                        switch ((nextC)) {
                                            case SasLanguage.NAME_LITERAL:
                                            case SasLanguage.NAME_LITERAL_UPPERCASE:
                                                tokenType = TokenType.identifier_string_literal;
                                            case SasLanguage.BINARY_LITERAL:
                                            case SasLanguage.HEX_LITERAL:
                                            case SasLanguage.BINARY_LITERAL_UPPERCASE:
                                            case SasLanguage.HEX_LITERAL_UPPERCASE:
                                                stream.skip(1);
                                                break;
                                            default:
                                                if (nextC == SasLanguage.DATE_LITERAL || nextC == SasLanguage.DATE_LITERAL_UPPERCASE) {
                                                    stream.skip(1);
                                                    nextC = !stream.eos() ? stream.peek() : SasLanguage.NULL_CHARACTER;
                                                    tokenType = TokenType.date_time_literal;
                                                }
                                                if (nextC == SasLanguage.TIME_LITERAL || nextC == SasLanguage.TIME_LITERAL_UPPERCASE) {
                                                    stream.skip(1);
                                                    tokenType = TokenType.date_time_literal;
                                                }
                                        }
                                        return tokenType;
                                    }
                                };
                                /**
                                 * Looks for a match for an identifier returning it in upper case.
                                 *
                                 * @param stream - The stream being read
                                 * @return The identifier in upper case, or null if no valid identifier could be found
                                 */
                                AbstractTokenisationState.prototype.matchIdentifier = function (stream) {
                                    var str = this.matchIdentifierSameCase(stream);
                                    return str != null ? str.toUpperCase() : str;
                                };
                                /**
                                 * Looks for a match for an identifier, but does not make upper case.
                                 *
                                 * @param stream - The stream being read
                                 * @return The identifier, or null if no valid identifier could be found
                                 */
                                AbstractTokenisationState.prototype.matchIdentifierSameCase = function (stream) {
                                    var result = null;
                                    if (!stream.eos()) {
                                        var startOffset = stream.getOffset();
                                        var c = stream.next();
                                        if (SasLanguage.isIdentifierStartChar(c)) {
                                            while ((!stream.eos())) {
                                                c = stream.next();
                                                if (!SasLanguage.isIdentifierChar(c)) {
                                                    stream.backup(1);
                                                    break;
                                                }
                                            }
                                            ;
                                            result = stream.peekBack(startOffset);
                                        }
                                        else {
                                            stream.backup(1);
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * Look for a matching format: <code>[$]format[w].[d]</code>
                                 *
                                 * $ - Denotes a character format, format is numeric in its absence.
                                 * format - The format name.
                                 * w - specifies the format width, which for most formats is the number of columns in the output
                                 * data.
                                 * d - specifies an optional decimal scaling factor in the numeric formats.
                                 * Formats always contain a period (.) as a part of the name. If you omit the w and d values defaults
                                 * will be used (e.g. DDMMYY. will run successfully)
                                 *
                                 * If the depth is an identifier assume it's not a format but an object e.g. a.b
                                 *
                                 * @param stream
                                 * @return Array[0] TokenType ({@link TokenType#format} or
                                 * {@link TokenType#format}). Array[1] - String representing the format, Returns null if no
                                 * evidence of a format was found.
                                 */
                                AbstractTokenisationState.prototype.matchFormat = function (stream) {
                                    var result = null;
                                    if (!stream.eos()) {
                                        var offset = stream.getOffset();
                                        var prepend = "";
                                        if (SasLanguage.DOLLAR == stream.peek()) {
                                            prepend += SasLanguage.DOLLAR;
                                            stream.next();
                                        }
                                        var identifier = this.matchIdentifier(stream);
                                        var widthDigits = null;
                                        if (identifier == null || identifier.length == 0) {
                                            widthDigits = this.matchDigits(stream);
                                        }
                                        var nextChar = null;
                                        if (!stream.eos()) {
                                            nextChar = stream.peek();
                                        }
                                        var dollar = SasLanguage.asString(SasLanguage.DOLLAR);
                                        if ((identifier != null && identifier.length > 0) || (widthDigits != null && widthDigits.length > 0) || (prepend === dollar)) {
                                            var formatString = "";
                                            var tokenType = null;
                                            if (prepend != null) {
                                                formatString += prepend;
                                            }
                                            if (identifier != null) {
                                                formatString += identifier;
                                            }
                                            if (widthDigits != null) {
                                                formatString += widthDigits;
                                            }
                                            var decimalDigits = null;
                                            if (nextChar != null && SasLanguage.DOT == nextChar) {
                                                stream.next();
                                                tokenType = TokenType.format;
                                                decimalDigits = this.matchDigits(stream);
                                            }
                                            else {
                                                if (prepend.length > 0 && !(formatString === dollar)) {
                                                    tokenType = TokenType.format_incomplete;
                                                }
                                            }
                                            if (stream.eos() || SasLanguage.isIdentifierSeparatorCharacter(stream.peek())) {
                                                if (nextChar != null && !SasLanguage.isWhitespace(nextChar)) {
                                                    formatString += nextChar;
                                                    if (decimalDigits != null) {
                                                        formatString += decimalDigits;
                                                    }
                                                }
                                            }
                                            else {
                                                tokenType = null;
                                            }
                                            if (tokenType != null) {
                                                result = new state_1.MultipleValueResult(tokenType, formatString);
                                            }
                                        }
                                        if (result == null) {
                                            stream.setOffset(offset);
                                        }
                                        else if (identifier != null && StringUtils.endsWith(identifier, ".")) {
                                            var statementParentState = this.getStatementParentState();
                                            if (statementParentState != null && statementParentState["__interfaces"] != null && statementParentState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState") >= 0) {
                                                var definedComponents = statementParentState.getDefinedComponents();
                                                var componentName = identifier.substring(0, identifier.length - 1);
                                                if (definedComponents != null && definedComponents.containsKey(componentName)) {
                                                    result = null;
                                                }
                                            }
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * Walk up the tree return first MacroDefinitionState.
                                 *
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.getParentMacro = function () {
                                    if (this.parent != null) {
                                        return this.parent.getParentMacro();
                                    }
                                    return null;
                                };
                                AbstractTokenisationState.prototype.getParent = function () {
                                    return this.parent;
                                };
                                /**
                                 * See if the stream contains a macro variable at its current position: must start with at one or
                                 * more {@link SasLanguage#AMPERSAND} followed by the identifier start char. Stream is unchanged on
                                 * return.
                                 *
                                 * @param stream
                                 * @return true if found
                                 */
                                AbstractTokenisationState.prototype.containsMacroVariableAtCurrentPosition = function (stream) {
                                    var contains = false;
                                    var offset = stream.getOffset();
                                    var ampersandPrefix = false;
                                    while ((!stream.eos() && !contains)) {
                                        var c = stream.next();
                                        if (c != SasLanguage.AMPERSAND) {
                                            if (ampersandPrefix) {
                                                contains = SasLanguage.isIdentifierStartChar(c);
                                            }
                                            break;
                                        }
                                        else {
                                            ampersandPrefix = true;
                                        }
                                    }
                                    ;
                                    stream.setOffset(offset);
                                    return contains;
                                };
                                /**
                                 *
                                 * <br/>
                                 * Supports:<br/>
                                 * Simple macro variable <br/>
                                 * &identifier<br/>
                                 * &identifier.<br/>
                                 * <br/>
                                 * Double ampersand macro variable<br/>
                                 * &&identifier<br/>
                                 * &&identifier.<br/>
                                 * &&identifier&identifier<br/>
                                 * &&identifier&identifier.<br/>
                                 * The last two though don't need to be one token.<br/>
                                 * <br/>
                                 * Triple ampersand macro variable<br/>
                                 * &&&identifier<br/>
                                 * &&&identifier.identifier <-- This should all be marked as macro variable.<br/>
                                 * &&&identifier&identifier.identifier <-- This should all be marked as macro variable.<br/>
                                 *
                                 * @param stream
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.matchMacroVariable = function (stream) {
                                    if (!this.containsMacroVariableAtCurrentPosition(stream)) {
                                        return null;
                                    }
                                    var dots = 0;
                                    var afterAmpersand = false;
                                    while ((true)) {
                                        if (stream.eos()) {
                                            break;
                                        }
                                        var c = stream.next();
                                        if (!afterAmpersand) {
                                            if (c == SasLanguage.AMPERSAND) {
                                                afterAmpersand = true;
                                            }
                                            else if (c == '.') {
                                                dots--;
                                                if (dots == 0) {
                                                    break;
                                                }
                                            }
                                            else if (!SasLanguage.isIdentifierChar(c)) {
                                                stream.backup(1);
                                                break;
                                            }
                                        }
                                        else {
                                            dots++;
                                            afterAmpersand = false;
                                        }
                                    }
                                    ;
                                    return TokenType.macro_variable;
                                };
                                AbstractTokenisationState.prototype.getSasLanguageSupporter = function () {
                                    return this.sasLanguageSupporter;
                                };
                                AbstractTokenisationState.prototype.getStateTransitionHelper = function () {
                                    return this.stateTransitionHelper;
                                };
                                AbstractTokenisationState.prototype.getFunctionHelper = function () {
                                    return this.functionHelper;
                                };
                                AbstractTokenisationState.prototype.getTranspilableCollections = function () {
                                    return this.transpilableCollections;
                                };
                                /**
                                 * Find a component from the {@link #statementParentState}
                                 *
                                 * @param identifier name of component
                                 * @return {@link Component} or null if not found.
                                 */
                                AbstractTokenisationState.prototype.lookupComponent = function (identifier) {
                                    var nextComponent = null;
                                    var statementParentState = this.getStatementParentState();
                                    if (statementParentState != null && statementParentState["__interfaces"] != null && statementParentState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState") >= 0) {
                                        var definedComponents = statementParentState.getDefinedComponents();
                                        if (definedComponents != null) {
                                            nextComponent = definedComponents.get(identifier);
                                        }
                                    }
                                    return nextComponent;
                                };
                                /**
                                 * Helper method to fetch the singleton instance of {@link SasStepInfo} for a datastep from
                                 * {@link SasLanguageSupporter}.
                                 *
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.getDataStepInfoSingleton = function () {
                                    return this.sasLanguageSupporter != null ? this.sasLanguageSupporter.getDataStep() : null;
                                };
                                /**
                                 * Hashcode is problematic with transpiling into Javascript (there is no default implementation in
                                 * Javascript, so everything needs its own implementation), so leave it a default value which will
                                 * work, just highly inefficient if the state is used as a key in a HashMap (which it isn't at the
                                 * moment).
                                 */
                                AbstractTokenisationState.prototype.hashCode = function () {
                                    return 0;
                                };
                                AbstractTokenisationState.prototype.equals = function (obj) {
                                    if (this == obj) {
                                        return true;
                                    }
                                    if (obj == null) {
                                        return false;
                                    }
                                    var that = obj;
                                    if (!(this.getName() === that.getName())) {
                                        return false;
                                    }
                                    if (!ObjectUtils.equalObjs(this.parent, that.parent)) {
                                        return false;
                                    }
                                    return true;
                                };
                                AbstractTokenisationState.prototype.toString = function () {
                                    return this.getName() + " [" + this.getFieldsString() + this.getStatementParentStateFieldString() + "parent=" + this.getStateName(this.parent) + "]";
                                };
                                AbstractTokenisationState.prototype.getStateName = function (state) {
                                    if (state != null && state["__interfaces"] != null && state["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.StatementParentState") >= 0) {
                                        return state.getName();
                                    }
                                    return state != null ? state.toString() : "";
                                };
                                /**
                                 * for subclasses to add additional string of fields into toString() method. Should end with ", ".
                                 *
                                 * @return
                                 */
                                AbstractTokenisationState.prototype.getFieldsString = function () {
                                    return "";
                                };
                                AbstractTokenisationState.prototype.getStatementParentStateFieldString = function () {
                                    var statementParentState = this.getStatementParentState();
                                    return statementParentState != this.parent ? "statementParentState=" + this.getStateName(statementParentState) + ", " : "statementParentState/";
                                };
                                AbstractTokenisationState.prototype.containsOpenBracket = function (stream) {
                                    var offset = stream.getOffset();
                                    try {
                                        stream.skipSpace();
                                        if (stream.available() > 0 && stream.peek() == SasLanguage.BRACKET_OPEN) {
                                            return true;
                                        }
                                        return false;
                                    }
                                    finally {
                                        stream.setOffset(offset);
                                    }
                                    ;
                                };
                                return AbstractTokenisationState;
                            }());
                            state_1.AbstractTokenisationState = AbstractTokenisationState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for handling the ARRAY statement.
                             *
                             * @author ml
                             */
                            var ArrayNameState = /** @class */ (function (_super) {
                                __extends(ArrayNameState, _super);
                                function ArrayNameState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.statementParentState = parent;
                                    return _this;
                                }
                                ArrayNameState.prototype.getStatementParentState = function () {
                                    return this.statementParentState;
                                };
                                /**
                                 * Overridden to use the identifier as the name of the array, which is then stored in a new copy of
                                 * the {@link ArrayDefinitionState}.
                                 */
                                ArrayNameState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var nextParent = this.getParent().copyAndAddArrayName(identifier);
                                    var arrayLanginfo = this.getSasLanguageSupporter().getDataStep().getLanguageInfo().getStatement(SasLanguage.ARRAY);
                                    var nextState = new state.StatementState(this.statementParentState, this, nextParent, arrayLanginfo);
                                    return this.createTokenisationResult(TokenType.identifier, nextState, stream);
                                };
                                ArrayNameState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ArrayNameState.prototype.getName = function () {
                                    return "ArrayNameState";
                                };
                                return ArrayNameState;
                            }(state.AbstractTokenisationState));
                            state.ArrayNameState = ArrayNameState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var EmptyLanguageInfo = com.wpc.wps.language.context.information.EmptyLanguageInfo;
                            /**
                             * Superclass for states that are expressions such as 'a=b', '(a eq 0) or b'.
                             *
                             * @author ml
                             */
                            var AbstractExpressionState = /** @class */ (function (_super) {
                                __extends(AbstractExpressionState, _super);
                                function AbstractExpressionState(statementParentState, parent, bracketCount, prevIdentifier, component) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.statementParentState = statementParentState;
                                    _this.bracketCount = bracketCount;
                                    _this.prevIdentifier = prevIdentifier;
                                    _this.component = component;
                                    return _this;
                                }
                                AbstractExpressionState.prototype.getStatementParentState = function () {
                                    return this.statementParentState;
                                };
                                AbstractExpressionState.prototype.getCallRoutine = function (identifier) {
                                    var result = null;
                                    var sls = this.getSasLanguageSupporter();
                                    if (sls != null) {
                                        result = sls.getCallRoutine(identifier);
                                    }
                                    return result;
                                };
                                /**
                                 * When there is an error, we need to return an UnknownStatementState, by default it has the parent
                                 * afterErrorState so that after the semicolon it returns to that state.
                                 *
                                 * @return
                                 */
                                AbstractExpressionState.prototype.createUnknownStatementState = function () {
                                    return new state.UnknownStatementState(this.statementParentState, this);
                                };
                                /**
                                 * Check if it's a missing character.<br/>
                                 * Supports: <br/>
                                 * . <br/>
                                 *
                                 * @param c last char
                                 * @return
                                 */
                                AbstractExpressionState.prototype.isMissingChar = function (c) {
                                    return SasLanguage.isMissingOperator(c);
                                };
                                AbstractExpressionState.prototype.getFieldsString = function () {
                                    return "bracketCount=" + this.bracketCount + ", prevIdentifier=" + this.prevIdentifier + ", component=" + this.component + ", ";
                                };
                                AbstractExpressionState.prototype.getBracketCount = function () {
                                    return this.bracketCount;
                                };
                                /**
                                 * Fetch the {@link LanguageInfo} for a function.
                                 *
                                 * Uses {@link FunctionHelper}, but also checks for component methods.
                                 *
                                 * @param functionName name of function
                                 * @return
                                 */
                                AbstractExpressionState.prototype.getGlobalFunction = function (functionName) {
                                    var globalFunction = this.functionHelper.getFunctionLanguageInfo(this, functionName);
                                    if (globalFunction == null && this.component != null && this.component.getMethods().containsKey(functionName)) {
                                        globalFunction = EmptyLanguageInfo.INSTANCE;
                                    }
                                    return globalFunction;
                                };
                                AbstractExpressionState.DEFAULT_BRACKET_COUNT = 0;
                                /**
                                 * if starting this state after an identifier the bracket count is 0
                                 */
                                AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER = 0;
                                /**
                                 * if starting this state after a bracket the bracketcount is 1
                                 */
                                AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_BRACKET = 1;
                                return AbstractExpressionState;
                            }(state.AbstractTokenisationState));
                            state.AbstractExpressionState = AbstractExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var EmptyLanguageInfo = com.wpc.wps.language.context.information.EmptyLanguageInfo;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var CallRoutineChooserState = /** @class */ (function (_super) {
                                __extends(CallRoutineChooserState, _super);
                                function CallRoutineChooserState(statementParentState, parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.statementParentState = statementParentState;
                                    return _this;
                                }
                                CallRoutineChooserState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var langInfo = null;
                                    var nextState = null;
                                    var tokenType;
                                    langInfo = this.getSasLanguageSupporter().getCallRoutine(identifier);
                                    if (langInfo == null && (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) && (SasLanguage.REPORT === this.statementParentState.getCurrentStep().getLanguageInfo().getName()) && (SasLanguage.DEFINE === identifier)) {
                                        langInfo = EmptyLanguageInfo.INSTANCE;
                                    }
                                    if (langInfo != null) {
                                        tokenType = TokenType._function;
                                    }
                                    else {
                                        tokenType = TokenType.identifier;
                                    }
                                    nextState = new state.FunctionState(this.statementParentState, this, this.parent, langInfo, state.FunctionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER);
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                CallRoutineChooserState.prototype.getName = function () {
                                    return "CallRoutineChooserState";
                                };
                                return CallRoutineChooserState;
                            }(state.AbstractTokenisationState));
                            state.CallRoutineChooserState = CallRoutineChooserState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state_2) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var EmptyLanguageInfo = com.wpc.wps.language.context.information.EmptyLanguageInfo;
                            var SpeculativeStreamTokeniser = com.wpc.wps.language.context.tokenisation.SpeculativeStreamTokeniser;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * Expression state that contains a boolean, e.g. (a or b) or any expression with operators e.g. (a & b).
                             */
                            var AssignmentExpressionState = /** @class */ (function (_super) {
                                __extends(AssignmentExpressionState, _super);
                                function AssignmentExpressionState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                    var _this = _super.call(this, statementParentState, parent, bracketCount, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    _this.internalState = conditionState;
                                    return _this;
                                }
                                /**
                                 * Create an {@link AssignmentExpressionState} with different conditionState. BracketCount is
                                 * the same, as is component, but prevChar, prevPrevChar and prevIdentifier are reset.
                                 *
                                 * @param newConditionState
                                 * @return
                                 */
                                AssignmentExpressionState.prototype.createExpressionStateMinimal = function (newConditionState) {
                                    return this.createExpressionState(newConditionState, this.bracketCount, null, null);
                                };
                                /**
                                 * Create an instance of {@link AssignmentExpressionState} of the same type with the same
                                 * parent, but different (final) parameters. Needed as it's not possible to invoke the constructor of
                                 * a sub class.
                                 *
                                 * @param conditionState
                                 * @param bracketCount
                                 * @param prevChar
                                 * @param prevPrevChar
                                 * @param prevIdentifier
                                 *
                                 * @return
                                 */
                                AssignmentExpressionState.prototype.createExpressionState = function (conditionState, bracketCount, prevIdentifier, component) {
                                    return new AssignmentExpressionState(this.statementParentState, this.parent, bracketCount, conditionState, prevIdentifier, component);
                                };
                                /**
                                 * Overridden to pick up keywords in various InternalConditionStates.
                                 */
                                AssignmentExpressionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var result = null;
                                    var nextInternalState = null;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                            result = this.tokeniseIdentifier_handle_NNS(identifier, stream);
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND:
                                            result = this.tokeniseIdentifier_handle_NNS_FOUND(identifier, stream);
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.OF:
                                            nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.OF;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MACRO:
                                            result = this.tokeniseIdentifier_handle_MACRO(identifier, stream);
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT:
                                            if (this.component != null && this.component.getMethods() != null && this.component.getMethods().containsKey(identifier)) {
                                                result = this.createTokenisationResult(TokenType.keyword, new state_2.FunctionState(this.statementParentState, this, this.createExpressionStateMinimal(AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND), EmptyLanguageInfo.INSTANCE, state_2.FunctionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER), stream);
                                            }
                                            else if (this.component != null && this.component.getAttributes() != null && this.component.getAttributes().containsKey(identifier)) {
                                                result = this.createTokenisationResult(TokenType.keyword, this.createExpressionStateMinimal(AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND), stream);
                                            }
                                            else {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING:
                                            if (!this.expressionSupportsSpaceSeparatedValues()) {
                                                result = this.tokeniseIdentifier_handle_NNS_FOUND(identifier, stream);
                                            }
                                            else {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX:
                                            nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN:
                                            if ((this.statementParentState != null && this.statementParentState["__interfaces"] != null && this.statementParentState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState") >= 0) && this.statementParentState.getDefinedArrayNames().contains(identifier)) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.DOT_BC:
                                            if (identifier.length == 1) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.MISSING;
                                                break;
                                            }
                                        default:
                                    }
                                    if (nextInternalState != null) {
                                        var nextComponent = this.lookupComponent(identifier);
                                        var nextState = this.createExpressionState(nextInternalState, this.bracketCount, identifier, nextComponent);
                                        result = this.createTokenisationResult(TokenType.identifier, nextState, stream);
                                    }
                                    else if (result == null) {
                                        result = this.createTokenisationResult(TokenType.identifier, this.createUnknownStatementState(), stream);
                                    }
                                    return result;
                                };
                                AssignmentExpressionState.prototype.tokeniseFormat = function (tokenType, identifier, stream) {
                                    var nextState = null;
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MACRO:
                                            nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.OF:
                                            error = true;
                                            break;
                                        default:
                                            break;
                                    }
                                    if (error) {
                                        return new TokenisationResult(TokenType.format, this.createUnknownStatementState());
                                    }
                                    if (identifier.length > 1 && identifier.charAt(0) != SasLanguage.DOLLAR && identifier.charAt(identifier.length - 1) == SasLanguage.DOT) {
                                        nextState = this.createExpressionStateMinimal(AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT);
                                    }
                                    else {
                                        nextState = this.createExpressionStateMinimal(nextInternalState);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Handles {@link #tokeniseIdentifier(String, ITokenisationStream)} where our {@link #internalState}
                                 * is {@link AssignmentExpressionInternalState#MACRO}. Calls both
                                 * {@link #tokeniseIdentifier_handle_NNS(String, ITokenisationStream)} and
                                 * {@link #tokeniseIdentifier_handle_NNS_FOUND(String, ITokenisationStream)} to check for
                                 * keywords.
                                 *
                                 * @param identifier - The identifier
                                 * @param stream - The stream
                                 * @return The new TokenisationResult
                                 */
                                AssignmentExpressionState.prototype.tokeniseIdentifier_handle_MACRO = function (identifier, stream) {
                                    var result = this.tokeniseIdentifier_handle_NNS_FOUND(identifier, stream);
                                    if (result == null) {
                                        var globalState = null;
                                        if (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) {
                                            globalState = this.statementParentState.getParent();
                                        }
                                        else if (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.GlobalState) {
                                            globalState = this.statementParentState;
                                        }
                                        else if (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.MacroDefinitionState) {
                                            globalState = new state_2.GlobalState(this.statementParentState);
                                        }
                                        result = this.stateTransitionHelper.tokeniseIdentifierAfterMacro(identifier, this.statementParentState, globalState, this, stream);
                                    }
                                    if (result == null || result.getTokenType() == TokenType.identifier) {
                                        result = this.tokeniseIdentifier_handle_NNS(identifier, stream);
                                    }
                                    if (result == null) {
                                        result = this.createTokenisationResult(TokenType.identifier, null, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Handles {@link #tokeniseIdentifier(String, ITokenisationStream)} where our {@link #internalState}
                                 * is {@link AssignmentExpressionInternalState#NNS}.
                                 *
                                 * @param identifier - The identifier
                                 * @param stream - The stream
                                 * @return The new TokenisationResult
                                 */
                                AssignmentExpressionState.prototype.tokeniseIdentifier_handle_NNS = function (identifier, stream) {
                                    var result = null;
                                    var nextState = null;
                                    var tokenType;
                                    if ((SasLanguage.NOT === identifier)) {
                                        tokenType = TokenType.keyword;
                                    }
                                    else if ((SasLanguage._NEW_ === identifier)) {
                                        tokenType = TokenType.keyword;
                                        nextState = new state_2.ComponentChooserState(this.statementParentState, this);
                                    }
                                    else if ((SasLanguage.OF === identifier)) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.createExpressionState(AssignmentExpressionState.AssignmentExpressionInternalState.OF, this.bracketCount, null, null);
                                    }
                                    else {
                                        if (this.containsOpenBracket(stream) && (this.getGlobalFunction(identifier) != null)) {
                                            tokenType = TokenType._function;
                                        }
                                        else {
                                            tokenType = TokenType.identifier;
                                        }
                                        var nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                        if (this.expressionSupportsSpaceSeparatedValues() && SasLanguage.isWhitespace(stream.peek())) {
                                            nextInternalState = this.internalState;
                                        }
                                        nextState = this.createExpressionState(nextInternalState, this.bracketCount, identifier, this.lookupComponent(identifier));
                                    }
                                    result = this.createTokenisationResult(tokenType, nextState, stream);
                                    return result;
                                };
                                /**
                                 * Handles {@link #tokeniseIdentifier(String, ITokenisationStream)} where our {@link #internalState}
                                 * is {@link AssignmentExpressionInternalState#NNS_FOUND}.
                                 *
                                 * @param identifier - The identifier
                                 * @param stream - The stream
                                 * @return The new TokenisationResult
                                 */
                                AssignmentExpressionState.prototype.tokeniseIdentifier_handle_NNS_FOUND = function (identifier, stream) {
                                    var result = null;
                                    var nextInternalState = null;
                                    var tokenType = TokenType.identifier;
                                    if ((SasLanguage.NOT === identifier)) {
                                        tokenType = TokenType.keyword;
                                    }
                                    else if (this.isComparisonMnemonic(identifier) || SasLanguage.isBooleanMnemonic(identifier)) {
                                        nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                        tokenType = TokenType.keyword;
                                    }
                                    else if ((SasLanguage.IN === identifier) || (SasLanguage.NOTIN === identifier)) {
                                        nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.IN;
                                        tokenType = TokenType.keyword;
                                    }
                                    if (nextInternalState != null) {
                                        var nextState = this.createExpressionState(nextInternalState, this.bracketCount, null, null);
                                        result = this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    else if (tokenType == TokenType.keyword) {
                                        result = this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    return result;
                                };
                                AssignmentExpressionState.prototype.isComparisonMnemonic = function (identifier) {
                                    return SasLanguage.isComparisonMnemonic(identifier);
                                };
                                /**
                                 * Implementation changes internal state where appropriate or raise an error if it's not.
                                 */
                                AssignmentExpressionState.prototype.tokeniseNumber = function (tokenType, stream) {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MACRO) {
                                        nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MISSING) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.IN) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.OF) {
                                        error = true;
                                    }
                                    if (error) {
                                        return new TokenisationResult(tokenType, this.createUnknownStatementState());
                                    }
                                    if (nextInternalState != this.internalState) {
                                        return new TokenisationResult(tokenType, this.createExpressionStateMinimal(nextInternalState));
                                    }
                                    return new TokenisationResult(tokenType);
                                };
                                /**
                                 * Implementation changes internal state where appropriate or raise an error if it's not.
                                 */
                                AssignmentExpressionState.prototype.getStateAfterString = function () {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MACRO) {
                                        nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.IN) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MISSING) {
                                        error = true;
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.OF) {
                                        error = true;
                                    }
                                    var nextState;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    else if (nextInternalState != this.internalState) {
                                        nextState = this.createExpressionStateMinimal(nextInternalState);
                                    }
                                    else {
                                        nextState = this;
                                    }
                                    return nextState;
                                };
                                /**
                                 * Implementation changes internal state where appropriate or raise an error if it's not. Slightly
                                 * different to {@link #getStateAfterString()} in that the string are treated as identifiers.
                                 */
                                AssignmentExpressionState.prototype.getStateAfterIdentifierString = function () {
                                    var nextState;
                                    if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT) {
                                        nextState = this.createExpressionStateMinimal(AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                    }
                                    else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.OF) {
                                        nextState = this;
                                    }
                                    else {
                                        nextState = this.getStateAfterString();
                                    }
                                    return nextState;
                                };
                                /**
                                 * Implementation changes state based on characters (and previous characters) being boolean,
                                 * conditional, concatenation, arithmetic or prefix. Raises error if in the wrong place.
                                 */
                                AssignmentExpressionState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var nextInternalState = this.internalState;
                                    var nextComponent = this.component;
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX:
                                            if (c != SasLanguage.COMMA && c != SasLanguage.MINUS && c != SasLanguage.DOT) {
                                                error = true;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MACRO:
                                            if (c == SasLanguage.ASTERISK) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                                var state = this.createExpressionState(nextInternalState, this.bracketCount, null, nextComponent);
                                                if (new SpeculativeStreamTokeniser().streamContainsUnknownStatement(stream, state)) {
                                                    return new TokenisationResult(TokenType.comment, new state_2.StatementCommentState(this.statementParentState));
                                                }
                                            }
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SAME:
                                            if (c == SasLanguage.DOT) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT;
                                            }
                                            else if (c == SasLanguage.CARET) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            }
                                            else if (c == SasLanguage.BACKTICK) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            }
                                            else if (c == SasLanguage.COLON && this.prevIdentifier != null) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            }
                                            else {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT:
                                            if (c != SasLanguage.DOT) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                            }
                                            else {
                                                error = true;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED:
                                            if (c != SasLanguage.COMMA && !this.isMissingChar(c) && c != SasLanguage.COLON && c != SasLanguage.MINUS) {
                                                error = true;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.OF:
                                            if (c == SasLanguage.COLON && this.prevIdentifier != null) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.OF;
                                            }
                                            else if (c == SasLanguage.COMMA) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                            }
                                            else if (c != SasLanguage.MINUS) {
                                                error = true;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN:
                                            if (c != SasLanguage.COLON) {
                                                error = true;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                            if (c == SasLanguage.DOT) {
                                                var offset = stream.getOffset();
                                                var peek = stream.peek();
                                                var identifierSeparator = SasLanguage.isIdentifierSeparatorCharacter(peek);
                                                var missing = false;
                                                if (identifierSeparator || ((peek).charCodeAt(0) >= ('a').charCodeAt(0) && (peek).charCodeAt(0) <= ('z').charCodeAt(0)) || ((peek).charCodeAt(0) >= ('A').charCodeAt(0) && (peek).charCodeAt(0) <= ('Z').charCodeAt(0)) || peek == SasLanguage.UNDERSCORE) {
                                                    missing = true;
                                                    if (!identifierSeparator) {
                                                        stream.next();
                                                        if (!(SasLanguage.isIdentifierSeparatorCharacter(stream.peek()) || this.containsBlockCommentStart(stream))) {
                                                            missing = false;
                                                            error = true;
                                                            stream.setOffset(offset);
                                                        }
                                                    }
                                                }
                                                if (missing) {
                                                    nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.MISSING;
                                                }
                                                else {
                                                    if (this.containsBlockCommentStart(stream)) {
                                                        nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.DOT_BC;
                                                    }
                                                }
                                            }
                                            break;
                                        default:
                                            error = true;
                                            break;
                                    }
                                    if (error) {
                                        return new TokenisationResult(tokenType, this.createUnknownStatementState());
                                    }
                                    var nextState = null;
                                    if (nextInternalState != this.internalState) {
                                        nextState = this.createExpressionState(nextInternalState, this.bracketCount, null, nextComponent);
                                        return new TokenisationResult(tokenType, nextState);
                                    }
                                    return new TokenisationResult(tokenType, nextState);
                                };
                                AssignmentExpressionState.prototype.containsBlockCommentStart = function (stream) {
                                    var offset = stream.getOffset();
                                    var b = stream.match(this.getBlockCommentStart()) > 0;
                                    stream.setOffset(offset);
                                    return b;
                                };
                                AssignmentExpressionState.prototype.tokeniseWhitespace = function (stream) {
                                    if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.DOT_BC) {
                                        return new TokenisationResult(null, this.createExpressionState(AssignmentExpressionState.AssignmentExpressionInternalState.MISSING, this.bracketCount, null, this.component));
                                    }
                                    return _super.prototype.tokeniseWhitespace.call(this, stream);
                                };
                                /**
                                 * Implementation increments or decrements bracketCount and changes state if in the correct state.
                                 * Also changes state where in an IN clause.
                                 */
                                AssignmentExpressionState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var result = null;
                                    var nextInternalState = this.internalState;
                                    var nextBracketCount = this.bracketCount;
                                    var error = false;
                                    switch ((c)) {
                                        case SasLanguage.BRACKET_OPEN:
                                            if (this.prevIdentifier != null) {
                                                var functionInfo = this.getGlobalFunction(this.prevIdentifier);
                                                result = this.createTokenisationResult(tokenType, new state_2.FunctionState(this.statementParentState, this, this, functionInfo, state_2.FunctionState.INITIAL_BRACKETCOUNT_ON_BRACKET), stream);
                                            }
                                            else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.IN) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED;
                                                nextBracketCount++;
                                            }
                                            else {
                                                nextBracketCount++;
                                            }
                                            break;
                                        case SasLanguage.BRACKET_CURLY_OPEN:
                                            if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX;
                                                nextBracketCount++;
                                            }
                                            else if (this.prevIdentifier != null || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MACRO) {
                                                result = this.createTokenisationResult(tokenType, new state_2.FunctionState(this.statementParentState, this, this, null, state_2.FunctionState.INITIAL_BRACKETCOUNT_ON_BRACKET), stream);
                                            }
                                            else {
                                                error = true;
                                            }
                                            break;
                                        case SasLanguage.BRACKET_SQUARE_OPEN:
                                            if (this.prevIdentifier != null || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MACRO) {
                                                result = this.createTokenisationResult(tokenType, new state_2.FunctionState(this.statementParentState, this, this, null, 1), stream);
                                            }
                                            else if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX) {
                                                nextBracketCount++;
                                            }
                                            else {
                                                error = true;
                                            }
                                            break;
                                        case SasLanguage.BRACKET_CLOSE:
                                            if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                            }
                                            if (this.bracketCount <= 0) {
                                                error = true;
                                            }
                                            else {
                                                nextBracketCount--;
                                            }
                                            break;
                                        case SasLanguage.BRACKET_CURLY_CLOSE:
                                            if (this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX) {
                                                nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                                nextBracketCount--;
                                                break;
                                            }
                                        case SasLanguage.BRACKET_SQUARE_CLOSE:
                                            if (this.bracketCount <= 0 || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.IN || this.internalState == AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED) {
                                                error = true;
                                            }
                                            else {
                                                nextBracketCount--;
                                            }
                                            break;
                                    }
                                    if (error) {
                                        result = new TokenisationResult(tokenType, this.createUnknownStatementState());
                                    }
                                    if (result == null) {
                                        result = new TokenisationResult(tokenType, this.createExpressionState(nextInternalState, nextBracketCount, null, null));
                                    }
                                    return result;
                                };
                                AssignmentExpressionState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                    var nextInternalState = AssignmentExpressionState.AssignmentExpressionInternalState.MACRO;
                                    if (nextInternalState != this.internalState) {
                                        return new TokenisationResult(tokenType, this.createExpressionStateMinimal(nextInternalState));
                                    }
                                    return new TokenisationResult(tokenType);
                                };
                                /**
                                 * Overridden so that when macro calls return the internal state has changed.
                                 */
                                AssignmentExpressionState.prototype.getNextStateAfterMacroState = function () {
                                    return this.createExpressionStateMinimal(AssignmentExpressionState.AssignmentExpressionInternalState.MACRO);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AssignmentExpressionState.prototype.expressionSupportsSpaceSeparatedValues = function () {
                                    return false;
                                };
                                AssignmentExpressionState.prototype.getFieldsString = function () {
                                    return "conditionState=" + this.internalState + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                AssignmentExpressionState.prototype.getName = function () {
                                    return "AssignmentExpressionState";
                                };
                                AssignmentExpressionState.prototype.getInternalState = function () {
                                    return this.internalState;
                                };
                                /**
                                 * Convert the {@link InternalTokenisationResult} into a {@link TokenisationResult}.
                                 *
                                 * @param result
                                 * @param stream
                                 * @return
                                 */
                                AssignmentExpressionState.prototype.convertInternalTokenisationResult = function (result, stream) {
                                    if (result.handled) {
                                        if (result.errorOccurred) {
                                            return this.createTokenisationResult(result.tokenType, new state_2.UnknownStatementState(this.statementParentState, this), stream);
                                        }
                                        if (result.tokenisationResult != null) {
                                            return result.tokenisationResult;
                                        }
                                        if (this.internalState != result.nextInternalState) {
                                            return this.createTokenisationResult(result.tokenType, this.createExpressionStateMinimal(result.nextInternalState), stream);
                                        }
                                        return this.createTokenisationResult(result.tokenType, null, stream);
                                    }
                                    return null;
                                };
                                return AssignmentExpressionState;
                            }(state_2.AbstractExpressionState));
                            state_2.AssignmentExpressionState = AssignmentExpressionState;
                            (function (AssignmentExpressionState) {
                                var AssignmentExpressionInternalState;
                                (function (AssignmentExpressionInternalState) {
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["NNS"] = 0] = "NNS";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["NNS_FOUND"] = 1] = "NNS_FOUND";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["FORMAT_OR_OBJECT"] = 2] = "FORMAT_OR_OBJECT";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["MISSING"] = 3] = "MISSING";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["MATRIX"] = 4] = "MATRIX";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["IS"] = 5] = "IS";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["IS_NOT"] = 6] = "IS_NOT";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["OF"] = 7] = "OF";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SAME"] = 8] = "SAME";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["IN"] = 9] = "IN";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["IN_STARTED"] = 10] = "IN_STARTED";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["MACRO"] = 11] = "MACRO";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["DOT_BC"] = 12] = "DOT_BC";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_LABEL"] = 13] = "SQL_LABEL";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_LENGTH"] = 14] = "SQL_LENGTH";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_LABEL_EQ"] = 15] = "SQL_LABEL_EQ";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_LENGTH_EQ"] = 16] = "SQL_LENGTH_EQ";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_FORMAT"] = 17] = "SQL_FORMAT";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_FORMAT_EQ"] = 18] = "SQL_FORMAT_EQ";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_CASE"] = 19] = "SQL_CASE";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_CASE_NNS_FOUND"] = 20] = "SQL_CASE_NNS_FOUND";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_WHEN"] = 21] = "SQL_WHEN";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_WHEN_OP"] = 22] = "SQL_WHEN_OP";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_WHEN_NNS_FOUND"] = 23] = "SQL_WHEN_NNS_FOUND";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_THEN"] = 24] = "SQL_THEN";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_THEN_NNS_FOUND"] = 25] = "SQL_THEN_NNS_FOUND";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_ELSE"] = 26] = "SQL_ELSE";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_ELSE_NNS_FOUND"] = 27] = "SQL_ELSE_NNS_FOUND";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["SQL_AS"] = 28] = "SQL_AS";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["BTRIM"] = 29] = "BTRIM";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["BTRIM_SPEC"] = 30] = "BTRIM_SPEC";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["BTRIM_CHAR"] = 31] = "BTRIM_CHAR";
                                    AssignmentExpressionInternalState[AssignmentExpressionInternalState["BTRIM_FROM"] = 32] = "BTRIM_FROM";
                                })(AssignmentExpressionInternalState = AssignmentExpressionState.AssignmentExpressionInternalState || (AssignmentExpressionState.AssignmentExpressionInternalState = {}));
                                /**
                                 * Class to hold the result of tokenisation. For tidying up code so that there aren't multiple return
                                 * statements and makes it easier to breakup large methods.
                                 */
                                var InternalTokenisationResult = /** @class */ (function () {
                                    function InternalTokenisationResult(nextInternalState, tokenType) {
                                        this.nextInternalState = nextInternalState;
                                        this.tokenType = tokenType;
                                    }
                                    InternalTokenisationResult.prototype.setNextInternalState = function (nextInternalState) {
                                        this.nextInternalState = nextInternalState;
                                        this.handled = true;
                                    };
                                    InternalTokenisationResult.prototype.setNextInternalStateWithType = function (nextInternalState, tokenType) {
                                        this.nextInternalState = nextInternalState;
                                        this.tokenType = tokenType;
                                        this.handled = true;
                                    };
                                    InternalTokenisationResult.prototype.setErrorOccurred = function (errorOccurred) {
                                        this.errorOccurred = errorOccurred;
                                        this.handled = true;
                                    };
                                    InternalTokenisationResult.prototype.setTokenisationResult = function (tokenisationResult) {
                                        this.tokenisationResult = tokenisationResult;
                                        this.handled = true;
                                    };
                                    InternalTokenisationResult.prototype.isHandled = function () {
                                        return this.handled;
                                    };
                                    return InternalTokenisationResult;
                                }());
                                AssignmentExpressionState.InternalTokenisationResult = InternalTokenisationResult;
                            })(AssignmentExpressionState = state_2.AssignmentExpressionState || (state_2.AssignmentExpressionState = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * Abstract implementation of {@link MacroDelegatingState}.
                             *
                             * The {@link #tokenise(ITokenisationStream)} method calls the tokenise on the delegate before calling
                             * {@link #tokeniseDelegateStateResult(ITokenisationStream, TokenisationResult, TokenType)} for
                             * subclasses to alter
                             * the {@link TokenisationResult}.
                             *
                             * @author ml
                             */
                            var AbstractMacroDelegatingState = /** @class */ (function (_super) {
                                __extends(AbstractMacroDelegatingState, _super);
                                function AbstractMacroDelegatingState(statementParentState, parent, delegateState) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState"] });
                                    _this.statementParentState = statementParentState;
                                    _this.delegateState = delegateState;
                                    return _this;
                                }
                                AbstractMacroDelegatingState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                AbstractMacroDelegatingState.prototype.getStatementParentState = function () {
                                    return this.statementParentState;
                                };
                                /**
                                 * Call the delegate state's {@link ITokenisationState#tokenise(ITokenisationStream)} method, then
                                 * call {@link #tokeniseDelegateStateResult(ITokenisationStream, TokenisationResult, TokenType)} for
                                 * subclasses
                                 * to alter the {@link TokenisationResult}.
                                 */
                                AbstractMacroDelegatingState.prototype.tokenise = function (stream) {
                                    var result = this.delegateState.tokenise(stream);
                                    result = this.tokeniseDelegateStateResult(stream, result, result.getTokenType());
                                    return result;
                                };
                                /**
                                 * Rewind the stream to extract the macro identifier.
                                 *
                                 * @param stream
                                 * @return
                                 */
                                AbstractMacroDelegatingState.prototype.getMacroIdentifier = function (stream) {
                                    stream.rewind();
                                    if (!stream.eos()) {
                                        var c = stream.next();
                                        if (c != SasLanguage.PERCENT) {
                                            throw new Error("Unexpected char when refetching macro identifier: " + c);
                                        }
                                        return this.matchIdentifier(stream);
                                    }
                                    return null;
                                };
                                AbstractMacroDelegatingState.prototype.getMacroDelegateState = function () {
                                    return this.delegateState;
                                };
                                AbstractMacroDelegatingState.prototype.getFieldsString = function () {
                                    if (this.delegateState == this.parent && this.statementParentState == this.parent) {
                                        return "statementParentState/delegate/";
                                    }
                                    else if (this.statementParentState == this.parent) {
                                        return "delegate=" + this.getStateName(this.delegateState) + ", statementParentState/";
                                    }
                                    else if (this.delegateState == this.parent) {
                                        return "statementParentState=" + this.getStateName(this.statementParentState) + ", delegate/";
                                    }
                                    else {
                                        return "delegate=" + this.getStateName(this.delegateState) + ", statementParentState=" + this.getStateName(this.statementParentState) + ",";
                                    }
                                };
                                return AbstractMacroDelegatingState;
                            }(state.AbstractTokenisationState));
                            state.AbstractMacroDelegatingState = AbstractMacroDelegatingState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State after a '%THEN' statement. Checks for %ELSE otherwise invokes the delegate state
                             *
                             * @author ml
                             */
                            var MacroAfterThenState = /** @class */ (function (_super) {
                                __extends(MacroAfterThenState, _super);
                                /**
                                 * Constructor from {@link MacroThenState}
                                 *
                                 * @param parent {@link AbstractTokenisationState} from the before %IF
                                 * @param delegateState the state after the %THEN that is doing the tokenise
                                 */
                                function MacroAfterThenState(statementParentState, parent, delegateState) {
                                    var _this = _super.call(this, statementParentState, parent, delegateState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState"] });
                                    return _this;
                                }
                                /**
                                 * Check for %ELSE which results in MacroElseState otherwise return to the delegate.
                                 */
                                MacroAfterThenState.prototype.tokeniseDelegateStateResult = function (stream, result, tokenType) {
                                    if (tokenType == TokenType.macro_keyword && (SasLanguage.ELSE === this.getMacroIdentifier(stream))) {
                                        return new TokenisationResult(tokenType, new state.MacroElseState(this.statementParentState, this.getParent(), this.getParent()));
                                    }
                                    if (tokenType != null) {
                                        stream.rewind();
                                        result = new TokenisationResult(null, this.delegateState);
                                    }
                                    return result;
                                };
                                MacroAfterThenState.prototype.getName = function () {
                                    return "MacroAfterThenState(" + this.delegateState.getName() + ")";
                                };
                                return MacroAfterThenState;
                            }(state.AbstractMacroDelegatingState));
                            state.MacroAfterThenState = MacroAfterThenState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state_3) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * In a '%DO' body: check for '%END' which returns it to the last delegate state, except if it came from
                             * a
                             * %THEN, in which case we need {@link MacroAfterThenState} to detect the %ELSE.
                             *
                             * @author ml
                             */
                            var MacroDoBodyState = /** @class */ (function (_super) {
                                __extends(MacroDoBodyState, _super);
                                /**
                                 *
                                 * @param parent the state before the %DO
                                 * @param delegateState the current state that is actually doing the tokenisation
                                 */
                                function MacroDoBodyState(statementParentState, parent, delegateState) {
                                    var _this = _super.call(this, statementParentState, parent, delegateState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState"] });
                                    return _this;
                                }
                                /**
                                 * Check for %END which needs special handling.
                                 */
                                MacroDoBodyState.prototype.tokeniseDelegateStateResult = function (stream, result, tokenType) {
                                    if (!this.isInstanceofMacroDoBodyState(this.delegateState) && tokenType == TokenType.macro_keyword && (SasLanguage.END === this.getMacroIdentifier(stream))) {
                                        return this.handleEnd();
                                    }
                                    if (result.getNextState() instanceof com.wpc.wps.language.context.tokenisation.state.MacroEndState) {
                                        return result;
                                    }
                                    var nextState = result.getNextState();
                                    if (nextState != null) {
                                        result = new TokenisationResult(tokenType, new MacroDoBodyState(this.statementParentState, this.getParent(), nextState));
                                    }
                                    return result;
                                };
                                /**
                                 * Check if it's an instance of {@link MacroDoBodyState} or is {@link MacroDelegatingState} whose
                                 * delegate is an instance. Checks recursively for {@link MacroDelegatingState}.
                                 *
                                 * @param state
                                 * @return true if it's an instance of {@link MacroDoBodyState} or is a {@link MacroDelegatingState}
                                 * that delegates (recursively) to {@link MacroDoBodyState}
                                 */
                                MacroDoBodyState.prototype.isInstanceofMacroDoBodyState = function (state) {
                                    var b = false;
                                    if (state instanceof com.wpc.wps.language.context.tokenisation.state.MacroDoBodyState) {
                                        b = true;
                                    }
                                    else if (state != null && state["__interfaces"] != null && state["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState") >= 0) {
                                        b = this.isInstanceofMacroDoBodyState(state.getMacroDelegateState());
                                    }
                                    return b;
                                };
                                /**
                                 * Get the {@link TokenisationResult} for %END. If this state is after %THEN, parent is
                                 * {@link MacroThenState} and the next state is {@link MacroThenState} after the semicolon.
                                 *
                                 * If this state is after %ELSE is the last delegate state.
                                 *
                                 * Otherwise just return to parent.
                                 *
                                 * @param tokenType
                                 * @return
                                 */
                                MacroDoBodyState.prototype.handleEnd = function () {
                                    var parent = this.getParent();
                                    if (parent instanceof com.wpc.wps.language.context.tokenisation.state.MacroThenState) {
                                        var mts = parent;
                                        var mats = new state_3.MacroAfterThenState(this.statementParentState, mts.getParent(), this.delegateState);
                                        return new TokenisationResult(TokenType.macro_keyword, new state_3.TransitionState(this.statementParentState, this, mats));
                                    }
                                    else if (parent instanceof com.wpc.wps.language.context.tokenisation.state.MacroElseState) {
                                        return new TokenisationResult(TokenType.macro_keyword, new state_3.TransitionState(this.statementParentState, this, this.delegateState));
                                    }
                                    else {
                                        return new TokenisationResult(TokenType.macro_keyword, new state_3.TransitionState(this.statementParentState, this, parent));
                                    }
                                };
                                MacroDoBodyState.prototype.getName = function () {
                                    return "MacroDoBodyState(" + this.delegateState.getName() + ")";
                                };
                                return MacroDoBodyState;
                            }(state_3.AbstractMacroDelegatingState));
                            state_3.MacroDoBodyState = MacroDoBodyState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for representing an %ELSE statement.
                             *
                             * Invokes the delegate AbstractTokenisationState, but after the semicolon it transitions to
                             * MacroAfterThenStatement.
                             */
                            var MacroElseState = /** @class */ (function (_super) {
                                __extends(MacroElseState, _super);
                                /**
                                 *
                                 * @param parent state before the %IF
                                 * @param delegateState current state that actually does the tokenising
                                 */
                                function MacroElseState(statementParentState, parent, delegateState) {
                                    var _this = _super.call(this, statementParentState, parent, delegateState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState"] });
                                    return _this;
                                }
                                /**
                                 * Changes the nextState.
                                 */
                                MacroElseState.prototype.tokeniseDelegateStateResult = function (stream, result, tokenType) {
                                    var nextState = result.getNextState();
                                    if (nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroDoExpressionState) {
                                        result = new TokenisationResult(tokenType, new state.MacroDoExpressionState(this.statementParentState, this));
                                    }
                                    else if (nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroIfStatementState) {
                                        result = new TokenisationResult(tokenType, new state.MacroIfStatementState(this.statementParentState, this.getParent()));
                                    }
                                    else if (tokenType == TokenType.semicolon) {
                                        if (this.delegateState instanceof com.wpc.wps.language.context.tokenisation.state.MacroTransitionState) {
                                            stream.rewind();
                                        }
                                        result = new TokenisationResult(tokenType, this.delegateState);
                                    }
                                    else if (nextState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) {
                                        result = new TokenisationResult(tokenType, new MacroElseState(this.statementParentState, this.getParent(), nextState));
                                    }
                                    return result;
                                };
                                MacroElseState.prototype.getName = function () {
                                    return "MacroElseState(" + this.delegateState.getName() + ")";
                                };
                                return MacroElseState;
                            }(state.AbstractMacroDelegatingState));
                            state.MacroElseState = MacroElseState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for representing an %THEN statement.
                             *
                             * Invokes the delegate AbstractTokenisationState, but after the semicolon it transitions to
                             * MacroAfterThenStatement.
                             */
                            var MacroThenState = /** @class */ (function (_super) {
                                __extends(MacroThenState, _super);
                                /**
                                 * Constructor for changes to delegate.
                                 *
                                 * @param parent state before the %IF
                                 * @param delegateState
                                 */
                                function MacroThenState(statementParentState, parent, delegateState) {
                                    var _this = _super.call(this, statementParentState, parent, delegateState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState"] });
                                    return _this;
                                }
                                MacroThenState.prototype.tokeniseDelegateStateResult = function (stream, result, tokenType) {
                                    var nextState = result.getNextState();
                                    if (nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroDoExpressionState) {
                                        result = new TokenisationResult(tokenType, new state.MacroDoExpressionState(this.statementParentState, this));
                                    }
                                    else if (tokenType == TokenType.semicolon) {
                                        if (this.delegateState instanceof com.wpc.wps.language.context.tokenisation.state.MacroTransitionState) {
                                            result = new TokenisationResult(tokenType, new state.MacroAfterThenState(this.statementParentState, this.getParent(), this.delegateState.nextState));
                                        }
                                        else {
                                            result = new TokenisationResult(tokenType, new state.MacroAfterThenState(this.statementParentState, this.getParent(), this.delegateState));
                                        }
                                    }
                                    else if (nextState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) {
                                        result = new TokenisationResult(tokenType, new MacroThenState(this.statementParentState, this.getParent(), nextState));
                                    }
                                    return result;
                                };
                                MacroThenState.prototype.getName = function () {
                                    return "MacroThenState(" + this.delegateState.getName() + ")";
                                };
                                return MacroThenState;
                            }(state.AbstractMacroDelegatingState));
                            state.MacroThenState = MacroThenState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for R. Where the parent is null, it can be used for a standalone R editor.
                             *
                             * @author ml
                             */
                            var RBodyState = /** @class */ (function (_super) {
                                __extends(RBodyState, _super);
                                function RBodyState(parent) {
                                    var _this = this;
                                    if ((parent instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState)) {
                                        _this = _super.call(this, parent) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    }
                                    else if (parent == null) {
                                        _this = _super.call(this, null) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    }
                                    else
                                        throw new Error('invalid overload');
                                    return _this;
                                }
                                /**
                                 * Overridden to detect the 'ENDSUBMIT' at start of the line (except where the parent is null in
                                 * which case it's a standalone editor so ignore ENDSUBMIT).
                                 */
                                RBodyState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    if (this.parent != null && stream.getOffset() == 0) {
                                        stream.skipSpace();
                                        var identifier = this.matchIdentifier(stream);
                                        if ((SasLanguage.ENDSUBMIT === identifier)) {
                                            return this.createTokenisationResult(TokenType.keyword, new state.TransitionState(this.getStatementParentState(), this, this.parent), stream);
                                        }
                                        stream.setOffset(0);
                                    }
                                    var identifier = this.matchIdentifierSameCase(stream);
                                    if (identifier != null && RBodyState.isKeyword(identifier)) {
                                        return this.createTokenisationResult(TokenType.keyword, null, stream);
                                    }
                                    else if (identifier != null) {
                                        return this.tokeniseIdentifier(identifier, stream);
                                    }
                                    return _super.prototype.tokenise.call(this, stream);
                                };
                                /**
                                 * Overridden to include assignment operators &lt;- and &lt;&lt;
                                 * Also check for '#' comments
                                 */
                                RBodyState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    if (c == '<') {
                                        stream.backup(1);
                                        if (stream.match("<-") == 0 && stream.match("<<-") == 0) {
                                            stream.skip(1);
                                        }
                                    }
                                    if (c == '#') {
                                        return this.createTokenisationResult(TokenType.comment, new state.RCommentState(this), stream);
                                    }
                                    return _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                };
                                /**
                                 * Overridden to stay in this state on semicolons;
                                 */
                                RBodyState.prototype.tokeniseSemiColon = function (stream) {
                                    return this.createTokenisationResult(TokenType.semicolon, null, stream);
                                };
                                RBodyState.prototype.getName = function () {
                                    return "RBodyState";
                                };
                                RBodyState.isKeyword = function (s) {
                                    switch ((s)) {
                                        case "if":
                                        case "else":
                                        case "repeat":
                                        case "while":
                                        case "function":
                                        case "for":
                                        case "in":
                                        case "next":
                                        case "break":
                                        case "TRUE":
                                        case "FALSE":
                                        case "NULL":
                                        case "Inf":
                                        case "NaN":
                                        case "NA":
                                        case "NA_integer_":
                                        case "NA_real_":
                                        case "NA_complex_":
                                        case "NA_character_":
                                            return true;
                                    }
                                    return false;
                                };
                                return RBodyState;
                            }(state.AbstractTokenisationState));
                            state.RBodyState = RBodyState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * A general function state to handle macro functions.
                             *
                             * @author Nick Robson [nr]
                             */
                            var MacroFunctionState = /** @class */ (function (_super) {
                                __extends(MacroFunctionState, _super);
                                function MacroFunctionState(parent, functionIdentifier, bracketCount) {
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.bracketCount = bracketCount;
                                    _this.functionIdentifier = functionIdentifier;
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc} <br/>
                                 *
                                 * Balances brackets within a {@link MacroFunctionState}.
                                 */
                                MacroFunctionState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextBracketCount = this.bracketCount;
                                    if (c == SasLanguage.BRACKET_OPEN) {
                                        nextBracketCount++;
                                    }
                                    else if (c == SasLanguage.BRACKET_CLOSE) {
                                        nextBracketCount--;
                                    }
                                    var nextState = null;
                                    if (nextBracketCount == 0) {
                                        nextState = this.parent;
                                    }
                                    else {
                                        nextState = this.createNextStateAfterBracket(nextBracketCount);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * When tokeniseBracket encounters a bracket (typically an open bracket) this creates the next
                                 * state).
                                 *
                                 * @param nextBracketCount - The bracket count to pass to the next state.
                                 * @return MacroInvocationExpressionState - The next state.
                                 */
                                MacroFunctionState.prototype.createNextStateAfterBracket = function (nextBracketCount) {
                                    return new MacroFunctionState(this.parent, this.functionIdentifier, nextBracketCount);
                                };
                                MacroFunctionState.prototype.getName = function () {
                                    return "MacroFunctionState";
                                };
                                MacroFunctionState.prototype.getFieldsString = function () {
                                    return "bracketCount=" + this.bracketCount + ", functionIdentifier=" + this.functionIdentifier + ", ";
                                };
                                return MacroFunctionState;
                            }(state.AbstractTokenisationState));
                            state.MacroFunctionState = MacroFunctionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State that transitions based on a semicolon. Goes to the {@link #statementParentState} state if
                             * {@link #nextState} is not set
                             * explicitly.
                             *
                             * @author ml
                             */
                            var TransitionState = /** @class */ (function (_super) {
                                __extends(TransitionState, _super);
                                function TransitionState(statementParentState, parent, nextState) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.statementParentState = statementParentState;
                                    _this.nextState = nextState;
                                    return _this;
                                }
                                TransitionState.prototype.getStatementParentState = function () {
                                    return this.statementParentState;
                                };
                                TransitionState.prototype.getNextState = function () {
                                    return this.nextState != null ? this.nextState : this.statementParentState;
                                };
                                TransitionState.prototype.tokeniseSemiColon = function (stream) {
                                    return this.createTokenisationResult(TokenType.semicolon, this.getNextState(), stream);
                                };
                                TransitionState.prototype.getName = function () {
                                    return "TransitionState";
                                };
                                TransitionState.prototype.getFieldsString = function () {
                                    if (this.nextState == this.parent && this.statementParentState == this.parent) {
                                        return "statementParentState/nextState/";
                                    }
                                    else if (this.statementParentState == this.parent) {
                                        return "nextState=" + this.getStateName(this.nextState) + ", statementParentState/";
                                    }
                                    else if (this.nextState == this.parent) {
                                        return "statementParentState=" + this.getStateName(this.statementParentState) + ", nextState/";
                                    }
                                    else {
                                        return "nextState=" + this.getStateName(this.nextState) + ", statementParentState=" + this.getStateName(this.statementParentState) + ",";
                                    }
                                };
                                return TransitionState;
                            }(state.AbstractTokenisationState));
                            state.TransitionState = TransitionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * ITokenisationState for handling component constructor. Brackets tracked to return to parent
                             * {@link ComponentState}.
                             *
                             * @author ml
                             */
                            var ComponentInitialiserState = /** @class */ (function (_super) {
                                __extends(ComponentInitialiserState, _super);
                                function ComponentInitialiserState(statementParentState, parent, nextState, component, bracketCount) {
                                    var _this = _super.call(this, statementParentState, parent, nextState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.component = component;
                                    _this.bracketCount = bracketCount;
                                    return _this;
                                }
                                /**
                                 * Overridden to track brackets and return to parent on close bracket.
                                 */
                                ComponentInitialiserState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextBracketCount = this.bracketCount;
                                    if (SasLanguage.isBracketOpen(c)) {
                                        nextBracketCount++;
                                    }
                                    else if (SasLanguage.isBracketClose(c)) {
                                        nextBracketCount--;
                                    }
                                    if (nextBracketCount == 0) {
                                        return this.createTokenisationResult(tokenType, this.parent, stream);
                                    }
                                    return this.createTokenisationResult(tokenType, new ComponentInitialiserState(this.statementParentState, this.getParent(), this.nextState, this.component, nextBracketCount), stream);
                                };
                                ComponentInitialiserState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ComponentInitialiserState.prototype.getComponent = function () {
                                    return this.component;
                                };
                                ComponentInitialiserState.prototype.getName = function () {
                                    return "ComponentInitialiserState";
                                };
                                return ComponentInitialiserState;
                            }(state.TransitionState));
                            state.ComponentInitialiserState = ComponentInitialiserState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * State after a %LET %LOCAL %GLOBAL %PUT: just tokenise until the semicolon.
                             *
                             * Overridden so that Formats are not tokenised.
                             *
                             * @author ml
                             */
                            var MacroTransitionState = /** @class */ (function (_super) {
                                __extends(MacroTransitionState, _super);
                                function MacroTransitionState(statementParentState, parent, nextState) {
                                    var _this = _super.call(this, statementParentState, parent, nextState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                /**
                                 * Overridden so formats are not tokenised.
                                 */
                                MacroTransitionState.prototype.matchFormat = function (stream) {
                                    return null;
                                };
                                MacroTransitionState.prototype.getName = function () {
                                    return "MacroTransitionState";
                                };
                                return MacroTransitionState;
                            }(state.TransitionState));
                            state.MacroTransitionState = MacroTransitionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * {@link MacroFunctionState} that deals exclusively with macro quoting functions (e.g.
                             * %QUOTE, %STR).
                             *
                             * @author Nick Robson [nr]
                             */
                            var MacroQuotingFunctionState = /** @class */ (function (_super) {
                                __extends(MacroQuotingFunctionState, _super);
                                /**
                                 * Full constructor.
                                 *
                                 * @param parent
                                 * @param bracketCount
                                 */
                                function MacroQuotingFunctionState(parent, identifier, functionType, bracketCount, foundSemicolon) {
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    if (foundSemicolon === void 0) { foundSemicolon = false; }
                                    var _this = _super.call(this, parent, identifier, bracketCount) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.functionType = functionType;
                                    _this.foundSemicolon = foundSemicolon;
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc} <br/>
                                 *
                                 * Overridden to first check if the invocation is to a quoting function.
                                 */
                                MacroQuotingFunctionState.prototype.tokenise = function (stream) {
                                    var result = null;
                                    if (!stream.eos()) {
                                        stream.mark();
                                        switch ((this.functionType)) {
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.BQUOTE:
                                                result = this.tokeniseBQUOTE(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.NRBQUOTE:
                                                result = this.tokeniseNRBQUOTE(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.NRQUOTE:
                                                result = this.tokeniseNRQUOTE(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.NRSTR:
                                                result = this.tokeniseNRSTR(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.STR:
                                                result = this.tokeniseSTR(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.QUOTE:
                                                result = this.tokeniseQUOTE(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.SUPERQ:
                                                result = this.tokeniseSUPERQ(stream);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.UNQUOTE:
                                                result = this.tokeniseUNQUOTE(stream);
                                                break;
                                            default:
                                                return null;
                                        }
                                        if (result == null) {
                                            result = _super.prototype.tokenise.call(this, stream);
                                        }
                                    }
                                    return result;
                                };
                                MacroQuotingFunctionState.prototype.tokeniseBQUOTE = function (stream) {
                                    var result = null;
                                    var c = stream.peek();
                                    if (SasLanguage.isCharacterMask(c)) {
                                        result = this.matchEmbeddedMacroFunctionIdentifier(stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Although there are differences in the behaviour of {@link QuotingFunctionType#BQUOTE} those
                                 * differences do not lead to any differences in the highlighting within those functions.
                                 *
                                 * @param stream
                                 * @return
                                 */
                                MacroQuotingFunctionState.prototype.tokeniseNRBQUOTE = function (stream) {
                                    return this.tokeniseBQUOTE(stream);
                                };
                                /**
                                 * %STR removes meaning from special characters (except '%' and '&') at compilation.
                                 *
                                 * The character mask (%) is used to escape special characters (single percent character, parenthesis
                                 * and single quote).
                                 *
                                 * @param stream - The stream.
                                 */
                                MacroQuotingFunctionState.prototype.tokeniseSTR = function (stream) {
                                    var result = null;
                                    var c = stream.peek();
                                    if (SasLanguage.isCharacterMask(c)) {
                                        var offset = stream.getOffset();
                                        stream.next();
                                        var nextC = stream.peek();
                                        if (SasLanguage.SINGLE_QUOTE == nextC || SasLanguage.DOUBLE_QUOTE == nextC || SasLanguage.BRACKET_OPEN == nextC || SasLanguage.BRACKET_CLOSE == nextC || SasLanguage.PERCENT == nextC || SasLanguage.isMacroQuotingFunctionSpecialCharacter(nextC)) {
                                            stream.next();
                                            result = this.createTokenisationResult(TokenType.unknown, null, stream);
                                        }
                                        else {
                                            stream.setOffset(offset);
                                            if (SasLanguage.AMPERSAND == nextC) {
                                                result = this.createTokenisationResult(TokenType.punctuation, null, stream);
                                            }
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * Identical to %STR but also removes meaning from '%' and '&'.
                                 *
                                 * @param stream - The stream.
                                 */
                                MacroQuotingFunctionState.prototype.tokeniseNRSTR = function (stream) {
                                    var result = null;
                                    var c = stream.peek();
                                    var tokenType = null;
                                    if (SasLanguage.isCharacterMask(c)) {
                                        stream.skip(2);
                                        result = this.createTokenisationResult(TokenType.unknown, null, stream);
                                    }
                                    else if (SasLanguage.AMPERSAND == c) {
                                        stream.skip(1);
                                        result = this.createTokenisationResult(TokenType.unknown, null, stream);
                                    }
                                    else {
                                        tokenType = this.matchBrackets(c);
                                    }
                                    if (tokenType != null) {
                                        stream.skip(1);
                                        result = this.tokeniseBracket(tokenType, c, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Skips ampersands and quotes to prevent variables and literals from being highlighted.
                                 *
                                 * Always displays macro functions because SUPERQ will attempt to resolve function calls for
                                 * functions that do exist but not those that don't. We don't have any means to determine if
                                 * the function does exist so we just assume it is an attempt at a function call - even
                                 * without parentheses. Where the function is valid e.g STR but there are no parentheses the macro
                                 * will fail to compile.
                                 *
                                 * @param stream - The stream
                                 * @return TokenisationResult
                                 */
                                MacroQuotingFunctionState.prototype.tokeniseSUPERQ = function (stream) {
                                    var result = null;
                                    var c = stream.peek();
                                    if (SasLanguage.SINGLE_QUOTE == c || SasLanguage.DOUBLE_QUOTE == c || SasLanguage.AMPERSAND == c) {
                                        stream.next();
                                    }
                                    return result;
                                };
                                MacroQuotingFunctionState.prototype.tokeniseUNQUOTE = function (stream) {
                                    return null;
                                };
                                /**
                                 * From a highlighting point-of-view this is no different to %STR.
                                 */
                                MacroQuotingFunctionState.prototype.tokeniseQUOTE = function (stream) {
                                    return this.tokeniseSTR(stream);
                                };
                                MacroQuotingFunctionState.prototype.tokeniseNRQUOTE = function (stream) {
                                    return this.tokeniseSTR(stream);
                                };
                                MacroQuotingFunctionState.prototype.getStringLiteralState = function (quoteChar, nextState, nextStateIfIdentifier) {
                                    return new state.MacroQuotingFunctionStringLiteralState(this, this.functionType, quoteChar);
                                };
                                /**
                                 * {@inheritDoc} <br/>
                                 * Provides {@link #getParent()} as the next state instead for {@link QuotingFunctionType#BQUOTE} and
                                 * {@link QuotingFunctionType#NRBQUOTE} where it's inside a macro,
                                 * otherwise only return to parent on bracket count.
                                 */
                                MacroQuotingFunctionState.prototype.tokeniseSemiColon = function (stream) {
                                    if ((this.functionType == MacroQuotingFunctionState.QuotingFunctionType.BQUOTE || this.functionType == MacroQuotingFunctionState.QuotingFunctionType.NRBQUOTE) && this.getParentMacro() != null) {
                                        stream.rewind();
                                        return this.createTokenisationResult(null, this.getParent(), stream);
                                    }
                                    var macroQuotingFunctionState = new MacroQuotingFunctionState(this.getNextStateAfterMacroState(), this.functionIdentifier, this.functionType, this.bracketCount, true);
                                    return this.createTokenisationResult(TokenType.semicolon, macroQuotingFunctionState, stream);
                                };
                                /**
                                 * Overridden so that single quotes are ignored outside a macro for
                                 * {@link QuotingFunctionType#BQUOTE} and
                                 * {@link QuotingFunctionType#NRBQUOTE}.
                                 */
                                MacroQuotingFunctionState.prototype.matchStrings = function (stream, quoteChar) {
                                    if (this.getParentMacro() == null && SasLanguage.isStringLiteralBoundaryChar(quoteChar) && (this.functionType == MacroQuotingFunctionState.QuotingFunctionType.BQUOTE || this.functionType == MacroQuotingFunctionState.QuotingFunctionType.NRBQUOTE)) {
                                        return TokenType.punctuation;
                                    }
                                    return _super.prototype.matchStrings.call(this, stream, quoteChar);
                                };
                                /**
                                 * Looks for a macro function embedded within this function. Function name is %(a-zA-Z)/( <br/>
                                 * No check is made for the preceding percent character mask.
                                 *
                                 * @param stream The stream
                                 * @return TokenisationResult or null if no function was matched/found.
                                 */
                                MacroQuotingFunctionState.prototype.matchEmbeddedMacroFunctionIdentifier = function (stream) {
                                    var result = null;
                                    var c = stream.peek();
                                    var tokenType = null;
                                    stream.next();
                                    c = stream.peek();
                                    if (SasLanguage.isIdentifierStartChar(c)) {
                                        var offset = stream.getOffset();
                                        while ((SasLanguage.isIdentifierChar(c))) {
                                            stream.skip(1);
                                            c = stream.peek();
                                            if (tokenType == null) {
                                                tokenType = TokenType.macro_function;
                                            }
                                        }
                                        ;
                                        var identifier = stream.peekBack(offset).toUpperCase();
                                        if (tokenType != null) {
                                            result = _super.prototype.tokeniseMacroFunction.call(this, identifier, stream);
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * Overridden so that when returning to parent, the presence of a semicolon in this state changes the
                                 * next state to be the {@link StatementParentState} instead or (@link
                                 * {@link TransitionState#getNextState()}.
                                 * This is because for non-macro
                                 * statements, the semicolon is part of that statement. However, macro statements such as %PUT
                                 * specifically ignore semicolons in this state, so if the parent is a {@link MacroTransitionState}
                                 * then the {@link #foundSemicolon} is ignored, since %PUT and other similar macro statements use
                                 * that state. Semicolons in this state are also ignored in macro invocations in
                                 * {@link MacroInvocationExpressionState} as well as %IF and %DO.
                                 */
                                MacroQuotingFunctionState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (this.foundSemicolon && nextState != null && nextState == this.getParent() && !(nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroTransitionState) && !(nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroInvocationExpressionState) && !(nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroIfStatementState) && !(nextState instanceof com.wpc.wps.language.context.tokenisation.state.MacroDoExpressionState)) {
                                        if (nextState instanceof com.wpc.wps.language.context.tokenisation.state.TransitionState) {
                                            return new TokenisationResult(tokenType, nextState.getNextState());
                                        }
                                        return new TokenisationResult(tokenType, nextState.getStatementParentState());
                                    }
                                    return new TokenisationResult(tokenType, nextState);
                                };
                                /**
                                 * Overridden to keep the bracket count.
                                 */
                                MacroQuotingFunctionState.prototype.createMacroQuotingFunctionState = function (identifier, functionType) {
                                    return new MacroQuotingFunctionState(this.getNextStateAfterMacroState(), identifier, functionType, this.bracketCount, this.foundSemicolon);
                                };
                                /**
                                 * Overridden to instead create a {@link MacroQuotingFunctionState}.
                                 */
                                MacroQuotingFunctionState.prototype.createNextStateAfterBracket = function (nextBracketCount) {
                                    return new MacroQuotingFunctionState(this.getParent(), this.functionIdentifier, this.functionType, nextBracketCount, this.foundSemicolon);
                                };
                                MacroQuotingFunctionState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Always returns the immediate parent.
                                 */
                                MacroQuotingFunctionState.prototype.getNextStateAfterMacroState = function () {
                                    return this.getParent();
                                };
                                MacroQuotingFunctionState.prototype.getName = function () {
                                    return "MacroQuotingFunctionState";
                                };
                                MacroQuotingFunctionState.prototype.getFieldsString = function () {
                                    return _super.prototype.getFieldsString.call(this) + "functionType: " + this.functionType + ", ";
                                };
                                return MacroQuotingFunctionState;
                            }(state.MacroFunctionState));
                            state.MacroQuotingFunctionState = MacroQuotingFunctionState;
                            (function (MacroQuotingFunctionState) {
                                /**
                                 * Notes: Compile-time functions cannot resolve macro variables due to when they execute (the
                                 * function is executed before the variable exists/holds any information).
                                 * Execution-time functions can resolve macro variables (the variable is populated and then the
                                 * function is expanded/executed).
                                 */
                                var QuotingFunctionType;
                                (function (QuotingFunctionType) {
                                    QuotingFunctionType[QuotingFunctionType["BQUOTE"] = 0] = "BQUOTE";
                                    QuotingFunctionType[QuotingFunctionType["NRBQUOTE"] = 1] = "NRBQUOTE";
                                    QuotingFunctionType[QuotingFunctionType["NRQUOTE"] = 2] = "NRQUOTE";
                                    QuotingFunctionType[QuotingFunctionType["NRSTR"] = 3] = "NRSTR";
                                    QuotingFunctionType[QuotingFunctionType["QUOTE"] = 4] = "QUOTE";
                                    QuotingFunctionType[QuotingFunctionType["STR"] = 5] = "STR";
                                    QuotingFunctionType[QuotingFunctionType["SUPERQ"] = 6] = "SUPERQ";
                                    QuotingFunctionType[QuotingFunctionType["UNQUOTE"] = 7] = "UNQUOTE";
                                })(QuotingFunctionType = MacroQuotingFunctionState.QuotingFunctionType || (MacroQuotingFunctionState.QuotingFunctionType = {}));
                            })(MacroQuotingFunctionState = state.MacroQuotingFunctionState || (state.MacroQuotingFunctionState = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * Assignments that are within statements, e.g.:
                             *
                             * ATTRIB
                             * col1 label = 'col1' FORMAT=DOLLAR10.2
                             * sale label = 'Unit Sale' length = 8
                             * ;
                             *
                             * Where identifiers are found in {@link AssignmentExpressionState.DoExpressionInternalState.NNS_FOUND}
                             * then assume
                             * it's the next keyword for the statement, so rewind and return to the {@link StatementState}
                             *
                             * @author ml
                             */
                            var StatementAssignmentExpressionState = /** @class */ (function (_super) {
                                __extends(StatementAssignmentExpressionState, _super);
                                function StatementAssignmentExpressionState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                StatementAssignmentExpressionState.prototype.createExpressionState = function (conditionState, bracketCount, prevIdentifier, component) {
                                    return new StatementAssignmentExpressionState(this.statementParentState, this.getParent(), bracketCount, conditionState, prevIdentifier, component);
                                };
                                StatementAssignmentExpressionState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Overridden to rewind and return to parent if internalState is NNS_FOUND and it's not a comparison
                                 * or boolean
                                 * mnemonic.
                                 */
                                StatementAssignmentExpressionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND && !this.isComparisonMnemonic(identifier) && !SasLanguage.isBooleanMnemonic(identifier)) {
                                        stream.rewind();
                                        return new TokenisationResult(null, this.getParent());
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                StatementAssignmentExpressionState.prototype.getName = function () {
                                    return "StatementAssignmentExpressionState";
                                };
                                return StatementAssignmentExpressionState;
                            }(state.AssignmentExpressionState));
                            state.StatementAssignmentExpressionState = StatementAssignmentExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                            var BaseStatementState = /** @class */ (function (_super) {
                                __extends(BaseStatementState, _super);
                                function BaseStatementState(statementParentState, parent, nextState) {
                                    var _this = _super.call(this, statementParentState, parent, nextState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                BaseStatementState.prototype.equals = function (obj) {
                                    return _super.prototype.equals.call(this, obj) && ObjectUtils.equalObjs(this.getCurrentStatement(), obj.getCurrentStatement());
                                };
                                BaseStatementState.prototype.getFieldsString = function () {
                                    return "currentStatement=" + this.getCurrentStatement() + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return BaseStatementState;
                            }(state.TransitionState));
                            state.BaseStatementState = BaseStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                            /**
                             * State for dealing with options.
                             */
                            var AbstractOptionsState = /** @class */ (function (_super) {
                                __extends(AbstractOptionsState, _super);
                                function AbstractOptionsState(statementParentState, parent, nextState, option, bracketCount) {
                                    if (option === void 0) { option = null; }
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, statementParentState, parent, nextState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.option = option;
                                    _this.bracketCount = bracketCount;
                                    return _this;
                                }
                                /**
                                 * Get the last option parsed.
                                 *
                                 * @return
                                 */
                                AbstractOptionsState.prototype.getOption = function () {
                                    return this.option;
                                };
                                /**
                                 * Overridden to change state on '=' where an option is set.
                                 */
                                AbstractOptionsState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var result = null;
                                    if (c == SasLanguage.EQUALS) {
                                        result = this.tokeniseOperator_Handle_EQUALS(tokenType, stream);
                                    }
                                    if (result == null) {
                                        result = _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Handler for {@link #tokeniseOperator(TokenType, char, ITokenisationStream)} when the character is
                                 * {@link SasLanguage#EQUALS}. This method should be overridden to return a state.
                                 *
                                 * @param tokenType - The token type
                                 * @param stream - The stream
                                 * @return - Null, by default.
                                 */
                                AbstractOptionsState.prototype.tokeniseOperator_Handle_EQUALS = function (tokenType, stream) {
                                    return null;
                                };
                                /**
                                 *
                                 * @return bracket count
                                 */
                                AbstractOptionsState.prototype.getBracketCount = function () {
                                    return this.bracketCount;
                                };
                                AbstractOptionsState.prototype.equals = function (obj) {
                                    return _super.prototype.equals.call(this, obj) && ObjectUtils.equalObjs(this.option, obj.option);
                                };
                                AbstractOptionsState.prototype.getFieldsString = function () {
                                    return "option=" + this.option + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return AbstractOptionsState;
                            }(state.BaseStatementState));
                            state.AbstractOptionsState = AbstractOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                            /**
                             * State for dealing with proc/data options that lead to step state.
                             */
                            var AbstractStepStateOptionsState = /** @class */ (function (_super) {
                                __extends(AbstractStepStateOptionsState, _super);
                                function AbstractStepStateOptionsState(statementParentState, parent, nextState, stepInfo, option, bracketCount) {
                                    if (option === void 0) { option = null; }
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, statementParentState, parent, nextState, option, bracketCount) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.stepInfo = stepInfo;
                                    return _this;
                                }
                                /**
                                 * Create a copy of the state with a different option.
                                 *
                                 * @param newOption
                                 * @return
                                 */
                                AbstractStepStateOptionsState.prototype.createStepOptionsStateNewOption = function (newOption) {
                                    return this.createStepOptionsState(newOption, this.bracketCount);
                                };
                                /**
                                 * Create a copy of the state with a different bracketCount.
                                 *
                                 * @param newBracketCount bracket count
                                 * @return
                                 */
                                AbstractStepStateOptionsState.prototype.createStepOptionsStateBracketCount = function (newBracketCount) {
                                    return this.createStepOptionsState(this.option, newBracketCount);
                                };
                                AbstractStepStateOptionsState.prototype.getCurrentStatement = function () {
                                    return this.getStepInfo().getLanguageInfo();
                                };
                                AbstractStepStateOptionsState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var currentStatement = this.getCurrentStatement();
                                    var result = null;
                                    if (currentStatement != null) {
                                        if (currentStatement.getOption(identifier) != null) {
                                            result = new TokenisationResult(TokenType.keyword);
                                        }
                                    }
                                    if (result == null) {
                                        result = _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                    }
                                    if (identifier != null) {
                                        return this.createTokenisationResult(result.getTokenType(), this.createStepOptionsStateNewOption(identifier), stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Handler for {@link #tokeniseOperator(TokenType, char, ITokenisationStream)} when the character is
                                 * {@link SasLanguage#EQUALS}. This method may be overridden to return a different state or if
                                 * necessary null.
                                 *
                                 * @param tokenType - The token type
                                 * @param stream - The stream
                                 * @return - A {@link TokenisationResult} that has a next state of type {@link OptionValueState}.
                                 */
                                AbstractStepStateOptionsState.prototype.tokeniseOperator_Handle_EQUALS = function (tokenType, stream) {
                                    var result = null;
                                    if (this.getOption() != null) {
                                        var optionLanguageInfo = null;
                                        if (this.stepInfo != null && this.stepInfo.getLanguageInfo() != null) {
                                            optionLanguageInfo = this.stepInfo.getLanguageInfo().getOption(this.getOption());
                                        }
                                        result = this.createTokenisationResult(tokenType, this.createOptionValueState(optionLanguageInfo), stream);
                                    }
                                    return result;
                                };
                                /**
                                 * @param optionLanguageInfo
                                 * @return new instance of {@link OptionValueState}
                                 */
                                AbstractStepStateOptionsState.prototype.createOptionValueState = function (optionLanguageInfo) {
                                    return new state.OptionValueState(this.statementParentState, this.createStepOptionsStateNewOption(null), this.nextState, optionLanguageInfo);
                                };
                                /**
                                 * @return true if we are known to be a datastep.
                                 */
                                AbstractStepStateOptionsState.prototype.isDatastep = function () {
                                    return this.getSasLanguageSupporter().getDataStep().equals(this.getStepInfo());
                                };
                                AbstractStepStateOptionsState.prototype.equals = function (obj) {
                                    return _super.prototype.equals.call(this, obj) && ObjectUtils.equalObjs(this.getStepInfo(), obj.getStepInfo());
                                };
                                AbstractStepStateOptionsState.prototype.getStepInfo = function () {
                                    return this.stepInfo;
                                };
                                AbstractStepStateOptionsState.prototype.getFieldsString = function () {
                                    return "stepInfo=" + this.stepInfo + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden to count brackets. <br/>
                                 *
                                 * Additional handling on the last bracket to change state depending on parent.<br/>
                                 *
                                 */
                                AbstractStepStateOptionsState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextBracketCount = this.bracketCount;
                                    if (c == SasLanguage.BRACKET_OPEN) {
                                        nextBracketCount++;
                                    }
                                    else if (c == SasLanguage.BRACKET_CLOSE) {
                                        nextBracketCount--;
                                    }
                                    if (nextBracketCount != this.bracketCount) {
                                        var next;
                                        if (nextBracketCount == 0 && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.OptionValueState)) {
                                            next = this.parent.getParent();
                                        }
                                        else if (nextBracketCount == 0 && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState)) {
                                            next = this.parent;
                                        }
                                        else {
                                            next = this.createStepOptionsStateBracketCount(nextBracketCount);
                                        }
                                        return this.createTokenisationResult(tokenType, next, stream);
                                    }
                                    return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                };
                                return AbstractStepStateOptionsState;
                            }(state.AbstractOptionsState));
                            state.AbstractStepStateOptionsState = AbstractStepStateOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * Handles the internal state changes based on brackets, arithmetic operators, strings, numbers, macro
                             * variables for DO expressions.
                             *
                             * @author ml
                             */
                            var AbstractDoExpressionState = /** @class */ (function (_super) {
                                __extends(AbstractDoExpressionState, _super);
                                function AbstractDoExpressionState(afterErrorState, parent, internalState, bracketCount, prevIdentifier, component) {
                                    var _this = _super.call(this, afterErrorState, parent, bracketCount, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    _this.internalState = internalState;
                                    return _this;
                                }
                                /**
                                 * Create a new DoExpressionState with a change to the internalState. BracketCount is unaffected, but
                                 * identifier, component, prevChar and prevPrevChar are reset.
                                 *
                                 * @param nextInternalState
                                 * @return
                                 */
                                AbstractDoExpressionState.prototype.createDoExpressionStateMinimal = function (nextInternalState) {
                                    return this.createDoExpressionState(nextInternalState, this.bracketCount, null, null);
                                };
                                /**
                                 * Create a new DoExpressionState with a change to the internalState and component. BracketCount is
                                 * unaffected, but
                                 * identifier, prevChar and prevPrevChar are reset.
                                 *
                                 * @param nextInternalState
                                 * @return
                                 */
                                AbstractDoExpressionState.prototype.createDoExpressionStateComponent = function (nextInternalState, nextComponent) {
                                    return this.createDoExpressionState(nextInternalState, this.bracketCount, null, nextComponent);
                                };
                                /**
                                 * Create a new DoExpressionState with a change to the internalState and BracketCount. Identifier,
                                 * prevChar and prevPrevChar are reset.
                                 *
                                 * @param nextInternalState
                                 * @param bracketCount
                                 * @return
                                 */
                                AbstractDoExpressionState.prototype.createDoExpressionStateBracket = function (nextInternalState, bracketCount) {
                                    return this.createDoExpressionState(nextInternalState, bracketCount, null, null);
                                };
                                /**
                                 * Create a new DoExpressionState with a change to the internalState and prevIdentifier. BracketCount
                                 * is unaffected, but prevChar and prevPrevChar are reset.
                                 *
                                 * @param nextInternalState
                                 * @param identifier
                                 * @return
                                 */
                                AbstractDoExpressionState.prototype.createDoExpressionStateIdentifier = function (nextInternalState, identifier) {
                                    var nextComponent = this.lookupComponent(identifier);
                                    return this.createDoExpressionState(nextInternalState, this.bracketCount, identifier, nextComponent);
                                };
                                /**
                                 * Implementation increments/decrements bracket count where appropriate for the internal state and
                                 * switches state to UnknownStatementState on error.
                                 */
                                AbstractDoExpressionState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextInternalState = this.internalState;
                                    var nextState = null;
                                    var error = false;
                                    var nextBracketCount = this.bracketCount;
                                    if (SasLanguage.isBracketOpen(c)) {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                nextBracketCount++;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                if (this.prevIdentifier != null) {
                                                    var functionInfo = this.getGlobalFunction(this.prevIdentifier);
                                                    nextState = new state.FunctionState(this.statementParentState, this, this, functionInfo, state.FunctionState.INITIAL_BRACKETCOUNT_ON_BRACKET);
                                                }
                                                else {
                                                    error = true;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                                stream.rewind();
                                                break;
                                            default:
                                                error = true;
                                                break;
                                        }
                                    }
                                    else if (SasLanguage.isBracketClose(c) && this.bracketCount <= 0) {
                                        error = true;
                                    }
                                    else if (SasLanguage.isBracketClose(c)) {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                nextBracketCount--;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                error = true;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                                stream.rewind();
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                                if (nextBracketCount > 0) {
                                                    nextBracketCount--;
                                                }
                                                break;
                                        }
                                    }
                                    if (error) {
                                        return this.createTokenisationResult(tokenType, this.createUnknownStatementState(), stream);
                                    }
                                    if (this.internalState != nextInternalState || nextBracketCount != this.bracketCount) {
                                        nextState = this.createDoExpressionStateBracket(nextInternalState, nextBracketCount);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Implementation handles arithmetic chars, commas, prefix chars and equals char where allowed.
                                 */
                                AbstractDoExpressionState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var nextInternalState = this.internalState;
                                    var nextComponent = null;
                                    var error = false;
                                    if (c == SasLanguage.EQUALS && this.internalState == AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND) {
                                        nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.START;
                                    }
                                    else if (c == SasLanguage.COMMA && this.bracketCount != 0) {
                                        error = true;
                                    }
                                    else if (c == SasLanguage.COMMA) {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                error = true;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.START;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                                stream.rewind();
                                                break;
                                        }
                                    }
                                    else if (c == SasLanguage.DOT && this.internalState == AbstractDoExpressionState.DoExpressionInternalState.START) {
                                        nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING;
                                    }
                                    else {
                                        if (c == SasLanguage.DOT) {
                                            nextComponent = this.component;
                                        }
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                                error = true;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.START;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                                stream.rewind();
                                                break;
                                            default:
                                                error = true;
                                                break;
                                        }
                                    }
                                    if (error) {
                                        return this.createTokenisationResult(tokenType, this.createUnknownStatementState(), stream);
                                    }
                                    var nextState = null;
                                    if (nextInternalState != this.internalState) {
                                        nextState = this.createDoExpressionStateComponent(nextInternalState, nextComponent);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Implementation changes internal state where appropriate.
                                 */
                                AbstractDoExpressionState.prototype.getStateAfterString = function () {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                            error = true;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                            break;
                                    }
                                    var nextState = null;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    else if (nextInternalState != this.internalState) {
                                        nextState = this.createDoExpressionStateMinimal(nextInternalState);
                                    }
                                    return nextState;
                                };
                                /**
                                 * Implementation changes internal state where appropriate.
                                 */
                                AbstractDoExpressionState.prototype.tokeniseNumber = function (tokenType, stream) {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                            error = true;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                            stream.rewind();
                                            break;
                                    }
                                    if (error) {
                                        return this.createTokenisationResult(tokenType, this.createUnknownStatementState(), stream);
                                    }
                                    var nextState = null;
                                    if (this.internalState != nextInternalState) {
                                        nextState = this.createDoExpressionStateMinimal(nextInternalState);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                AbstractDoExpressionState.prototype.tokeniseFormat = function (tokenType, identifier, stream) {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                            error = true;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            if (identifier.length > 1 && identifier.charAt(0) != SasLanguage.DOLLAR && identifier.charAt(identifier.length - 1) == SasLanguage.DOT) {
                                                nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING;
                                            }
                                            else {
                                                error = true;
                                            }
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                            stream.rewind();
                                            break;
                                    }
                                    if (error) {
                                        return this.createTokenisationResult(tokenType, this.createUnknownStatementState(), stream);
                                    }
                                    var nextState = null;
                                    if (this.internalState != nextInternalState) {
                                        nextState = this.createDoExpressionStateMinimal(nextInternalState);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Implementation changes internal state where appropriate.
                                 */
                                AbstractDoExpressionState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND;
                                            break;
                                        default:
                                            nextInternalState = AbstractDoExpressionState.DoExpressionInternalState.MACRO;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                            break;
                                    }
                                    if (error) {
                                        return this.createTokenisationResult(tokenType, this.createUnknownStatementState(), stream);
                                    }
                                    var nextState = null;
                                    if (this.internalState != nextInternalState) {
                                        nextState = this.createDoExpressionStateMinimal(nextInternalState);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractDoExpressionState.prototype.expressionSupportsSpaceSeparatedValues = function () {
                                    return false;
                                };
                                AbstractDoExpressionState.prototype.getInternalState = function () {
                                    return this.internalState;
                                };
                                AbstractDoExpressionState.prototype.getName = function () {
                                    return "AbstractDoExpressionState";
                                };
                                AbstractDoExpressionState.prototype.getFieldsString = function () {
                                    return "internalState=" + com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState[this.internalState] + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return AbstractDoExpressionState;
                            }(state.AbstractExpressionState));
                            state.AbstractDoExpressionState = AbstractDoExpressionState;
                            (function (AbstractDoExpressionState) {
                                var DoExpressionInternalState;
                                (function (DoExpressionInternalState) {
                                    DoExpressionInternalState[DoExpressionInternalState["BY"] = 0] = "BY";
                                    DoExpressionInternalState[DoExpressionInternalState["FORMAT_OR_OBJECT_OR_MISSING"] = 1] = "FORMAT_OR_OBJECT_OR_MISSING";
                                    DoExpressionInternalState[DoExpressionInternalState["INDEX_VAR"] = 2] = "INDEX_VAR";
                                    DoExpressionInternalState[DoExpressionInternalState["INDEX_VAR_FOUND"] = 3] = "INDEX_VAR_FOUND";
                                    DoExpressionInternalState[DoExpressionInternalState["MACRO"] = 4] = "MACRO";
                                    DoExpressionInternalState[DoExpressionInternalState["OVER"] = 5] = "OVER";
                                    DoExpressionInternalState[DoExpressionInternalState["START"] = 6] = "START";
                                    DoExpressionInternalState[DoExpressionInternalState["START_FOUND"] = 7] = "START_FOUND";
                                    DoExpressionInternalState[DoExpressionInternalState["STOP_INC"] = 8] = "STOP_INC";
                                    DoExpressionInternalState[DoExpressionInternalState["TO"] = 9] = "TO";
                                })(DoExpressionInternalState = AbstractDoExpressionState.DoExpressionInternalState || (AbstractDoExpressionState.DoExpressionInternalState = {}));
                            })(AbstractDoExpressionState = state.AbstractDoExpressionState || (state.AbstractDoExpressionState = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State after 'DO': checks for 'UNTIL' or 'WHILE' which go to BracketBooleanExpressionState.
                             *
                             * @author ml
                             */
                            var DoExpressionState = /** @class */ (function (_super) {
                                __extends(DoExpressionState, _super);
                                /**
                                 * Full constructor.
                                 *
                                 * @param parent
                                 * @param internalState
                                 * @param bracketCount
                                 * @param prevIdentifier
                                 */
                                function DoExpressionState(parent, internalState, bracketCount, prevIdentifier, component) {
                                    if (internalState === void 0) { internalState = state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR; }
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, parent, parent, internalState, bracketCount, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                /**
                                 * Implementation calls full constructor.
                                 */
                                DoExpressionState.prototype.createDoExpressionState = function (internalState, bracketCount, prevIdentifier, component) {
                                    return new DoExpressionState(this.statementParentState, internalState, bracketCount, prevIdentifier, component);
                                };
                                /**
                                 * Overridden so that WHILE/UNTIL have nextState as BracketBooleanExpressionState, internal state
                                 * changes appropriately on TO and BY or other identifier.
                                 */
                                DoExpressionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var nextInternalState = this.internalState;
                                    var tokenType = TokenType.identifier;
                                    if (this.containsOpenBracket(stream) && (this.getGlobalFunction(identifier) != null)) {
                                        tokenType = TokenType._function;
                                    }
                                    var error = false;
                                    var whileOrUntil = false;
                                    if (this.bracketCount > 0) {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                break;
                                            default:
                                                error = true;
                                                break;
                                        }
                                    }
                                    else {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                                switch ((identifier)) {
                                                    case SasLanguage.WHILE:
                                                    case SasLanguage.UNTIL:
                                                        whileOrUntil = true;
                                                        break;
                                                    case SasLanguage.OVER:
                                                        tokenType = TokenType.keyword;
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.OVER;
                                                        break;
                                                    case SasLanguage.DATA:
                                                        if (this.isProcIml()) {
                                                            tokenType = TokenType.keyword;
                                                            break;
                                                        }
                                                    default:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND;
                                                        break;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.MACRO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                switch ((identifier)) {
                                                    case SasLanguage.TO:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.TO;
                                                        tokenType = TokenType.keyword;
                                                        break;
                                                    case SasLanguage.BY:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.BY;
                                                        tokenType = TokenType.keyword;
                                                        break;
                                                    case SasLanguage.WHILE:
                                                    case SasLanguage.UNTIL:
                                                        whileOrUntil = true;
                                                        break;
                                                    default:
                                                        if (this.internalState == state.AbstractDoExpressionState.DoExpressionInternalState.MACRO) {
                                                            nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                        }
                                                        else {
                                                            error = true;
                                                        }
                                                        break;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                                error = true;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                switch ((identifier)) {
                                                    case SasLanguage.BY:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.BY;
                                                        tokenType = TokenType.keyword;
                                                        break;
                                                    default:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.TO:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.BY:
                                                nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                                stream.rewind();
                                                break;
                                        }
                                    }
                                    var nextState = null;
                                    if (whileOrUntil) {
                                        var nextDoStatementState = this.createDoExpressionStateMinimal(state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND);
                                        nextState = new state.BracketBooleanExpressionState(this.statementParentState, this, nextDoStatementState);
                                        tokenType = TokenType.keyword;
                                    }
                                    else if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    else if (this.internalState != nextInternalState) {
                                        nextState = this.createDoExpressionStateIdentifier(nextInternalState, identifier);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                DoExpressionState.prototype.isProcIml = function () {
                                    return this.statementParentState != null && (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) && (SasLanguage.IML === this.statementParentState.currentStep.getLanguageInfo().getName());
                                };
                                /**
                                 * Overridden so that the internalState is changed if required.
                                 */
                                DoExpressionState.prototype.getNextStateAfterMacroState = function () {
                                    var nextInternalState = this.internalState;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                            nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                            break;
                                        default:
                                            break;
                                    }
                                    if (nextInternalState != null) {
                                        return this.createDoExpressionStateMinimal(nextInternalState);
                                    }
                                    return this;
                                };
                                DoExpressionState.prototype.getName = function () {
                                    return "DoExpressionState";
                                };
                                return DoExpressionState;
                            }(state.AbstractDoExpressionState));
                            state.DoExpressionState = DoExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * Tokenisation state for where there is an expression inside brackets that needs to be ignored, e.g.
                             * PROC SQL; EXECUTE (<br/>
                             *
                             * Transitions {@link StatementState} on the last closing bracket. Semicolons are ignored inside the
                             * brackets.
                             *
                             * @author ml
                             */
                            var BracketedExpressionStatementState = /** @class */ (function (_super) {
                                __extends(BracketedExpressionStatementState, _super);
                                /**
                                 *
                                 * @param parent class that created this
                                 * @param currentStatement the {@link LanguageInfo} for the statement
                                 * @param bracketCount number of unclosed open brackets
                                 */
                                function BracketedExpressionStatementState(parent, currentStatement, bracketCount) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.currentStatement = currentStatement;
                                    _this.bracketCount = bracketCount;
                                    return _this;
                                }
                                BracketedExpressionStatementState.prototype.getParent = function () {
                                    return this.parent;
                                };
                                /**
                                 * Overridden to count brackets and transition to {@link StatementState} on the last closing bracket.
                                 */
                                BracketedExpressionStatementState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextBracketCount = this.bracketCount;
                                    if (SasLanguage.isBracketOpen(c)) {
                                        nextBracketCount++;
                                    }
                                    else {
                                        nextBracketCount--;
                                    }
                                    var procStepState = this.getParent();
                                    if (nextBracketCount == 0) {
                                        return this.createTokenisationResult(tokenType, new state.StatementState(procStepState, procStepState, procStepState, this.currentStatement), stream);
                                    }
                                    return this.createTokenisationResult(tokenType, new BracketedExpressionStatementState(procStepState, this.currentStatement, nextBracketCount), stream);
                                };
                                BracketedExpressionStatementState.prototype.tokeniseSemiColon = function (stream) {
                                    if (this.bracketCount == 0) {
                                        return _super.prototype.tokeniseSemiColon.call(this, stream);
                                    }
                                    return this.createTokenisationResult(TokenType.semicolon, null, stream);
                                };
                                BracketedExpressionStatementState.prototype.getName = function () {
                                    return "BracketedExpressionStatementState";
                                };
                                BracketedExpressionStatementState.prototype.getFieldsString = function () {
                                    return "bracketCount=" + this.bracketCount + ", ";
                                };
                                return BracketedExpressionStatementState;
                            }(state.AbstractTokenisationState));
                            state.BracketedExpressionStatementState = BracketedExpressionStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * Tokenise a boolean expression inside brackets, e.g. DO WHILE (...); or DO UNTIL (...); Look for the
                             * brackets, after the last bracket next state is the supplied nextState (stored as parent).
                             * If there is any error, it goes to UnknownStatementState its parent as {@value afterErrorState}.
                             *
                             * @author ml
                             */
                            var BracketBooleanExpressionState = /** @class */ (function (_super) {
                                __extends(BracketBooleanExpressionState, _super);
                                function BracketBooleanExpressionState(statementParentState, parent, nextState, bracketCount, conditionState, prevIdentifier, component) {
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    _this.nextState = nextState;
                                    return _this;
                                }
                                BracketBooleanExpressionState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                    return new BracketBooleanExpressionState(this.statementParentState, this.parent, this.nextState, bracketCount, newConditionState, prevIdentifier, component);
                                };
                                /**
                                 * Overridden so that only brackets or whitespace or semicolon considered when no brackets have been
                                 * opened. Otherwise it's an error, so go to UnknownStatementState with parent as the
                                 * {@link #statementParentState}.
                                 */
                                BracketBooleanExpressionState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (this.bracketCount == 0 && tokenType != null && tokenType != TokenType.parenthesis && tokenType != TokenType.semicolon) {
                                        return new TokenisationResult(tokenType, new state.UnknownStatementState(this.statementParentState, this));
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                /**
                                 * Overridden to use {@link #nextState} on the last close bracket.
                                 */
                                BracketBooleanExpressionState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    if (this.bracketCount == 1 && SasLanguage.isBracketClose(c)) {
                                        return this.createTokenisationResult(tokenType, this.nextState, stream);
                                    }
                                    return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                };
                                BracketBooleanExpressionState.prototype.getName = function () {
                                    return "BracketBooleanExpressionState";
                                };
                                BracketBooleanExpressionState.prototype.getFieldsString = function () {
                                    return "conditionState=" + com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState[this.internalState] + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                BracketBooleanExpressionState.prototype.getStatementParentStateFieldString = function () {
                                    var str;
                                    if (this.nextState == this.parent && this.statementParentState == this.parent) {
                                        str = "statementParentState/nextState/";
                                    }
                                    else if (this.statementParentState == this.parent) {
                                        str = "nextState=" + this.getStateName(this.nextState) + ", statementParentState/";
                                    }
                                    else if (this.nextState == this.parent) {
                                        str = "statementParentState=" + this.getStateName(this.statementParentState) + ", nextState/";
                                    }
                                    else {
                                        str = "nextState=" + this.getStateName(this.nextState) + "statementParentState=" + this.getStateName(this.statementParentState) + ", ";
                                    }
                                    return str;
                                };
                                return BracketBooleanExpressionState;
                            }(state.AssignmentExpressionState));
                            state.BracketBooleanExpressionState = BracketBooleanExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for dealing with functions. Functions can be embedded in any expression. Overrides
                             * BracketBooleanExpressionState because it requires the open bracket and expression within follows
                             * boolean expression syntax.
                             */
                            var FunctionState = /** @class */ (function (_super) {
                                __extends(FunctionState, _super);
                                function FunctionState(statementParentState, parent, nextState, currentStatement, bracketCount, conditionState, prevIdentifier, component) {
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, nextState, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    _this.currentStatement = currentStatement;
                                    return _this;
                                }
                                FunctionState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                    return new FunctionState(this.statementParentState, this.parent, this.nextState, this.currentStatement, bracketCount, newConditionState, prevIdentifier, component);
                                };
                                FunctionState.prototype.getCurrentStatement = function () {
                                    return this.currentStatement;
                                };
                                /**
                                 * Overridden to support {@link SasLanguage#COLON} within the 'name'.
                                 */
                                FunctionState.prototype.matchIdentifier = function (stream) {
                                    var result = _super.prototype.matchIdentifier.call(this, stream);
                                    if (state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS == this.internalState) {
                                        if (SasLanguage.COLON == stream.peek()) {
                                            result += stream.next();
                                        }
                                    }
                                    return result;
                                };
                                FunctionState.prototype.tokeniseIdentifier_handle_NNS = function (identifier, stream) {
                                    if (identifier.charAt(identifier.length - 1) == SasLanguage.COLON) {
                                        return this.createTokenisationResult(TokenType.identifier, null, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier_handle_NNS.call(this, identifier, stream);
                                };
                                /**
                                 * Overridden to handle commas.
                                 */
                                FunctionState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    if (c == SasLanguage.COMMA && (state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS == this.internalState || state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND == this.internalState) && this.bracketCount == 1) {
                                        var nextState = null;
                                        if (this.internalState != state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS) {
                                            nextState = this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS);
                                        }
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                };
                                /**
                                 * Overridden to permit all functions to support space-separated values within brackets.
                                 */
                                FunctionState.prototype.expressionSupportsSpaceSeparatedValues = function () {
                                    return true;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                FunctionState.prototype.getName = function () {
                                    return "FunctionState";
                                };
                                return FunctionState;
                            }(state.BracketBooleanExpressionState));
                            state.FunctionState = FunctionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var MatchNumberState;
                            (function (MatchNumberState) {
                                MatchNumberState[MatchNumberState["INT"] = 0] = "INT";
                                MatchNumberState[MatchNumberState["FLOAT_NO_EXP"] = 1] = "FLOAT_NO_EXP";
                                MatchNumberState[MatchNumberState["INT_EXP_STARTED"] = 2] = "INT_EXP_STARTED";
                                MatchNumberState[MatchNumberState["FLOAT_EXP_STARTED"] = 3] = "FLOAT_EXP_STARTED";
                                MatchNumberState[MatchNumberState["FLOAT_EXP_SIGNED"] = 4] = "FLOAT_EXP_SIGNED";
                                MatchNumberState[MatchNumberState["INT_EXP"] = 5] = "INT_EXP";
                                MatchNumberState[MatchNumberState["FLOAT_EXP"] = 6] = "FLOAT_EXP";
                                MatchNumberState[MatchNumberState["HEX_CONTINUED"] = 7] = "HEX_CONTINUED";
                                MatchNumberState[MatchNumberState["HEX"] = 8] = "HEX";
                            })(MatchNumberState = state.MatchNumberState || (state.MatchNumberState = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for representing slash star block comments.
                             */
                            var BlockCommentState = /** @class */ (function (_super) {
                                __extends(BlockCommentState, _super);
                                function BlockCommentState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                BlockCommentState.prototype.tokenise = function (stream) {
                                    stream.skipUntil(false, this.getBlockCommentEnd());
                                    if (stream.eos()) {
                                        return new TokenisationResult(TokenType.comment);
                                    }
                                    stream.skip(this.getBlockCommentEnd().length);
                                    return new TokenisationResult(TokenType.comment, this.parent);
                                };
                                BlockCommentState.prototype.getBlockCommentEnd = function () {
                                    return SasLanguage.BLOCK_COMMENT_END;
                                };
                                BlockCommentState.prototype.getName = function () {
                                    return "BlockCommentState";
                                };
                                return BlockCommentState;
                            }(state.AbstractTokenisationState));
                            state.BlockCommentState = BlockCommentState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for when we're after a DECLARE or DCL keyword and are to choose a component e.g HASH.
                             */
                            var ComponentChooserState = /** @class */ (function (_super) {
                                __extends(ComponentChooserState, _super);
                                function ComponentChooserState(statementParentState, parent) {
                                    var _this = _super.call(this, statementParentState, parent, null) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                /**
                                 * override so that it goes to UnknownStatementState on a bad token.
                                 */
                                ComponentChooserState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (nextState == null && tokenType != null) {
                                        return _super.prototype.createTokenisationResult.call(this, tokenType, new state.UnknownStatementState(this.statementParentState, this), stream);
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                /**
                                 * Overridden to get the {@link Component} from the identifier, next state is {@link ComponentState}
                                 * if the component is found.
                                 */
                                ComponentChooserState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var result = null;
                                    var component = this.getSasLanguageSupporter().getComponent(identifier);
                                    var nextState = null;
                                    var tokenType;
                                    if (component == null) {
                                        tokenType = TokenType.identifier;
                                    }
                                    else {
                                        tokenType = TokenType.keyword;
                                        nextState = new state.ComponentState(this.statementParentState, this, null, component);
                                    }
                                    result = this.createTokenisationResult(tokenType, nextState, stream);
                                    return result;
                                };
                                ComponentChooserState.prototype.getCurrentStatement = function () {
                                    return this.getDataStepInfoSingleton().getLanguageInfo().getStatement(SasLanguage.DECLARE);
                                };
                                ComponentChooserState.prototype.getName = function () {
                                    return "ComponentChooserState";
                                };
                                return ComponentChooserState;
                            }(state.BaseStatementState));
                            state.ComponentChooserState = ComponentChooserState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * ITokenisationState for handling components. The name of the component is recorded.
                             *
                             * @author ml
                             */
                            var ComponentState = /** @class */ (function (_super) {
                                __extends(ComponentState, _super);
                                function ComponentState(statementParentState, parent, nextState, component) {
                                    var _this = _super.call(this, statementParentState, parent, nextState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.component = component;
                                    return _this;
                                }
                                /**
                                 * Overridden to set methods and attributes as keywords.
                                 */
                                ComponentState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var nextStatementParentState = this.statementParentState;
                                    if (this.statementParentState != null && this.statementParentState["__interfaces"] != null && this.statementParentState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState") >= 0) {
                                        nextStatementParentState = this.statementParentState.copyAndAddComponent(identifier, this.component);
                                    }
                                    var nextState2 = new ComponentState(this.statementParentState, this.getParent(), nextStatementParentState, this.component);
                                    return this.createTokenisationResult(TokenType.identifier, nextState2, stream);
                                };
                                /**
                                 * Overridden to change to {@link ComponentInitialiserState} on open bracket.
                                 */
                                ComponentState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    if (SasLanguage.isBracketOpen(c)) {
                                        var nextState2 = new state.ComponentInitialiserState(this.statementParentState, this, this.nextState, this.component, 1);
                                        return this.createTokenisationResult(tokenType, nextState2, stream);
                                    }
                                    return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                };
                                ComponentState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ComponentState.prototype.getComponent = function () {
                                    return this.component;
                                };
                                ComponentState.prototype.getName = function () {
                                    return "ComponentState";
                                };
                                return ComponentState;
                            }(state.TransitionState));
                            state.ComponentState = ComponentState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                            /**
                             * State object that deals with the case of DATALINES, DATALINES4, CARDS, CARDS4, PARMCARDS
                             * etc.
                             */
                            var DatalinesState = /** @class */ (function (_super) {
                                __extends(DatalinesState, _super);
                                function DatalinesState(parent, endString) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.endString = endString;
                                    return _this;
                                }
                                DatalinesState.prototype.equals = function (obj) {
                                    return _super.prototype.equals.call(this, obj) && ObjectUtils.equalObjs(this.endString, obj.endString);
                                };
                                DatalinesState.prototype.getName = function () {
                                    return "DatalinesState";
                                };
                                DatalinesState.prototype.getEndString = function () {
                                    return this.endString;
                                };
                                DatalinesState.prototype.getFieldsString = function () {
                                    return "endString=" + this.endString + ", ";
                                };
                                DatalinesState.prototype.tokenise = function (stream) {
                                    var initialOffset = stream.getOffset();
                                    var count = stream.skipUntil(false, this.endString);
                                    if (stream.eos()) {
                                        return new TokenisationResult(TokenType.card);
                                    }
                                    if (count > 0) {
                                        stream.setOffset(initialOffset);
                                        return this.createTokenisationResult(null, this.parent, stream);
                                    }
                                    stream.skip(this.endString.length);
                                    return new TokenisationResult(TokenType.semicolon, this.parent);
                                };
                                return DatalinesState;
                            }(state.AbstractTokenisationState));
                            state.DatalinesState = DatalinesState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for handling datastep name. Always transition to DataOptionsState as long as the tokenType is
                             * not null.
                             *
                             * @author ml
                             */
                            var DataNameState = /** @class */ (function (_super) {
                                __extends(DataNameState, _super);
                                function DataNameState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                DataNameState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Overridden so that an open bracket sets the next state as {@link DataOptionsState}
                                 */
                                DataNameState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    if (c == SasLanguage.BRACKET_OPEN) {
                                        stream.rewind();
                                        return new TokenisationResult(null, new state.DataOptionsState(this.getParent(), this, new state.DataStepState(this.getParent()), null, 0));
                                    }
                                    return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                };
                                /**
                                 * Overridden to return {@link TokenisationResult} with nextState set as {@link DataStepState}.
                                 */
                                DataNameState.prototype.tokeniseSemiColon = function (stream) {
                                    return this.createTokenisationResult(TokenType.semicolon, new state.DataStepState(this.getParent()), stream);
                                };
                                DataNameState.prototype.getName = function () {
                                    return "DataNameState";
                                };
                                return DataNameState;
                            }(state.AbstractTokenisationState));
                            state.DataNameState = DataNameState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for beginning of file, or when outside of a macro, proc, data or r step.
                             *
                             * Singleton for start of tokenisation, can be created when in a {@link MacroDefinitionState}.
                             *
                             * @author ml
                             */
                            var GlobalState = /** @class */ (function (_super) {
                                __extends(GlobalState, _super);
                                /**
                                 * Constructor: allows copying with null parent though with other fields set (normally fetched from
                                 * the parent), but setting the {@link #afterMacro} field.
                                 *
                                 * @param parent
                                 * @param sasLanguageSupporter
                                 * @param stateTransitionHelper
                                 * @param functionHelper
                                 * @param transpilableCollections
                                 * @param afterMacro
                                 */
                                function GlobalState(parent, sasLanguageSupporter, stateTransitionHelper, functionHelper, transpilableCollections, afterMacro) {
                                    if (parent === void 0) { parent = null; }
                                    if (sasLanguageSupporter === void 0) { sasLanguageSupporter = null; }
                                    if (stateTransitionHelper === void 0) { stateTransitionHelper = null; }
                                    if (functionHelper === void 0) { functionHelper = null; }
                                    if (transpilableCollections === void 0) { transpilableCollections = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, sasLanguageSupporter, stateTransitionHelper, functionHelper, transpilableCollections) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    _this.afterMacro = afterMacro;
                                    return _this;
                                }
                                GlobalState.prototype.getStatementParentState = function () {
                                    return this;
                                };
                                GlobalState.prototype.getNextStateAfterMacroState = function () {
                                    return this.copyStatementParentStateSetAfterMacro(true);
                                };
                                /**
                                 * Handle by checking for major keywords such as 'PROC', then by checking for global statements.
                                 * Otherwise it is an unknown statement.
                                 */
                                GlobalState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var tokenType = TokenType.major_keyword;
                                    var nextState = this.stateTransitionHelper.tokeniseMajorIdentifier(identifier, this, this);
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.stateTransitionHelper.tokeniseGlobalStatement(identifier, this, this);
                                    }
                                    if (nextState == null && this.afterMacro) {
                                        var result = this.stateTransitionHelper.tokeniseIdentifierAfterMacro(identifier, this, this, this, stream);
                                        if (result != null) {
                                            return result;
                                        }
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.identifier;
                                        nextState = new state.UnknownStatementState(this, this);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Overridden to detect line comments.
                                 */
                                GlobalState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var result = this.stateTransitionHelper.tokeniseLineCommentFromOperator(c, this);
                                    if (result == null && this.afterMacro) {
                                        result = this.stateTransitionHelper.tokeniseOperatorAfterMacro(c, this, stream);
                                    }
                                    if (result == null) {
                                        result = _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                GlobalState.prototype.copyStatementParentStateSetAfterMacro = function (afterMacro) {
                                    return new GlobalState(this.getParent(), this.sasLanguageSupporter, this.stateTransitionHelper, this.functionHelper, this.transpilableCollections, afterMacro);
                                };
                                GlobalState.prototype.getFieldsString = function () {
                                    return "afterMacro=" + this.afterMacro + ", ";
                                };
                                GlobalState.prototype.getName = function () {
                                    return "GlobalState";
                                };
                                return GlobalState;
                            }(state.AbstractTokenisationState));
                            state.GlobalState = GlobalState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * Enter into this state from either AbstractStepState, where an identifier is encountered
                             * but it's not definitely a statement: either there is definitely a '=' or just whitespace
                             * (indeterminate). <br/>
                             *
                             * If we see '=' next, then it's an assignment, otherwise it's a statement (possibly unknown);
                             *
                             * @author ml
                             */
                            var IdentifierState = /** @class */ (function (_super) {
                                __extends(IdentifierState, _super);
                                /**
                                 *
                                 * @param statementParentState If it is an assignment, then the {@link AssignmentExpressionState}
                                 * should have this as its parent.
                                 * @param stateIfNotAssignment if it's not an assignment, restart tokenisation and use this state.
                                 * @param identifier identifier
                                 */
                                function IdentifierState(statementParentState, parent, stateIfNotAssignment, identifier) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.identifier = identifier;
                                    _this.statementParentState = statementParentState;
                                    _this.stateIfNotAssignment = stateIfNotAssignment;
                                    return _this;
                                }
                                IdentifierState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (tokenType == TokenType.punctuation || tokenType == TokenType.squarebracket || tokenType == TokenType.curlybrace || tokenType == TokenType.parenthesis) {
                                        stream.rewind();
                                        var c = stream.next();
                                        if (c == SasLanguage.EQUALS && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.StatementState)) {
                                            return new TokenisationResult(tokenType, new state.StatementAssignmentExpressionState(this.statementParentState, this.parent, 0, state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, null, null));
                                        }
                                        else if (c == SasLanguage.EQUALS || c == SasLanguage.PLUS) {
                                            return new TokenisationResult(tokenType, new state.AssignmentExpressionState(this.statementParentState, this.parent, state.AbstractExpressionState.DEFAULT_BRACKET_COUNT, state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, null, null));
                                        }
                                        else if (c == SasLanguage.BRACKET_SQUARE_OPEN || c == SasLanguage.BRACKET_CURLY_OPEN || (c == SasLanguage.BRACKET_OPEN && !(this.identifier === SasLanguage.IF) && !(this.identifier === SasLanguage.WHEN) && !(this.identifier === SasLanguage.SELECT))) {
                                            return new TokenisationResult(tokenType, new state.AssignmentExpressionState(this.statementParentState, this.parent, state.AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_BRACKET, state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, null, null));
                                        }
                                        else if (c == SasLanguage.DOT) {
                                            return new TokenisationResult(tokenType, new state.AssignmentExpressionState(this.statementParentState, this.parent, state.AbstractExpressionState.DEFAULT_BRACKET_COUNT, state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT, null, this.lookupComponent(this.identifier)));
                                        }
                                    }
                                    if (tokenType != null) {
                                        stream.rewind();
                                        return this.createTokenisationResult(null, this.stateIfNotAssignment, stream);
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                IdentifierState.prototype.getFieldsString = function () {
                                    return "assignmentParentState=" + this.statementParentState.getName() + ", stateIfNotAssignment=" + this.stateIfNotAssignment.getName();
                                };
                                /**
                                 * Returns the identifier this state was created with.
                                 *
                                 * @return The identifier.
                                 */
                                IdentifierState.prototype.getIdentifier = function () {
                                    return this.identifier;
                                };
                                /**
                                 * Returns the state that will be used if the indetifier proves NOT to be an assignment.
                                 *
                                 * @return
                                 */
                                IdentifierState.prototype.getStateIfNotAssignment = function () {
                                    return this.stateIfNotAssignment;
                                };
                                IdentifierState.prototype.getName = function () {
                                    return "IdentifierState";
                                };
                                return IdentifierState;
                            }(state.AbstractTokenisationState));
                            state.IdentifierState = IdentifierState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                            /**
                             * State for when we're inside a PROC, or DATA step.
                             */
                            var AbstractStepState = /** @class */ (function (_super) {
                                __extends(AbstractStepState, _super);
                                /**
                                 * Constructor.
                                 *
                                 * @param parent parent
                                 * @param currentStep step info for the current step
                                 * @param definedArrayNames Names of arrays that have been defined using the ARRAY statement.
                                 * @param definedComponents Map from name to component
                                 * @param afterMacro true if after a macro invocation.
                                 */
                                function AbstractStepState(parent, currentStep, definedArrayNames, definedComponents, afterMacro) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    _this.currentStep = currentStep;
                                    _this.definedArrayNames = definedArrayNames;
                                    _this.definedComponents = definedComponents;
                                    _this.afterMacro = afterMacro;
                                    return _this;
                                }
                                AbstractStepState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                AbstractStepState.prototype.getStatementParentState = function () {
                                    return this;
                                };
                                AbstractStepState.prototype.getNextStateAfterMacroState = function () {
                                    return this.copyStatementParentStateSetAfterMacro(true);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.copyAndAddArrayName = function (newArray) {
                                    var builder = this.transpilableCollections.transpilableSetBuilderFromExistingSet(this.getDefinedArrayNames());
                                    builder.add(newArray);
                                    return this.createStepState(this.getParent(), this.currentStep, builder.build(), this.definedComponents);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.copyAndAddComponent = function (newComponent, component) {
                                    var mapBuilder = this.transpilableCollections.transpilableMapBuilderFromExistingMap(this.definedComponents);
                                    mapBuilder.put(newComponent, component);
                                    return this.createStepState(this.getParent(), this.currentStep, this.definedArrayNames, mapBuilder.build());
                                };
                                /**
                                 * Overridden to detect line comments and handle {@link #afterMacro} is true.
                                 */
                                AbstractStepState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var result = this.stateTransitionHelper.tokeniseLineCommentFromOperator(c, this);
                                    if (result == null && this.afterMacro) {
                                        result = this.stateTransitionHelper.tokeniseOperatorAfterMacro(c, this, stream);
                                    }
                                    if (result == null) {
                                        result = _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Get the {@link SasStepInfo} for the current step.
                                 */
                                AbstractStepState.prototype.getCurrentStep = function () {
                                    return this.currentStep;
                                };
                                /**
                                 * Overridden to check for assignment and wrap the {@link ITokenisationState} in an
                                 * {@link IdentifierState} if there is.
                                 *
                                 * See
                                 * {@link stateTransitionHelper#createTokenisationResultWithLanguageInfo(TokenType, ITokenisationState, ITokenisationStream, LanguageInfo)}
                                 *
                                 * @return TokenisationResult with {@link IdentifierState} wrapping nextState if we deem it to be an
                                 * assignment, or a straight-forward implementation otherwise.
                                 */
                                AbstractStepState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (!this.currentStep.allowsAssignment()) {
                                        return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                    }
                                    return this.stateTransitionHelper.createTokenisationResultForAssignment(this, tokenType, nextState, stream);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.getDefinedArrayNames = function () {
                                    return this.definedArrayNames;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.getDefinedComponents = function () {
                                    return this.definedComponents;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.getFieldsString = function () {
                                    var languageInfo = this.currentStep != null ? this.currentStep.getLanguageInfo() : null;
                                    return "afterMacro=" + this.afterMacro + ", " + (languageInfo != null ? "currentStep=" + languageInfo.getName() + ", " : "") + (this.definedArrayNames != null && this.definedArrayNames.size() > 0 ? ", definedArrayNames=" + this.definedArrayNames + ", " : "") + (this.definedComponents != null && this.definedComponents.size() > 0 ? ", definedComponents=" + this.definedComponents + ", " : "") + _super.prototype.getFieldsString.call(this);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.getName = function () {
                                    return "AbstractStepState";
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                AbstractStepState.prototype.equals = function (obj) {
                                    if (_super.prototype.equals.call(this, obj)) {
                                        var other = obj;
                                        return ObjectUtils.equalObjs(this.currentStep, other.currentStep) && ObjectUtils.equalObjs(this.definedArrayNames, other.definedArrayNames) && ObjectUtils.equalObjs(this.definedComponents, other.definedComponents);
                                    }
                                    return false;
                                };
                                return AbstractStepState;
                            }(state.AbstractTokenisationState));
                            state.AbstractStepState = AbstractStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for when we're inside a DATA step.
                             */
                            var DataStepState = /** @class */ (function (_super) {
                                __extends(DataStepState, _super);
                                function DataStepState(parent, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, parent.getDataStepInfoSingleton(), arrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                DataStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new DataStepState(parent, definedArrayNames, definedComponents);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                DataStepState.prototype.copyStatementParentStateSetAfterMacro = function (afterMacro) {
                                    return new DataStepState(this.getParent(), this.definedArrayNames, this.definedComponents, afterMacro);
                                };
                                /**
                                 * Handle by checking for 'CARDS' or similar, then expressions such as 'IF ...', then dataset
                                 * statements, then major keywords such as 'PROC', then global statements. After that the next state
                                 * is {@link UnknownStatementState}.
                                 */
                                DataStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var tokenType = TokenType.major_keyword;
                                    var nextState = this.stateTransitionHelper.tokeniseCardsExpressions(identifier, this.getParent());
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.stateTransitionHelper.tokeniseExpressions(identifier, this, this);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.stateTransitionHelper.tokeniseDataStatement(identifier, this);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.major_keyword;
                                        nextState = this.stateTransitionHelper.tokeniseMajorIdentifier(identifier, this.getParent(), this);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.stateTransitionHelper.tokeniseGlobalStatement(identifier, this, this);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.identifier;
                                        nextState = this.stateTransitionHelper.tokeniseLabel(identifier, this, stream);
                                    }
                                    if (nextState == null && this.afterMacro) {
                                        var result = this.stateTransitionHelper.tokeniseIdentifierAfterMacro(identifier, this, this.getParent(), this, stream);
                                        if (result != null) {
                                            return result;
                                        }
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.identifier;
                                        nextState = new state.UnknownStatementState(this, this);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Overridden to handle operators after a macro.
                                 */
                                DataStepState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    if (this.afterMacro) {
                                        var result = this.stateTransitionHelper.tokeniseOperatorAfterMacro(c, this.getStatementParentState(), stream);
                                        if (result != null) {
                                            return result;
                                        }
                                    }
                                    return _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                };
                                DataStepState.prototype.getName = function () {
                                    return "DataStepState";
                                };
                                return DataStepState;
                            }(state.AbstractStepState));
                            state.DataStepState = DataStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var ProcImlSubmitState = /** @class */ (function (_super) {
                                __extends(ProcImlSubmitState, _super);
                                function ProcImlSubmitState(parent, afterMacro) {
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, null, null, null, null, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                ProcImlSubmitState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Overridden to check for 'endsubmit'
                                 */
                                ProcImlSubmitState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    var start = stream.getOffset();
                                    if (start == 0) {
                                        stream.skipSpace();
                                        if ((SasLanguage.ENDSUBMIT === this.matchIdentifier(stream))) {
                                            return this.createTokenisationResult(TokenType.major_keyword, new state.TransitionState(this.getParent(), this, null), stream);
                                        }
                                    }
                                    stream.setOffset(start);
                                    return _super.prototype.tokenise.call(this, stream);
                                };
                                ProcImlSubmitState.prototype.copyStatementParentStateSetAfterMacro = function (afterMacro) {
                                    return new ProcImlSubmitState(this.getParent(), afterMacro);
                                };
                                ProcImlSubmitState.prototype.getName = function () {
                                    return "ProcImlSubmitState";
                                };
                                return ProcImlSubmitState;
                            }(state.GlobalState));
                            state.ProcImlSubmitState = ProcImlSubmitState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for handling Macro name. Always transition to MacroDefinitionState as long as the tokenType is
                             * not null.
                             *
                             * @author ml
                             */
                            var MacroNameState = /** @class */ (function (_super) {
                                __extends(MacroNameState, _super);
                                function MacroNameState(parent, oldStyleMacro) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.oldStyleMacro = oldStyleMacro;
                                    return _this;
                                }
                                MacroNameState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (nextState == null && tokenType != null) {
                                        var nextState2 = new state.MacroDefinitionState(this.parent, this.oldStyleMacro);
                                        if (tokenType != TokenType.semicolon && !this.oldStyleMacro) {
                                            nextState2 = new state.TransitionState(this.getStatementParentState(), this, nextState2);
                                        }
                                        return new TokenisationResult(tokenType, nextState2);
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                MacroNameState.prototype.getName = function () {
                                    return "MacroNameState";
                                };
                                return MacroNameState;
                            }(state.AbstractTokenisationState));
                            state.MacroNameState = MacroNameState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State after '%DO': checks for '%UNTIL' or '%WHILE' which go to BracketBooleanExpressionState.
                             *
                             * @author ml
                             */
                            var MacroDoExpressionState = /** @class */ (function (_super) {
                                __extends(MacroDoExpressionState, _super);
                                /**
                                 * Full constructor.
                                 *
                                 * @param afterErrorState
                                 * @param parent
                                 * @param internalState
                                 * @param bracketCount
                                 * @param prevChar
                                 * @param prevPrevChar
                                 * @param prevIdentifier
                                 */
                                function MacroDoExpressionState(statementParentState, parent, internalState, bracketCount, prevIdentifier, component) {
                                    if (internalState === void 0) { internalState = state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR; }
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, internalState, bracketCount, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                MacroDoExpressionState.prototype.createDoExpressionState = function (internalState, bracketCount, prevIdentifier, component) {
                                    return new MacroDoExpressionState(this.statementParentState, this.getParent(), internalState, bracketCount, prevIdentifier, component);
                                };
                                /**
                                 * Overridden so that internal state changes occur in the same way as for numbers, but it also checks
                                 * for function calls.
                                 */
                                MacroDoExpressionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var nextInternalState = this.internalState;
                                    var tokenType = TokenType.identifier;
                                    if (this.containsOpenBracket(stream) && (this.getGlobalFunction(identifier) != null)) {
                                        tokenType = TokenType._function;
                                    }
                                    var error = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                            nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                            nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                            break;
                                        default:
                                            error = true;
                                            break;
                                    }
                                    var nextState = null;
                                    if (error) {
                                        return this.createTokenisationResult(tokenType, this.createUnknownStatementState(), stream);
                                    }
                                    if (this.internalState != nextInternalState) {
                                        nextState = this.createDoExpressionStateIdentifier(nextInternalState, identifier);
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Overridden so that %WHILE / %UNTIL have nextState as BracketBooleanExpressionState, internal state
                                 * changes appropriately on %TO and %BY or other identifier.
                                 */
                                MacroDoExpressionState.prototype.tokeniseMacro = function (identifier, stream) {
                                    var nextInternalState = this.internalState;
                                    var tokenType = TokenType.macro_invocation;
                                    if ((identifier === SasLanguage.TO) || (identifier === SasLanguage.BY) || (identifier === SasLanguage.WHILE) || (identifier === SasLanguage.UNTIL)) {
                                        tokenType = TokenType.macro_keyword;
                                    }
                                    var error = false;
                                    var whileOrUntil = false;
                                    if (this.bracketCount > 0) {
                                        if (tokenType == TokenType.macro_keyword) {
                                            nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.MACRO;
                                        }
                                        else {
                                            switch ((this.internalState)) {
                                                case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                                    nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                    break;
                                                case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                    nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                    break;
                                                default:
                                                    error = true;
                                                    break;
                                            }
                                        }
                                    }
                                    else {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                                switch ((identifier)) {
                                                    case SasLanguage.WHILE:
                                                    case SasLanguage.UNTIL:
                                                        whileOrUntil = true;
                                                        break;
                                                    default:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND;
                                                        break;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                switch ((identifier)) {
                                                    case SasLanguage.BY:
                                                    case SasLanguage.TO:
                                                        nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC;
                                                        break;
                                                    case SasLanguage.WHILE:
                                                    case SasLanguage.UNTIL:
                                                        whileOrUntil = true;
                                                        break;
                                                    default:
                                                        error = true;
                                                        break;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                                error = true;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                                nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                nextInternalState = state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND;
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    var nextState = null;
                                    if (whileOrUntil) {
                                        var nextDoStatementState = this.createDoExpressionStateMinimal(state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND);
                                        nextState = new state.BracketBooleanExpressionState(this.statementParentState, this, nextDoStatementState);
                                    }
                                    else if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    else if (this.internalState != nextInternalState) {
                                        nextState = this.createDoExpressionStateMinimal(nextInternalState);
                                    }
                                    if (tokenType == TokenType.macro_invocation) {
                                        var sls = this.getSasLanguageSupporter();
                                        var macroInfo = sls != null ? sls.getMacroLanguageInfo(identifier) : null;
                                        var parentForMacroState = nextState != null ? nextState : this;
                                        if (macroInfo != null) {
                                            return this.createTokenisationResult(TokenType.macro_keyword, new state.MacroStatementState(parentForMacroState, macroInfo), stream);
                                        }
                                        else {
                                            return this.createTokenisationResult(TokenType.macro_invocation, new state.MacroInvocationExpressionState(this, parentForMacroState, identifier), stream);
                                        }
                                    }
                                    if (nextState != null) {
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseMacro.call(this, identifier, stream);
                                };
                                /**
                                 * Implementation to go to {@link MacroDoBodyState} on semicolon.
                                 */
                                MacroDoExpressionState.prototype.tokeniseSemiColon = function (stream) {
                                    var parent = this.getParent();
                                    var delegateState = parent;
                                    while ((delegateState != null && delegateState["__interfaces"] != null && delegateState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState") >= 0)) {
                                        delegateState = delegateState.getMacroDelegateState();
                                    }
                                    ;
                                    return this.createTokenisationResult(TokenType.semicolon, new state.MacroDoBodyState(this.statementParentState, parent, delegateState), stream);
                                };
                                /**
                                 * Get the parent as AbstractTokenisationState. The constructor forces the parent to be an instance,
                                 * so safe
                                 * to have no instanceof check.
                                 *
                                 * @return
                                 */
                                MacroDoExpressionState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                MacroDoExpressionState.prototype.getName = function () {
                                    return "MacroDoExpressionState";
                                };
                                return MacroDoExpressionState;
                            }(state.AbstractDoExpressionState));
                            state.MacroDoExpressionState = MacroDoExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * Subclassed to handle boolean expressions in %IF ... %THEN
                             */
                            var MacroIfStatementState = /** @class */ (function (_super) {
                                __extends(MacroIfStatementState, _super);
                                /**
                                 * Full constructor.
                                 *
                                 * @param parent
                                 * @param bracketCount
                                 * @param conditionState
                                 * @param prevConditionState
                                 * @param prevChar
                                 * @param prevPrevChar
                                 * @param prevIdentifier
                                 */
                                function MacroIfStatementState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                /**
                                 * implementation calls full constructor.
                                 */
                                MacroIfStatementState.prototype.createExpressionState = function (conditionState, bracketCount, prevIdentifier, component) {
                                    return new MacroIfStatementState(this.statementParentState, this.getParent(), bracketCount, conditionState, prevIdentifier, component);
                                };
                                /**
                                 * Overridden to return {@link AbstractTokenisationState} as the constructor guarantees the type of
                                 * parent.
                                 */
                                MacroIfStatementState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Overridden to change state on '%THEN' after a valid expression where brackets are closed.
                                 */
                                MacroIfStatementState.prototype.tokeniseMacro = function (identifier, stream) {
                                    if ((SasLanguage.THEN === identifier)) {
                                        return this.createTokenisationResult(TokenType.macro_keyword, new state.MacroThenState(this.statementParentState, this.getParent(), this.getParent()), stream);
                                    }
                                    return _super.prototype.tokeniseMacro.call(this, identifier, stream);
                                };
                                MacroIfStatementState.prototype.tokeniseIdentifier_handle_NNS = function (identifier, stream) {
                                    if (this.isComparisonMnemonic(identifier) || SasLanguage.isBooleanMnemonic(identifier)) {
                                        var nextState = this.createExpressionState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, this.bracketCount, null, null);
                                        return this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier_handle_NNS.call(this, identifier, stream);
                                };
                                /**
                                 * Overridden to never enter an error state: syntax is very loose and always ends with a %THEN.
                                 */
                                MacroIfStatementState.prototype.createUnknownStatementState = function () {
                                    return null;
                                };
                                MacroIfStatementState.prototype.getName = function () {
                                    return "MacroIfStatementState";
                                };
                                return MacroIfStatementState;
                            }(state.AssignmentExpressionState));
                            state.MacroIfStatementState = MacroIfStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var UnknownStepInfo = com.wpc.wps.language.context.information.UnknownStepInfo;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for when we're after a PROC keyword and are to choose a procedure.
                             */
                            var ProcChooserState = /** @class */ (function (_super) {
                                __extends(ProcChooserState, _super);
                                function ProcChooserState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                ProcChooserState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ProcChooserState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (nextState == null && tokenType != null) {
                                        return _super.prototype.createTokenisationResult.call(this, tokenType, this.getDefaultProcOptionsState(), stream);
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                /**
                                 * Finds the {@link SasStepInfo} for the PROC, for IML, R and ACCESS these have different states for
                                 * special handling.
                                 */
                                ProcChooserState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var stepInfo = this.getSasLanguageSupporter().getProcStep(identifier);
                                    var tokenType = TokenType.major_keyword;
                                    var procStepState;
                                    switch ((identifier)) {
                                        case SasLanguage.IML:
                                            procStepState = new state.ProcOptionsState(this.getParent(), new state.ProcImlStepState(this.getParent(), stepInfo), stepInfo);
                                            break;
                                        case SasLanguage.R:
                                            procStepState = new state.ProcOptionsState(this.getParent(), new state.ProcRStepState(this.getParent(), stepInfo), stepInfo);
                                            break;
                                        case SasLanguage.PYTHON:
                                            procStepState = new state.ProcOptionsState(this.getParent(), new state.ProcPythonStepState(this.getParent(), stepInfo), stepInfo);
                                            break;
                                        case SasLanguage.ACCESS:
                                        case SasLanguage.DBLOAD:
                                            procStepState = new state.ProcAccessDbloadOptionsState(this.getParent(), new state.ProcAccessDbloadStepState(this.getParent(), stepInfo), stepInfo);
                                            break;
                                        case SasLanguage.SQL:
                                            procStepState = new state.ProcOptionsState(this.getParent(), new state.ProcSqlStepState(this.getParent(), stepInfo), stepInfo);
                                            break;
                                        default:
                                            procStepState = new state.ProcOptionsState(this.getParent(), new state.ProcStepState(this.getParent(), stepInfo), stepInfo);
                                    }
                                    return this.createTokenisationResult(tokenType, procStepState, stream);
                                };
                                ProcChooserState.prototype.tokeniseSemiColon = function (stream) {
                                    return this.createTokenisationResult(TokenType.semicolon, this.getDefaultProcOptionsState(), stream);
                                };
                                /**
                                 * Get The {@link ProcOptionsState} for where there's no identifier.
                                 *
                                 * @return
                                 */
                                ProcChooserState.prototype.getDefaultProcOptionsState = function () {
                                    return new state.ProcOptionsState(this.getParent(), new state.ProcStepState(this.getParent(), UnknownStepInfo.EMPTY_INSTANCE), UnknownStepInfo.EMPTY_INSTANCE);
                                };
                                ProcChooserState.prototype.getName = function () {
                                    return "ProcChooserState";
                                };
                                return ProcChooserState;
                            }(state.AbstractTokenisationState));
                            state.ProcChooserState = ProcChooserState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for representing R comments which start with # and continue to the end of the line.
                             */
                            var RCommentState = /** @class */ (function (_super) {
                                __extends(RCommentState, _super);
                                function RCommentState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                RCommentState.prototype.tokenise = function (stream) {
                                    while ((!stream.eos())) {
                                        var c = stream.next();
                                        if (c == '\r' || c == '\n') {
                                            stream.backup(1);
                                            break;
                                        }
                                    }
                                    ;
                                    return new TokenisationResult(TokenType.comment, this.getParent());
                                };
                                RCommentState.prototype.getName = function () {
                                    return "RCommentState";
                                };
                                return RCommentState;
                            }(state.AbstractTokenisationState));
                            state.RCommentState = RCommentState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * Tokenises an expression for SELECT (...)
                             *
                             * @author ml
                             */
                            var SelectExpressionState = /** @class */ (function (_super) {
                                __extends(SelectExpressionState, _super);
                                /**
                                 * Full constructor.
                                 *
                                 * @param parent
                                 * @param bracketCount
                                 * @param conditionState
                                 * @param prevConditionState
                                 * @param prevIdentifier
                                 */
                                function SelectExpressionState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                SelectExpressionState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                    return new SelectExpressionState(this.statementParentState, this.parent, bracketCount, newConditionState, prevIdentifier, component);
                                };
                                SelectExpressionState.prototype.getName = function () {
                                    return "SelectExpressionState";
                                };
                                return SelectExpressionState;
                            }(state.BracketBooleanExpressionState));
                            state.SelectExpressionState = SelectExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SEMI_COLON = com.wpc.wps.language.context.common.SasLanguage.SEMI_COLON;
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for representing *; and %*; statement comments.
                             */
                            var StatementCommentState = /** @class */ (function (_super) {
                                __extends(StatementCommentState, _super);
                                function StatementCommentState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                StatementCommentState.prototype.tokenise = function (stream) {
                                    stream.skipUntil(false, SasLanguage.asString(SasLanguage.SEMI_COLON));
                                    if (stream.eos()) {
                                        return new TokenisationResult(TokenType.comment);
                                    }
                                    else {
                                        stream.next();
                                        return new TokenisationResult(TokenType.comment, this.parent);
                                    }
                                };
                                StatementCommentState.prototype.getName = function () {
                                    return "StatementCommentState";
                                };
                                return StatementCommentState;
                            }(state.AbstractTokenisationState));
                            state.StatementCommentState = StatementCommentState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State for representing multi line string literals and strings with macro stuff embedded.
                             */
                            var StringLiteralState = /** @class */ (function (_super) {
                                __extends(StringLiteralState, _super);
                                /**
                                 * Constructor.
                                 *
                                 * @param parent state it came from
                                 * @param nextState state after this one (usually the same as the parent)
                                 * @param quoteChar
                                 * @param nextStateIfIdentifier state after this one, if the {@link TokenType} is
                                 * {@link TokenType#identifier_string_literal}, this is effectively an identifier, so
                                 * states may handle this differently.
                                 */
                                function StringLiteralState(parent, nextState, quoteChar, nextStateIfIdentifier) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.quoteChar = quoteChar;
                                    _this.nextState = nextState;
                                    _this.nextStateIfIdentifier = nextStateIfIdentifier;
                                    if (!((quoteChar == SasLanguage.SINGLE_QUOTE || quoteChar == SasLanguage.DOUBLE_QUOTE)))
                                        throw new Error("Assertion error line 26: assert (quoteChar == SasLanguage.SINGLE_QUOTE || quoteChar == SasLanguage.DOUBLE_QUOTE);");
                                    ;
                                    return _this;
                                }
                                StringLiteralState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    if (stream.available() > 1 && this.quoteChar == SasLanguage.DOUBLE_QUOTE) {
                                        var start = stream.getOffset();
                                        var c0 = stream.next();
                                        var c1 = stream.next();
                                        stream.setOffset(start);
                                        if (c0 == SasLanguage.PERCENT && SasLanguage.isIdentifierStartChar(c1)) {
                                            stream.skip(1);
                                            var identifier = this.matchIdentifier(stream);
                                            return this.tokeniseMacro(identifier, stream);
                                        }
                                        if (this.containsMacroVariableAtCurrentPosition(stream)) {
                                            var tokenType = this.matchMacroVariable(stream);
                                            return this.tokeniseMacroVariable(tokenType, stream);
                                        }
                                    }
                                    var tokenType = this.matchStringsAfterQuote(stream, this.quoteChar);
                                    var result;
                                    if (tokenType == TokenType.string_literal || tokenType == TokenType.date_time_literal) {
                                        result = new TokenisationResult(tokenType, this.nextState);
                                    }
                                    else if (tokenType == TokenType.identifier_string_literal) {
                                        result = new TokenisationResult(tokenType, this.nextStateIfIdentifier);
                                    }
                                    else {
                                        result = new TokenisationResult(tokenType);
                                    }
                                    return result;
                                };
                                StringLiteralState.prototype.equals = function (obj) {
                                    if (obj instanceof com.wpc.wps.language.context.tokenisation.state.StringLiteralState) {
                                        return _super.prototype.equals.call(this, obj) && this.quoteChar == obj.quoteChar;
                                    }
                                    else {
                                        return false;
                                    }
                                };
                                StringLiteralState.prototype.getName = function () {
                                    return "StringLiteralState";
                                };
                                StringLiteralState.prototype.getFieldsString = function () {
                                    if (this.nextState == this.parent) {
                                        return "nextState/";
                                    }
                                    else {
                                        return "nextState=" + this.getStateName(this.nextState) + ",";
                                    }
                                };
                                StringLiteralState.prototype.getQuoteChar = function () {
                                    return this.quoteChar;
                                };
                                return StringLiteralState;
                            }(state.AbstractTokenisationState));
                            state.StringLiteralState = StringLiteralState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * {@link StringLiteralState} that has specific behaviour for macro quoting functions.
                             */
                            var MacroQuotingFunctionStringLiteralState = /** @class */ (function (_super) {
                                __extends(MacroQuotingFunctionStringLiteralState, _super);
                                function MacroQuotingFunctionStringLiteralState(parent, functionType, quoteChar) {
                                    var _this = _super.call(this, parent, parent, quoteChar, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    if (functionType == null) {
                                        throw new Error("Parameter \'functionType\' must not be null.");
                                    }
                                    _this.functionType = functionType;
                                    return _this;
                                }
                                MacroQuotingFunctionStringLiteralState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    switch ((this.functionType)) {
                                        case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.BQUOTE:
                                        case com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionState.QuotingFunctionType.NRBQUOTE:
                                            if (stream.available() > 1 && this.quoteChar == SasLanguage.SINGLE_QUOTE) {
                                                if (this.containsMacroVariableAtCurrentPosition(stream)) {
                                                    var tokenType = this.matchMacroVariable(stream);
                                                    return this.tokeniseMacroVariable(tokenType, stream);
                                                }
                                            }
                                            break;
                                        default:
                                    }
                                    return _super.prototype.tokenise.call(this, stream);
                                };
                                MacroQuotingFunctionStringLiteralState.prototype.equals = function (obj) {
                                    var result = false;
                                    if (obj instanceof com.wpc.wps.language.context.tokenisation.state.MacroQuotingFunctionStringLiteralState) {
                                        result = _super.prototype.equals.call(this, obj);
                                        if (result) {
                                            var theirs = obj;
                                            result = this.functionType == theirs.functionType;
                                        }
                                    }
                                    return result;
                                };
                                MacroQuotingFunctionStringLiteralState.prototype.getName = function () {
                                    return "MacroQuotingFunctionStringLiteralState";
                                };
                                return MacroQuotingFunctionStringLiteralState;
                            }(state.StringLiteralState));
                            state.MacroQuotingFunctionStringLiteralState = MacroQuotingFunctionStringLiteralState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * Subclassed to handle boolean expressions in WHERE
                             */
                            var WhereStatementState = /** @class */ (function (_super) {
                                __extends(WhereStatementState, _super);
                                function WhereStatementState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                WhereStatementState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                    return new WhereStatementState(this.statementParentState, this.parent, bracketCount, newConditionState, prevIdentifier, component);
                                };
                                /**
                                 * Overridden to include CONTAINS and LIKE.
                                 */
                                WhereStatementState.prototype.isComparisonMnemonic = function (str) {
                                    if ((SasLanguage.CONTAINS === str) || (SasLanguage.LIKE === str)) {
                                        return true;
                                    }
                                    return _super.prototype.isComparisonMnemonic.call(this, str);
                                };
                                /**
                                 * Overridden to check for IS NULL / IS MISSING
                                 */
                                WhereStatementState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var nextInternalState = this.internalState;
                                    var error = false;
                                    var tokenType = TokenType.identifier;
                                    var prevIdentifier = null;
                                    if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND) {
                                        if ((SasLanguage.IS === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.IS;
                                        }
                                        else if ((SasLanguage.NOT === identifier)) {
                                            tokenType = TokenType.keyword;
                                        }
                                        else if ((SasLanguage.BETWEEN === identifier) || (SasLanguage.AND === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                        }
                                    }
                                    if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS) {
                                        var keywordNext = null;
                                        if ((SasLanguage.SAME === identifier) && ((keywordNext = this.streamContainsIdentifier(stream, SasLanguage.AND)) == null || keywordNext)) {
                                            tokenType = keywordNext != null && keywordNext ? TokenType.keyword : TokenType.identifier;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.SAME;
                                        }
                                        else if ((SasLanguage.ALSO === identifier)) {
                                            tokenType = TokenType.keyword;
                                        }
                                    }
                                    else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.IS) {
                                        if ((SasLanguage.NULL === identifier) || (SasLanguage.MISSING === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                        }
                                        else if ((SasLanguage.NOT === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.IS_NOT;
                                        }
                                        else {
                                            error = true;
                                        }
                                    }
                                    else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.IS_NOT) {
                                        if ((SasLanguage.NULL === identifier) || (SasLanguage.MISSING === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                        }
                                        else {
                                            error = true;
                                        }
                                    }
                                    else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SAME) {
                                        if ((SasLanguage.AND === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                        }
                                        else if (this.isComparisonMnemonic(identifier) || SasLanguage.isBooleanMnemonic(identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS;
                                        }
                                        else if ((SasLanguage.IN === identifier)) {
                                            tokenType = TokenType.keyword;
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.IN;
                                        }
                                        else {
                                            error = true;
                                        }
                                    }
                                    var nextState = null;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    if (nextInternalState != this.internalState) {
                                        nextState = this.createExpressionState(nextInternalState, this.bracketCount, prevIdentifier, null);
                                    }
                                    if (nextState != null || tokenType != TokenType.identifier) {
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                /**
                                 * Overridden to handle IS state.
                                 */
                                WhereStatementState.prototype.tokeniseNumber = function (tokenType, stream) {
                                    var nextInternalState = this.internalState;
                                    var error = this.isMultiKeywordState();
                                    var nextState = null;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    if (nextInternalState != this.internalState) {
                                        nextState = this.createExpressionState(nextInternalState, this.bracketCount, null, null);
                                    }
                                    if (nextState != null) {
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseNumber.call(this, tokenType, stream);
                                };
                                /**
                                 * Overridden to handle IS state.
                                 */
                                WhereStatementState.prototype.getStateAfterString = function () {
                                    var nextInternalState = this.internalState;
                                    var stateAfterString = _super.prototype.getStateAfterString.call(this);
                                    if (stateAfterString instanceof com.wpc.wps.language.context.tokenisation.state.WhereStatementState) {
                                        nextInternalState = stateAfterString.internalState;
                                    }
                                    var error = this.isMultiKeywordState();
                                    var nextState = null;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    else if (nextInternalState != this.internalState) {
                                        nextState = this.createExpressionStateMinimal(nextInternalState);
                                    }
                                    return nextState;
                                };
                                /**
                                 * Is internal state one of those that requires several keywords, i.e. IS NOT NULL, IS NULL, IS
                                 * MISSING.
                                 *
                                 * @return
                                 */
                                WhereStatementState.prototype.isMultiKeywordState = function () {
                                    var b = false;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS_NOT:
                                        case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SAME:
                                            b = true;
                                            break;
                                        default:
                                            break;
                                    }
                                    return b;
                                };
                                /**
                                 * Overridden to check for {@link #isMultiKeywordState()}.
                                 */
                                WhereStatementState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var error = this.isMultiKeywordState();
                                    var nextState = null;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                };
                                /**
                                 * Overridden to handle IS state.
                                 */
                                WhereStatementState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextInternalState = this.internalState;
                                    var nextBracketCount = this.bracketCount;
                                    var error = false;
                                    if (SasLanguage.isBracketOpen(c)) {
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS_NOT:
                                                error = true;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SAME:
                                                var functionInfo = this.getGlobalFunction(SasLanguage.SAME);
                                                var nextState = this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                                return this.createTokenisationResult(tokenType, new state.FunctionState(this.statementParentState, this, nextState, functionInfo, state.FunctionState.INITIAL_BRACKETCOUNT_ON_BRACKET), stream);
                                            default:
                                                break;
                                        }
                                    }
                                    else if (SasLanguage.isBracketClose(c)) {
                                        error = this.isMultiKeywordState();
                                    }
                                    var nextState = null;
                                    if (error) {
                                        nextState = this.createUnknownStatementState();
                                    }
                                    else if (nextInternalState != this.internalState || nextBracketCount != this.bracketCount) {
                                        nextState = this.createExpressionState(nextInternalState, nextBracketCount, null, null);
                                    }
                                    if (nextState != null) {
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                };
                                /**
                                 * Check if stream contains specified identifier next.
                                 *
                                 * @param stream
                                 * @param strs identifiers to check for
                                 * @return true if definitely does, false if definitely doesn't or null if not sure (end of stream).
                                 */
                                WhereStatementState.prototype.streamContainsIdentifier = function (stream) {
                                    var strs = [];
                                    for (var _i = 1; _i < arguments.length; _i++) {
                                        strs[_i - 1] = arguments[_i];
                                    }
                                    var b = false;
                                    var offset = stream.getOffset();
                                    stream.skipSpace();
                                    if (stream.available() > 0) {
                                        var identifier = this.matchIdentifier(stream);
                                        for (var index125 = 0; index125 < strs.length; index125++) {
                                            var str = strs[index125];
                                            {
                                                b = (str === identifier);
                                                if (b) {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        b = null;
                                    }
                                    stream.setOffset(offset);
                                    return b;
                                };
                                WhereStatementState.prototype.getName = function () {
                                    return "WhereStatementState";
                                };
                                return WhereStatementState;
                            }(state.AssignmentExpressionState));
                            state.WhereStatementState = WhereStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var MacroDefinitionState = /** @class */ (function (_super) {
                                __extends(MacroDefinitionState, _super);
                                function MacroDefinitionState(parent, oldStyleMacro, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    _this.oldStyleMacro = oldStyleMacro;
                                    _this.arrayNames = arrayNames;
                                    _this.definedComponents = definedComponents;
                                    _this.afterMacro = afterMacro;
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.copyAndAddArrayName = function (newArray) {
                                    var builder = this.transpilableCollections.transpilableSetBuilderFromExistingSet(this.getDefinedArrayNames());
                                    builder.add(newArray);
                                    return new MacroDefinitionState(this.parent, this.oldStyleMacro, builder.build(), this.definedComponents, this.afterMacro);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.copyAndAddComponent = function (newComponent, component) {
                                    var mapBuilder = this.transpilableCollections.transpilableMapBuilderFromExistingMap(this.definedComponents);
                                    mapBuilder.put(newComponent, component);
                                    return new MacroDefinitionState(this.parent, this.oldStyleMacro, this.arrayNames, mapBuilder.build(), this.afterMacro);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.copyStatementParentStateSetAfterMacro = function (afterMacro) {
                                    return new MacroDefinitionState(this.parent, this.oldStyleMacro, this.arrayNames, this.definedComponents, afterMacro);
                                };
                                MacroDefinitionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var tokenType = TokenType.identifier;
                                    var nextState = this.stateTransitionHelper.tokeniseLabel(identifier, this, stream);
                                    if (nextState == null) {
                                        var result = this.stateTransitionHelper.tokeniseIdentifierAfterMacro(identifier, this, new state.GlobalState(this), this, stream);
                                        if (result != null) {
                                            return result;
                                        }
                                    }
                                    if (nextState != null) {
                                        return this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                /**
                                 * Overridden so formats are not tokenised.
                                 */
                                MacroDefinitionState.prototype.matchFormat = function (stream) {
                                    return null;
                                };
                                MacroDefinitionState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    var result = this.stateTransitionHelper.tokeniseLineCommentFromOperator(c, this);
                                    if (result == null && this.afterMacro) {
                                        result = this.stateTransitionHelper.tokeniseOperatorAfterMacro(c, this, stream);
                                    }
                                    if (result == null) {
                                        result = _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Overridden to check for assignment and wrap the {@link ITokenisationState} in an
                                 * {@link IdentifierState} if there is.
                                 *
                                 * See
                                 * {@link stateTransitionHelper#createTokenisationResultWithLanguageInfo(TokenType, ITokenisationState, ITokenisationStream, LanguageInfo)}
                                 *
                                 * @return TokenisationResult with {@link IdentifierState} wrapping nextState if we deem it to be an
                                 * assignment, or a straight-forward implementation otherwise.
                                 */
                                MacroDefinitionState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    return this.stateTransitionHelper.createTokenisationResultForAssignment(this, tokenType, nextState, stream);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.getDefinedArrayNames = function () {
                                    return this.arrayNames;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.getDefinedComponents = function () {
                                    return this.definedComponents;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.getParentMacro = function () {
                                    return this;
                                };
                                MacroDefinitionState.prototype.getStatementParentState = function () {
                                    return this;
                                };
                                MacroDefinitionState.prototype.getNextStateAfterMacroState = function () {
                                    return this.copyStatementParentStateSetAfterMacro(true);
                                };
                                /**
                                 *
                                 * @return true if an old style macro
                                 */
                                MacroDefinitionState.prototype.isOldStyleMacro = function () {
                                    return this.oldStyleMacro;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                MacroDefinitionState.prototype.getFieldsString = function () {
                                    return "afterMacro=" + this.afterMacro + ", " + (this.arrayNames != null && this.arrayNames.size() > 0 ? "arrayNames=" + this.arrayNames + ", " : "");
                                };
                                MacroDefinitionState.prototype.getName = function () {
                                    return "MacroDefinitionState";
                                };
                                return MacroDefinitionState;
                            }(state.AbstractTokenisationState));
                            state.MacroDefinitionState = MacroDefinitionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var MacroEndState = /** @class */ (function (_super) {
                                __extends(MacroEndState, _super);
                                function MacroEndState(macroDefinitionState) {
                                    var _this = _super.call(this, macroDefinitionState, macroDefinitionState, macroDefinitionState.parent.getStatementParentState()) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                MacroEndState.prototype.getName = function () {
                                    return "MacroEndState";
                                };
                                return MacroEndState;
                            }(state.TransitionState));
                            state.MacroEndState = MacroEndState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * Handle user-defined macro invocations: looks for open bracket, any other
                             * token when no brackets means that the parent is invoked and switched to
                             * parent.
                             *
                             * @author ml
                             */
                            var MacroInvocationExpressionState = /** @class */ (function (_super) {
                                __extends(MacroInvocationExpressionState, _super);
                                /**
                                 * Full constructor.
                                 *
                                 * @param parent {@link ITokenisationState} that preceded this one
                                 * @param stateAfterMacroInvocation state {@link ITokenisationState} that follows this one
                                 * @param identifier identifier Macro name
                                 * @param nameIncomplete true if the name contains a macro variable
                                 * @param bracketCount number of open brackets
                                 */
                                function MacroInvocationExpressionState(parent, stateAfterMacroInvocation, identifier, nameIncomplete, bracketCount) {
                                    if (identifier === void 0) { identifier = null; }
                                    if (nameIncomplete === void 0) { nameIncomplete = false; }
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.stateAfterMacroInvocation = stateAfterMacroInvocation;
                                    _this.bracketCount = bracketCount;
                                    _this.invocationExpressionIdentifier = identifier;
                                    _this.nameIncomplete = nameIncomplete;
                                    return _this;
                                }
                                MacroInvocationExpressionState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Overridden so that if a bracket has been opened, the semicolon won't change the state.
                                 */
                                MacroInvocationExpressionState.prototype.tokeniseSemiColon = function (stream) {
                                    if (this.bracketCount == 0) {
                                        return _super.prototype.tokeniseSemiColon.call(this, stream);
                                    }
                                    else {
                                        return this.createTokenisationResult(TokenType.semicolon, null, stream);
                                    }
                                };
                                /**
                                 * {@inheritDoc} <br/>
                                 *
                                 * Balances brackets within a {@link MacroInvocationExpressionState}.
                                 */
                                MacroInvocationExpressionState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    var nextBracketCount = this.bracketCount;
                                    if (c == SasLanguage.BRACKET_OPEN) {
                                        nextBracketCount++;
                                    }
                                    else if (c == SasLanguage.BRACKET_CLOSE) {
                                        if (this.bracketCount == 0) {
                                            stream.rewind();
                                            return new TokenisationResult(null, this.getParent());
                                        }
                                        else {
                                            nextBracketCount--;
                                        }
                                    }
                                    var nextState = null;
                                    if (nextBracketCount != this.bracketCount) {
                                        if (nextBracketCount == 0) {
                                            nextState = this.stateAfterMacroInvocation;
                                        }
                                        else {
                                            nextState = this.createNextStateAfterBracket(nextBracketCount);
                                        }
                                    }
                                    return this.createTokenisationResult(tokenType, nextState, stream);
                                };
                                /**
                                 * Overridden to rewind set nextState as
                                 * {@link #stateAfterMacroInvocation} where there is no open bracket or {@link #getParent()} if
                                 * there's a colon (goto marker) or if this came from {@link AbstractStepState} and the next token is
                                 * an identifier (therefore unlikely to be an assignment) so let the {@link AbstractStepState} handle
                                 * it.
                                 */
                                MacroInvocationExpressionState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    var parent = this.getParent();
                                    if (this.nameIncomplete) {
                                        var stillNameIncomplete = false;
                                        switch ((tokenType)) {
                                            case com.wpc.wps.language.context.tokenisation.TokenType.int_literal:
                                            case com.wpc.wps.language.context.tokenisation.TokenType.identifier:
                                            case com.wpc.wps.language.context.tokenisation.TokenType.macro_invocation:
                                            case com.wpc.wps.language.context.tokenisation.TokenType.macro_variable:
                                                stillNameIncomplete = true;
                                                break;
                                            default:
                                                break;
                                        }
                                        if (!stillNameIncomplete) {
                                            stream.rewind();
                                            return new TokenisationResult(null, new MacroInvocationExpressionState(parent, this.stateAfterMacroInvocation, this.invocationExpressionIdentifier, false, 0));
                                        }
                                    }
                                    else if (tokenType != null && tokenType != TokenType.parenthesis && this.bracketCount == 0) {
                                        if (tokenType == TokenType.punctuation) {
                                            var c = stream.peekBack(stream.getOffset() - 1).charAt(0);
                                            if (c == SasLanguage.COLON) {
                                                return new TokenisationResult(tokenType, parent);
                                            }
                                        }
                                        else if (tokenType == TokenType.identifier && (parent instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState)) {
                                            stream.rewind();
                                            return new TokenisationResult(null, parent);
                                        }
                                        stream.rewind();
                                        return new TokenisationResult(null, this.stateAfterMacroInvocation);
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                /**
                                 * When tokeniseBracket encounters a bracket (typically an open bracket) this creates the next
                                 * state).
                                 *
                                 * @param nextBracketCount - The bracket count to pass to the next state.
                                 * @return MacroInvocationExpressionState - The next state.
                                 */
                                MacroInvocationExpressionState.prototype.createNextStateAfterBracket = function (nextBracketCount) {
                                    return new MacroInvocationExpressionState(this.getParent(), this.stateAfterMacroInvocation, this.invocationExpressionIdentifier, this.nameIncomplete, nextBracketCount);
                                };
                                MacroInvocationExpressionState.prototype.getBracketCount = function () {
                                    return this.bracketCount;
                                };
                                MacroInvocationExpressionState.prototype.getName = function () {
                                    return "MacroInvocationExpressionState";
                                };
                                MacroInvocationExpressionState.prototype.getFieldsString = function () {
                                    return "bracketCount: " + this.bracketCount + ", invocationExpressionIdentifier: " + this.invocationExpressionIdentifier + ", nameIncomplete: " + this.nameIncomplete + ", stateAfterMacroInvocation: " + this.stateAfterMacroInvocation + ", ";
                                };
                                return MacroInvocationExpressionState;
                            }(state.AbstractTokenisationState));
                            state.MacroInvocationExpressionState = MacroInvocationExpressionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var MacroStatementState = /** @class */ (function (_super) {
                                __extends(MacroStatementState, _super);
                                function MacroStatementState(parent, currentMacroLanguageInfo, bracketCount) {
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, parent, parent, null, false, bracketCount) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.currentMacroLanguageInfo = currentMacroLanguageInfo;
                                    return _this;
                                }
                                MacroStatementState.prototype.getCurrentMacroLanguageInfo = function () {
                                    return this.currentMacroLanguageInfo;
                                };
                                MacroStatementState.prototype.getFieldsString = function () {
                                    return _super.prototype.getFieldsString.call(this) + "currentMacroLanguageInfo=" + this.currentMacroLanguageInfo + ", ";
                                };
                                MacroStatementState.prototype.getName = function () {
                                    return "MacroStatementState";
                                };
                                return MacroStatementState;
                            }(state.MacroInvocationExpressionState));
                            state.MacroStatementState = MacroStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * Subclassed to handle boolean expressions in IF ... THEN
                             */
                            var IfStatementState = /** @class */ (function (_super) {
                                __extends(IfStatementState, _super);
                                function IfStatementState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                    if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                    if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                    if (prevIdentifier === void 0) { prevIdentifier = null; }
                                    if (component === void 0) { component = null; }
                                    var _this = _super.call(this, statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    return _this;
                                }
                                IfStatementState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                    return new IfStatementState(this.statementParentState, this.parent, bracketCount, newConditionState, prevIdentifier, component);
                                };
                                /**
                                 * Overridden to change state on 'THEN' after a valid expression where brackets are closed.
                                 */
                                IfStatementState.prototype.tokeniseIdentifier_handle_NNS_FOUND = function (identifier, stream) {
                                    if (this.bracketCount == 0 && (SasLanguage.THEN === identifier)) {
                                        return this.createTokenisationResult(TokenType.keyword, this.parent, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier_handle_NNS_FOUND.call(this, identifier, stream);
                                };
                                IfStatementState.prototype.getName = function () {
                                    return "IfStatementState";
                                };
                                return IfStatementState;
                            }(state.AssignmentExpressionState));
                            state.IfStatementState = IfStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var AbstractSasLanguageSupport_Lua = com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State to handle option values.
                             *
                             * @author ml
                             */
                            var OptionValueState = /** @class */ (function (_super) {
                                __extends(OptionValueState, _super);
                                /**
                                 * Full constructor
                                 *
                                 * @param parent - Typically the parent of the optionsState, or its nextState. This is the default
                                 * 'next' state.
                                 * @param optionsState - The options state for which this state holds the value for. TYpically used
                                 * as our next state.
                                 * @param optionLanguageInfo - Nullable. The language info linked to our option.
                                 * @param bracketCount
                                 */
                                function OptionValueState(statementParentState, parent, optionsState, optionLanguageInfo, bracketCount, internalState) {
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    if (internalState === void 0) { internalState = null; }
                                    var _this = _super.call(this, statementParentState, parent, optionsState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.optionLanguageInfo = optionLanguageInfo;
                                    _this.bracketCount = bracketCount;
                                    _this.internalState = internalState;
                                    return _this;
                                }
                                /**
                                 * Create a copy of this state with a different bracket count.
                                 *
                                 * @param nextBracketCount
                                 * @return
                                 */
                                OptionValueState.prototype.createOptionValueStateNextBracketCount = function (nextBracketCount) {
                                    return new OptionValueState(this.statementParentState, this.parent, this.nextState, this.optionLanguageInfo, nextBracketCount, this.internalState);
                                };
                                /**
                                 * Create a copy of this state with a different {@link InternalState}.
                                 *
                                 * @param nextInternalState {@link InternalState} to set
                                 * @return new instance of {@link OptionValueState}
                                 */
                                OptionValueState.prototype.createOptionValueStateInternalState = function (nextInternalState) {
                                    return new OptionValueState(this.statementParentState, this.parent, this.nextState, this.optionLanguageInfo, this.bracketCount, nextInternalState);
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden so that if we're a value that is a datastep and we've got an identifier already, then
                                 * only a '.' or '(' is allowed, otherwise we change state back to the parent for it to handle.
                                 */
                                OptionValueState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    if (stream.eos()) {
                                        return null;
                                    }
                                    var c = stream.peek();
                                    if (this.internalState == OptionValueState.InternalState.foundIdentifier && c != SasLanguage.DOT && c != SasLanguage.BRACKET_OPEN && !SasLanguage.isWhitespace(c) && !this.isStreamContainsMacroIfThenDo(stream) && this.bracketCount == 0) {
                                        return this.createTokenisationResult(null, this.parent, stream);
                                    }
                                    return _super.prototype.tokenise.call(this, stream);
                                };
                                /**
                                 * Set as a keyword if the value is found as one of the keywords of the option, otherwise it's an
                                 * identifier, which needs extra checking.
                                 */
                                OptionValueState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var tokenType = TokenType.identifier;
                                    var result = null;
                                    if (this.optionLanguageInfo != null && this.optionLanguageInfo.getKeyword(identifier) != null) {
                                        tokenType = TokenType.keyword;
                                    }
                                    else {
                                        result = this.tokeniseIdentifierAndMacroVariable(identifier, stream, tokenType);
                                    }
                                    if (result == null) {
                                        if (this.isSystemOptionsAppendInsertValue() && this.getSasLanguageSupporter().getSystemOption(identifier) != null) {
                                            tokenType = TokenType.keyword;
                                        }
                                        result = this.createTokenisationResult(tokenType, this.parent, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 * Overridden to ensure we go back to the options state, except for a dataset, handle as if it's an
                                 * identifier except that we can't check if the macro variable resolves to an option name.
                                 */
                                OptionValueState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                    var result = this.tokeniseIdentifierAndMacroVariable(null, stream, tokenType);
                                    if (result != null) {
                                        return result;
                                    }
                                    return this.createTokenisationResult(tokenType, this.parent, stream);
                                };
                                /**
                                 * For an identifier or a macro variable, there are circumstances where we don't want to return to
                                 * the parent.<br/>
                                 *
                                 * For PROC DELETE, the option value for the DATA option is any number of dataset names, so must stay
                                 * in this state until the close bracket.<br/>
                                 *
                                 * If this state is for any option that takes a dataset as a value, the dataset name can include '.'
                                 * as a qualifier and then if there's an open bracket, these are options for that dataset and so the
                                 * next state must be {@link DataOptionsState}.<br/>
                                 *
                                 * If this is the value of a dataset option that can have multiple values e.g. KEEP DROP, then there
                                 * can be any number of identifiers, but there also needs to be a check as to whether it's a
                                 * different dataset option in which case the KEEP/DROP option is implicitly ended.<br/>
                                 *
                                 * @param identifier Identifier or null for a macro variable
                                 * @param stream
                                 * @param tokenType
                                 * @return {@link TokenisationResult}
                                 */
                                OptionValueState.prototype.tokeniseIdentifierAndMacroVariable = function (identifier, stream, tokenType) {
                                    var result = null;
                                    if ((this.parent instanceof com.wpc.wps.language.context.tokenisation.state.ProcOptionsState) && (SasLanguage.DELETE === this.parent.getStepInfo().getLanguageInfo().getName())) {
                                        result = this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else if (this.isDatasetOptionValue()) {
                                        result = this.tokeniseIdentifierAndMacroVariable_datasetOptionValue(stream, tokenType);
                                    }
                                    else if (this.isDatasetOptionMultiValue() || this.isDatasetOptionLabel()) {
                                        var dataOptionsState = this.parent;
                                        if (identifier != null && dataOptionsState.getStepInfo().getLanguageInfo().getOption(identifier) != null && this.isStreamContainsEquals(stream)) {
                                            stream.rewind();
                                            result = this.createTokenisationResult(null, this.parent, stream);
                                        }
                                        else {
                                            result = this.createTokenisationResult(tokenType, null, stream);
                                        }
                                    }
                                    else if (this.isNumericListOptionValue()) {
                                        if ((SasLanguage.TO === identifier) || (SasLanguage.BY === identifier)) {
                                            result = this.createTokenisationResult(TokenType.keyword, null, stream);
                                        }
                                        else if (identifier != null && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepStateOptionsState) && this.parent.getStepInfo().getLanguageInfo().getOption(identifier) != null) {
                                            stream.rewind();
                                            result = this.createTokenisationResult(null, this.parent, stream);
                                        }
                                    }
                                    else if (this.isSystemOptionsSetValue()) {
                                        result = this.tokeniseIdentifierAndMacroVariable_systemOptionSetValue(stream, tokenType);
                                    }
                                    else if (this.isStreamContainsDotOrMacroVar(stream)) {
                                        result = this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else if (this.isEndOfLineIgnoreWhitespace(stream) || this.isStreamContainsMacroIfThenDo(stream)) {
                                        result = this.createTokenisationResult(tokenType, this.createOptionValueStateInternalState(OptionValueState.InternalState.foundIdentifier), stream);
                                    }
                                    else if (this.bracketCount > 0) {
                                        result = this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else {
                                        result = this.createTokenisationResult(tokenType, this.parent, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * For an identifier or a macro variable and this state is for any option that takes a dataset as a
                                 * value, the dataset name can include '.' as a qualifier and then if there's an open bracket, these
                                 * are options for that dataset and so the next state must be {@link DataOptionsState}.<br/>
                                 *
                                 * @param identifier Identifier or null for a macro variable
                                 * @param stream
                                 * @param tokenType
                                 * @return {@link TokenisationResult}
                                 */
                                OptionValueState.prototype.tokeniseIdentifierAndMacroVariable_datasetOptionValue = function (stream, tokenType) {
                                    var result = null;
                                    if (this.isStreamContainsDotOrMacroVar(stream)) {
                                        result = this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else if (this.isStreamContainsOpenBracket(stream)) {
                                        result = this.createTokenisationResult(tokenType, new state.DataOptionsState(this.statementParentState, this, this.nextState, null, 0), stream);
                                    }
                                    else if (this.isEndOfLineIgnoreWhitespace(stream) || this.isStreamContainsMacroIfThenDo(stream)) {
                                        result = this.createTokenisationResult(tokenType, this.createOptionValueStateInternalState(OptionValueState.InternalState.foundIdentifier), stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Process an identifier or macro variable, where it's the value of a system option.
                                 *
                                 * @param stream
                                 * @param tokenType
                                 * @return
                                 */
                                OptionValueState.prototype.tokeniseIdentifierAndMacroVariable_systemOptionSetValue = function (stream, tokenType) {
                                    var nextState2 = null;
                                    if (this.isStreamContainsDotOrMacroVar(stream)) {
                                        nextState2 = null;
                                    }
                                    else if (this.internalState == null) {
                                        nextState2 = this.createOptionValueStateInternalState(OptionValueState.InternalState.optionsSetIdentifier);
                                    }
                                    else {
                                        nextState2 = this.parent;
                                    }
                                    return this.createTokenisationResult(tokenType, nextState2, stream);
                                };
                                /**
                                 * Check if the stream is an the end of the line ignoring white space.
                                 *
                                 * @param stream
                                 * @return
                                 */
                                OptionValueState.prototype.isEndOfLineIgnoreWhitespace = function (stream) {
                                    var offset = stream.getOffset();
                                    try {
                                        return stream.skipSpace() >= 0 && stream.eos();
                                    }
                                    finally {
                                        stream.setOffset(offset);
                                    }
                                    ;
                                };
                                /**
                                 * Check if the stream contains an open bracket, ignoring whitespace.
                                 *
                                 * @param stream
                                 * @return
                                 */
                                OptionValueState.prototype.isStreamContainsOpenBracket = function (stream) {
                                    return stream.isNextCharacter(SasLanguage.BRACKET_OPEN, SasLanguage.SPACE, SasLanguage.TAB) >= 0;
                                };
                                /**
                                 * Check if the stream contains a '=', ignoring whitespace.
                                 *
                                 * @param stream
                                 * @return
                                 */
                                OptionValueState.prototype.isStreamContainsEquals = function (stream) {
                                    return stream.isNextCharacter(SasLanguage.EQUALS, SasLanguage.SPACE, SasLanguage.TAB) >= 0;
                                };
                                /**
                                 * Check if the stream contains a dot (ignoring space indicates an object), macro variable (no space,
                                 * macro variable is part of the identifier, e.g. spon&ge.), or an identifier char (with no space,
                                 * which after a macro var indicates that it is probably combined with the macro var, e.g. &a.b or
                                 * &a.0 ).<br/>
                                 *
                                 * @param stream
                                 * @return
                                 */
                                OptionValueState.prototype.isStreamContainsDotOrMacroVar = function (stream) {
                                    return stream.isNextCharacter(SasLanguage.DOT, SasLanguage.SPACE, SasLanguage.TAB) >= 0 || this.containsMacroVariableAtCurrentPosition(stream) || stream.available() > 0 && SasLanguage.isIdentifierChar(stream.peek());
                                };
                                /**
                                 * Check if the stream contains a macro %IF %THEN %DO
                                 *
                                 * @param stream
                                 * @return
                                 */
                                OptionValueState.prototype.isStreamContainsMacroIfThenDo = function (stream) {
                                    var offset = stream.getOffset();
                                    try {
                                        stream.skipSpace();
                                        if (stream.available() > 0 && stream.peek() == SasLanguage.PERCENT) {
                                            stream.skip(1);
                                            var identifier = this.matchIdentifier(stream);
                                            var ifThenDo = false;
                                            switch ((identifier)) {
                                                case SasLanguage.IF:
                                                case SasLanguage.THEN:
                                                case SasLanguage.DO:
                                                    ifThenDo = true;
                                            }
                                            return ifThenDo;
                                        }
                                    }
                                    finally {
                                        stream.setOffset(offset);
                                    }
                                    ;
                                    return false;
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 * Overridden to ensure we go back to the options state.
                                 */
                                OptionValueState.prototype.getStateAfterString = function () {
                                    if (this.bracketCount > 0 || this.isDatasetOptionLabel() || this.isDatasetOptionMultiValue()) {
                                        return this;
                                    }
                                    return this.parent;
                                };
                                OptionValueState.prototype.matchStrings = function (stream, quoteChar) {
                                    if (this.isDatasetOptionLabel() && !(stream.peekBack(stream.getOffset() - 1) === /* valueOf */ new String(SasLanguage.EQUALS))) {
                                        return null;
                                    }
                                    return _super.prototype.matchStrings.call(this, stream, quoteChar);
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 * Overridden to ensure we go back to the options state. Except for: numeric lists which can have
                                 * many
                                 * numbers; when there is an open bracket; for LABEL which can have several numbers (and/or
                                 * identifiers).<br/>
                                 *
                                 * Option values that are numbers can have suffix of 'K' or 'M' or 'G' or 'X'<br/>
                                 *
                                 * System options: BOTTOMMARGIN, TOPMARGIN, LEFTMARGIN RIGHTMARGIN can have 'cm' suffix<br/>
                                 */
                                OptionValueState.prototype.tokeniseNumber = function (tokenType, stream) {
                                    if (this.isDatasetOptionLabel()) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    if (tokenType == TokenType.int_literal && stream.available() > 0) {
                                        var c = stream.peek();
                                        switch ((c)) {
                                            case 'G':
                                            case 'g':
                                            case 'x':
                                            case 'X':
                                            case 'M':
                                            case 'm':
                                            case 'K':
                                            case 'k':
                                                stream.skip(1);
                                                break;
                                        }
                                    }
                                    if (this.isSystemOptionMargin() && stream.available() > 0) {
                                        var offset = stream.getOffset();
                                        var matchIdentifier = this.matchIdentifier(stream);
                                        if (!((SasLanguage.CM === matchIdentifier) || (SasLanguage.PT === matchIdentifier) || (SasLanguage.IN === matchIdentifier))) {
                                            stream.setOffset(offset);
                                        }
                                    }
                                    if (this.isNumericListOptionValue() || this.bracketCount > 0 || this.isDatasetOptionLabel()) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    return this.createTokenisationResult(tokenType, this.parent, stream);
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 * Overridden to ensure we go back to the options state, except for certain chars.
                                 */
                                OptionValueState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    if (this.isDatasetOptionLabel()) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    if (this.internalState == OptionValueState.InternalState.foundIdentifier && SasLanguage.DOT == c) {
                                        return this.createTokenisationResult(tokenType, this.createOptionValueStateInternalState(null), stream);
                                    }
                                    if (SasLanguage.EQUALS == c || SasLanguage.DOT == c || SasLanguage.COLON == c || (this.isDatasetOptionMultiValue() && SasLanguage.MINUS == c)) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else if (this.bracketCount > 0) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else {
                                        return this.createTokenisationResult(tokenType, this.parent, stream);
                                    }
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 * Overridden to ensure we go back to the options state.
                                 */
                                OptionValueState.prototype.tokeniseFormat = function (tokenType, identifier, stream) {
                                    if (this.bracketCount > 0) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    else {
                                        return this.createTokenisationResult(tokenType, this.parent, stream);
                                    }
                                };
                                /**
                                 * Overridden count brackets. <br/>
                                 *
                                 * When we've previously found a dataset identifier (and this value is a dataset) and now encounter
                                 * an open bracket, then this is the start of dataset options, so rewind and change state. However
                                 * the parent of {@link DataOptionsState} is set to a clone of this except with
                                 * {@link #internalState} set to null, so that after the dataset options, it returns to this class
                                 * but with no {@link #internalState}.<br/>
                                 *
                                 * With the resulting bracket count, it can go negative as we start off with a {@link #bracketCount}
                                 * of 0, then encounter a close bracket e.g. dataset keep/drop column options:
                                 * <code>DATA sponge (KEEP=a b c);</code>, so if this is the case then rewind and let the parent
                                 * handle the bracket.<br/>
                                 *
                                 * If the resulting bracket count is zero, then it's the end of the value, so just return to the
                                 * parent.<br/>
                                 *
                                 * Otherwise the {@link #bracketCount} is changed by calling
                                 * {@link #createOptionValueStateNextBracketCount(int)}.<br/>
                                 */
                                OptionValueState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                    if (this.isDatasetOptionLabel() && c != SasLanguage.BRACKET_CLOSE) {
                                        return this.createTokenisationResult(tokenType, null, stream);
                                    }
                                    var nextBracketCount = this.bracketCount;
                                    if (SasLanguage.isBracketOpen(c)) {
                                        if (this.internalState == OptionValueState.InternalState.foundIdentifier) {
                                            stream.rewind();
                                            var nextParent = this.createOptionValueStateInternalState(null);
                                            var dataOptionsState = new state.DataOptionsState(this.statementParentState, nextParent, this.nextState, null, 0);
                                            return new TokenisationResult(tokenType, dataOptionsState);
                                        }
                                        nextBracketCount++;
                                    }
                                    else if (SasLanguage.isBracketClose(c)) {
                                        nextBracketCount--;
                                    }
                                    if (nextBracketCount != this.bracketCount) {
                                        if (nextBracketCount < 0) {
                                            stream.rewind();
                                            return new TokenisationResult(null, this.parent);
                                        }
                                        else if (nextBracketCount == 0) {
                                            return new TokenisationResult(tokenType, this.parent);
                                        }
                                        return new TokenisationResult(tokenType, this.createOptionValueStateNextBracketCount(nextBracketCount));
                                    }
                                    return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                };
                                OptionValueState.prototype.createTokenisationResult = function (tokenType, nextState, stream) {
                                    if (this.optionLanguageInfo != null && this.optionLanguageInfo.getOptionType() == AbstractSasLanguageSupport_Lua.OptionType.STRING && tokenType != null && tokenType != TokenType.string_literal && tokenType != TokenType.string_literal_fragment) {
                                        if (!stream.eos()) {
                                            var c = stream.peek();
                                            if (c != SasLanguage.SPACE && c != SasLanguage.TAB && c != SasLanguage.NEWLINE && c != SasLanguage.CARRIAGE_RETURN && c != SasLanguage.SEMI_COLON) {
                                                nextState = null;
                                            }
                                        }
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState, stream);
                                };
                                OptionValueState.prototype.getOptionLanguageInfo = function () {
                                    return this.optionLanguageInfo;
                                };
                                OptionValueState.prototype.getOption = function () {
                                    return this.optionLanguageInfo.getName();
                                };
                                /**
                                 * Check if the type of this option value is a dataset. Check the {@link OptionType} of the
                                 * {@link #optionLanguageInfo}. Also allow any option called DATA as some option types are set to
                                 * {@link OptionType#GENERIC} for some reason.
                                 *
                                 * @return
                                 */
                                OptionValueState.prototype.isDatasetOptionValue = function () {
                                    if (this.optionLanguageInfo != null && this.optionLanguageInfo.getOptionType() != null) {
                                        switch ((this.optionLanguageInfo.getOptionType())) {
                                            case com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.OptionType.DATASET:
                                            case com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.OptionType.INPUT_DATASET:
                                            case com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.OptionType.OUTPUT_DATASET:
                                            case com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.OptionType.LOOKUP_DATASET:
                                                return true;
                                            default:
                                                break;
                                        }
                                    }
                                    if (this.optionLanguageInfo != null && ((SasLanguage.DATA === this.optionLanguageInfo.getName()) || (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.ProcOptionsState) && (this.parent.getCurrentStatement().getName() === SasLanguage.DOWNLOAD) && (SasLanguage.OUT === this.optionLanguageInfo.getName()))) {
                                        return true;
                                    }
                                    return false;
                                };
                                /**
                                 * Check if it's OPTIONS SET=X ...
                                 *
                                 * @return
                                 */
                                OptionValueState.prototype.isSystemOptionsSetValue = function () {
                                    if (this.optionLanguageInfo != null && (SasLanguage.SET === this.optionLanguageInfo.getName()) && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.OptionsStatementState)) {
                                        return true;
                                    }
                                    return false;
                                };
                                /**
                                 * Check if it's OPTIONS APPEND/INSERT
                                 *
                                 * @return
                                 */
                                OptionValueState.prototype.isSystemOptionsAppendInsertValue = function () {
                                    if (this.optionLanguageInfo != null && ((SasLanguage.APPEND === this.optionLanguageInfo.getName()) || (SasLanguage.INSERT === this.optionLanguageInfo.getName())) && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.OptionsStatementState)) {
                                        return true;
                                    }
                                    return false;
                                };
                                /**
                                 * Check if the option type is {@link OptionType#NUMERIC_LIST}
                                 *
                                 * @return
                                 */
                                OptionValueState.prototype.isNumericListOptionValue = function () {
                                    if (this.optionLanguageInfo != null && this.optionLanguageInfo.getOptionType() != null) {
                                        switch ((this.optionLanguageInfo.getOptionType())) {
                                            case com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.OptionType.NUMERIC_LIST:
                                                return true;
                                            default:
                                                break;
                                        }
                                    }
                                    return false;
                                };
                                /**
                                 * Check if this is the value of a dataset option that can have multiple values e.g. KEEP DROP RENAME
                                 * SORTEDBY.
                                 *
                                 * @return true if {@link #parent} is an instance of {@link DataOptionsState} and the name is
                                 * KEEP/DROP/RENAME
                                 */
                                OptionValueState.prototype.isDatasetOptionMultiValue = function () {
                                    if ((this.parent instanceof com.wpc.wps.language.context.tokenisation.state.DataOptionsState) && this.optionLanguageInfo != null) {
                                        switch ((this.optionLanguageInfo.getName())) {
                                            case SasLanguage.DROP:
                                            case SasLanguage.KEEP:
                                            case SasLanguage.RENAME:
                                            case SasLanguage.SORTEDBY:
                                                return true;
                                        }
                                    }
                                    return false;
                                };
                                /**
                                 * Check if this is the value of a dataset option LABEL
                                 *
                                 * @return true if {@link #parent} is an instance of {@link DataOptionsState} and the name is
                                 * LABEL
                                 */
                                OptionValueState.prototype.isDatasetOptionLabel = function () {
                                    return (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.DataOptionsState) && this.optionLanguageInfo != null && (SasLanguage.LABEL === this.optionLanguageInfo.getName());
                                };
                                /**
                                 * @return true if it's a system option: BOTTOMMARGIN LEFTMARGIN RIGHTMARGIN TOPMARGIN
                                 */
                                OptionValueState.prototype.isSystemOptionMargin = function () {
                                    if ((this.parent instanceof com.wpc.wps.language.context.tokenisation.state.OptionsStatementState) && this.optionLanguageInfo != null && this.optionLanguageInfo.getName() != null) {
                                        switch ((this.optionLanguageInfo.getName())) {
                                            case SasLanguage.BOTTOMMARGIN:
                                            case SasLanguage.LEFTMARGIN:
                                            case SasLanguage.RIGHTMARGIN:
                                            case SasLanguage.TOPMARGIN:
                                                return true;
                                        }
                                    }
                                    return false;
                                };
                                /**
                                 * @return true if this is the value of PROC SORT SORTSIZE=...
                                 */
                                OptionValueState.prototype.isProcSortSortsize = function () {
                                    return this.optionLanguageInfo != null && (SasLanguage.SORTSIZE === this.optionLanguageInfo.getName()) && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.ProcOptionsState) && (SasLanguage.SORT === this.parent.getStepInfo().getLanguageInfo().getName());
                                };
                                OptionValueState.prototype.getName = function () {
                                    return "OptionValueState";
                                };
                                OptionValueState.prototype.equals = function (obj) {
                                    if (this == obj) {
                                        return true;
                                    }
                                    if (!_super.prototype.equals.call(this, obj)) {
                                        return false;
                                    }
                                    if (!(obj instanceof com.wpc.wps.language.context.tokenisation.state.OptionValueState)) {
                                        return false;
                                    }
                                    var other = obj;
                                    if (!(other.getName() === this.getName())) {
                                        return false;
                                    }
                                    if (this.optionLanguageInfo == null) {
                                        if (other.optionLanguageInfo != null) {
                                            return false;
                                        }
                                    }
                                    else if (!this.optionLanguageInfo.equals(other.optionLanguageInfo)) {
                                        return false;
                                    }
                                    return true;
                                };
                                OptionValueState.prototype.getFieldsString = function () {
                                    return "bracketCount=" + this.bracketCount + ", optionLanguageInfo: " + this.optionLanguageInfo + ", internalState: " + this.internalState + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return OptionValueState;
                            }(state.TransitionState));
                            state.OptionValueState = OptionValueState;
                            (function (OptionValueState) {
                                var InternalState;
                                (function (InternalState) {
                                    InternalState[InternalState["foundIdentifier"] = 0] = "foundIdentifier";
                                    InternalState[InternalState["optionsSetIdentifier"] = 1] = "optionsSetIdentifier";
                                })(InternalState = OptionValueState.InternalState || (OptionValueState.InternalState = {}));
                            })(OptionValueState = state.OptionValueState || (state.OptionValueState = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for when we're inside a PROC.
                             */
                            var ProcStepState = /** @class */ (function (_super) {
                                __extends(ProcStepState, _super);
                                function ProcStepState(parent, currentStep, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, currentStep, arrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new ProcStepState(parent, currentStep, definedArrayNames, definedComponents);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcStepState.prototype.copyStatementParentStateSetAfterMacro = function (newAfterMacro) {
                                    return new ProcStepState(this.getParent(), this.getCurrentStep(), this.definedArrayNames, this.definedComponents, newAfterMacro);
                                };
                                /**
                                 * Handle by checking for statements from the PROC's {@link LanguageInfo}, then by expressions such
                                 * as 'IF ...', then by global statements, otherwise it is an unknown statement.
                                 */
                                ProcStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var result = null;
                                    var languageInfo;
                                    if (this.getCurrentStep().allowsAssignment() && ((identifier === SasLanguage.IF) || (identifier === SasLanguage.DO) || (identifier === SasLanguage.RETURN))) {
                                        languageInfo = null;
                                    }
                                    else {
                                        languageInfo = this.getCurrentStep().getLanguageInfo().getStatement(identifier);
                                    }
                                    if (languageInfo != null) {
                                        if (ProcStepState.isStatementParentProcDatasets(this) && (languageInfo.getName() === SasLanguage.COPY)) {
                                            result = this.createTokenisationResult(TokenType.keyword, new state.ProcDatasetsCopyStatementState(this, languageInfo), stream);
                                        }
                                        else {
                                            result = this.createTokenisationResult(TokenType.keyword, new state.StatementState(this, this, this, languageInfo), stream);
                                        }
                                    }
                                    else {
                                        var tokenType = TokenType.keyword;
                                        var nextState = this.stateTransitionHelper.tokeniseExpressions(identifier, this, this);
                                        if (nextState == null) {
                                            tokenType = TokenType.major_keyword;
                                            nextState = this.stateTransitionHelper.tokeniseMajorIdentifier(identifier, this.getParent(), this);
                                        }
                                        if (nextState == null) {
                                            tokenType = TokenType.keyword;
                                            nextState = this.stateTransitionHelper.tokeniseGlobalStatement(identifier, this, this);
                                        }
                                        if (nextState == null) {
                                            tokenType = TokenType.identifier;
                                            nextState = this.stateTransitionHelper.tokeniseLabel(identifier, this, stream);
                                        }
                                        if (nextState == null && this.afterMacro) {
                                            result = this.stateTransitionHelper.tokeniseIdentifierAfterMacro(identifier, this, this.getParent(), this, stream);
                                            if (result != null) {
                                                return result;
                                            }
                                        }
                                        if (nextState == null) {
                                            tokenType = TokenType.identifier;
                                            nextState = new state.UnknownStatementState(this, this);
                                        }
                                        result = this.createTokenisationResult(tokenType, nextState, stream);
                                    }
                                    return result;
                                };
                                ProcStepState.prototype.getName = function () {
                                    return "ProcStepState";
                                };
                                /**
                                 * Check if the statementParentState is PROC Datasets.
                                 *
                                 * @param sps StatementParentState
                                 *
                                 * @return true if {@link #getStatementParentState()} returns ProcStepState and the
                                 * {@link LanguageInfo} corresponds to PROC SQL.
                                 */
                                ProcStepState.isStatementParentProcDatasets = function (sps) {
                                    return ProcStepState.isStatementParentProc(sps, SasLanguage.DATASETS);
                                };
                                ProcStepState.isStatementParentProc = function (sps, procName) {
                                    var currentStep;
                                    return (sps instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) && (currentStep = sps.getCurrentStep()) != null && (currentStep.getLanguageInfo().getName() === procName);
                                };
                                return ProcStepState;
                            }(state.AbstractStepState));
                            state.ProcStepState = ProcStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * StepState overridden for special handling of 'submit'
                             *
                             * @author ml
                             */
                            var ProcRStepState = /** @class */ (function (_super) {
                                __extends(ProcRStepState, _super);
                                function ProcRStepState(parent, currentStep, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, currentStep, arrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcRStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new ProcRStepState(parent, currentStep, definedArrayNames, definedComponents, this.afterMacro);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcRStepState.prototype.copyStatementParentStateSetAfterMacro = function (newAfterMacro) {
                                    return new ProcRStepState(this.getParent(), this.getCurrentStep(), this.definedArrayNames, this.definedComponents, newAfterMacro);
                                };
                                ProcRStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    if ((identifier === SasLanguage.SUBMIT)) {
                                        var nextState = new state.TransitionState(this.getParent(), this, new state.RBodyState(this));
                                        return this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                ProcRStepState.prototype.getName = function () {
                                    return "ProcRStepState";
                                };
                                return ProcRStepState;
                            }(state.ProcStepState));
                            state.ProcRStepState = ProcRStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * StepState overridden for special handling of 'submit'
                             *
                             * @author ml
                             */
                            var ProcImlStepState = /** @class */ (function (_super) {
                                __extends(ProcImlStepState, _super);
                                function ProcImlStepState(parent, currentStep, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, currentStep, arrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcImlStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new ProcImlStepState(parent, currentStep, definedArrayNames, definedComponents, this.afterMacro);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcImlStepState.prototype.copyStatementParentStateSetAfterMacro = function (newAfterMacro) {
                                    return new ProcImlStepState(this.getParent(), this.getCurrentStep(), this.definedArrayNames, this.definedComponents, newAfterMacro);
                                };
                                ProcImlStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    if ((SasLanguage.SUBMIT === identifier)) {
                                        return this.createTokenisationResult(TokenType.keyword, new state.ProcImlSubmitOptionsState(this), stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                ProcImlStepState.prototype.getName = function () {
                                    return "ProcImlStepState";
                                };
                                return ProcImlStepState;
                            }(state.ProcStepState));
                            state.ProcImlStepState = ProcImlStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var EmptyLanguageInfo = com.wpc.wps.language.context.information.EmptyLanguageInfo;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for PROC IML SUBMIT options: needs to detect whether switching to SAS or R
                             *
                             * @author ml
                             */
                            var ProcImlSubmitOptionsState = /** @class */ (function (_super) {
                                __extends(ProcImlSubmitOptionsState, _super);
                                function ProcImlSubmitOptionsState(parent) {
                                    var _this = _super.call(this, parent, parent, new state.ProcImlSubmitState(parent)) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    var procImlInfo = _this.getSasLanguageSupporter().getProcStep(SasLanguage.IML);
                                    _this.languageInfo = procImlInfo != null ? procImlInfo.getLanguageInfo().getStatement(SasLanguage.SUBMIT) : EmptyLanguageInfo.INSTANCE;
                                    return _this;
                                }
                                ProcImlSubmitOptionsState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ProcImlSubmitOptionsState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    var start = stream.getOffset();
                                    if (stream.next() == '/') {
                                        stream.skipSpace();
                                        if ((SasLanguage.R === this.matchIdentifier(stream))) {
                                            return this.createTokenisationResult(TokenType.keyword, new state.TransitionState(this.getParent(), this, new state.RBodyState(this.getParent())), stream);
                                        }
                                    }
                                    stream.setOffset(start);
                                    return _super.prototype.tokenise.call(this, stream);
                                };
                                ProcImlSubmitOptionsState.prototype.getCurrentStatement = function () {
                                    return this.languageInfo;
                                };
                                ProcImlSubmitOptionsState.prototype.getName = function () {
                                    return "ProcImlSubmitOptionsState";
                                };
                                return ProcImlSubmitOptionsState;
                            }(state.BaseStatementState));
                            state.ProcImlSubmitOptionsState = ProcImlSubmitOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for dealing with a normal statement that supports formatting (with or without the FORMAT
                             * keyword). This can be a statement within a PROC, DATA step, or a global statement.
                             */
                            var StatementState = /** @class */ (function (_super) {
                                __extends(StatementState, _super);
                                function StatementState(statementParentState, parent, nextState, currentStatement) {
                                    var _this = _super.call(this, statementParentState, parent, nextState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.currentStatement = currentStatement;
                                    return _this;
                                }
                                StatementState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var result = null;
                                    if (this.currentStatement != null) {
                                        var languageInfo;
                                        var nextState = null;
                                        if ((languageInfo = this.currentStatement.getStatement(identifier)) != null) {
                                            nextState = this.createStateForStatement(languageInfo, stream);
                                            result = this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                        }
                                        else if ((languageInfo = this.currentStatement.getKeyword(identifier)) != null) {
                                            nextState = this.createStateForKeyword(languageInfo, stream);
                                            result = this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                        }
                                        else if ((languageInfo = this.currentStatement.getOption(identifier)) != null) {
                                            nextState = this.createStateForOption(languageInfo, stream);
                                            result = this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                        }
                                    }
                                    if (result == null && !this.isProcUnivariate() && this.containsOpenBracket(stream)) {
                                        var functionInfo = this.getGlobalFunction(identifier);
                                        if (functionInfo != null) {
                                            if (this.isProcSqlStatement() && SasLanguage.isSqlAggregationFunction(identifier)) {
                                                result = this.createTokenisationResult(TokenType.keyword, null, stream);
                                            }
                                            else {
                                                var functionState = new state.FunctionState(this.statementParentState, this.getParent(), this, functionInfo, state.FunctionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER);
                                                result = this.createTokenisationResult(TokenType._function, functionState, stream);
                                            }
                                        }
                                    }
                                    if (result == null) {
                                        result = _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                    }
                                    return result;
                                };
                                StatementState.prototype.isProcUnivariate = function () {
                                    var stepInfo;
                                    return (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) && (stepInfo = this.statementParentState.getCurrentStep()) != null && (SasLanguage.UNIVARIATE === stepInfo.getLanguageInfo().getName());
                                };
                                /**
                                 * Fetch the {@link LanguageInfo} for a function.Uses {@link FunctionHelper}.
                                 *
                                 * @param functionName name of function
                                 * @return
                                 */
                                StatementState.prototype.getGlobalFunction = function (functionName) {
                                    return this.functionHelper.getFunctionLanguageInfo(this, functionName);
                                };
                                /**
                                 * @return true if we're in a PROC SQL
                                 */
                                StatementState.prototype.isProcSqlStatement = function () {
                                    return (this.statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.ProcSqlStepState);
                                };
                                /**
                                 * If our identifier is a statement belonging to our {@link #currentStatement} then this method is
                                 * invoked to return next state for our {@link TokenisationResult}.
                                 *
                                 * @param statementLangInfo - The language info associated to our identifier.
                                 * @param stream - The stream. Not used by
                                 * {@link StatementState#createStateForKeyword(LanguageInfo, ITokenisationStream)
                                 * @return A tokenisation result. A {@link StatementState} by default.
                                 */
                                StatementState.prototype.createStateForStatement = function (statementLangInfo, stream) {
                                    return this.createStatementState(statementLangInfo);
                                };
                                /**
                                 * If our identifier is a keyword belonging to our {@link #currentStatement} then this method is
                                 * invoked to return next state for our {@link TokenisationResult}.
                                 *
                                 * @param keywordLangInfo - The language info associated to our identifier.
                                 * @param stream - The stream. Not used by
                                 * {@link StatementState#createStateForKeyword(LanguageInfo, ITokenisationStream)}
                                 * @return A tokenisation result. A {@link StatementState} by default.
                                 */
                                StatementState.prototype.createStateForKeyword = function (keywordLangInfo, stream) {
                                    if (stream.eos() || stream.isNextCharacter(SasLanguage.EQUALS, SasLanguage.SPACE) >= 0) {
                                        return new state.IdentifierState(this.statementParentState, this, this, keywordLangInfo.getName());
                                    }
                                    return this.createStatementState(keywordLangInfo);
                                };
                                /**
                                 * get {@link OptionValueState} instance where an option for the statement is encountered, except for
                                 * PROC SQL: this doesn't make sense for SQL statements and results in odd state changes.
                                 *
                                 * @param optionLanguageInfo
                                 * @param stream
                                 * @return
                                 */
                                StatementState.prototype.createStateForOption = function (optionLanguageInfo, stream) {
                                    if (this.isProcSqlStatement()) {
                                        return null;
                                    }
                                    return new state.OptionValueState(this.statementParentState, this, this.statementParentState, optionLanguageInfo);
                                };
                                /**
                                 * Method for creating a {@link StatementState}. Uses {@link #nextState}.
                                 *
                                 * @param tokenType - The TokenType
                                 * @param parent - Parent required for the {@link StatementState}.
                                 * @param statementLangInfo - Current statement, required by the {@link StatementState}
                                 * @return TokenisationResult
                                 */
                                StatementState.prototype.createStatementState = function (statementLangInfo) {
                                    var statementState = null;
                                    if (this.isProcSqlStatement()) {
                                        statementState = this.stateTransitionHelper.getSqlStatementStateFromStatementState(this.getStatementParentState(), this, this.currentStatement, statementLangInfo);
                                    }
                                    if (statementState == null) {
                                        statementState = new StatementState(this.statementParentState, this, this.nextState, statementLangInfo);
                                    }
                                    return statementState;
                                };
                                StatementState.prototype.getCurrentStatement = function () {
                                    return this.currentStatement;
                                };
                                StatementState.prototype.getName = function () {
                                    return "StatementState";
                                };
                                return StatementState;
                            }(state.BaseStatementState));
                            state.StatementState = StatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var EmptyLanguageInfo = com.wpc.wps.language.context.information.EmptyLanguageInfo;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for handling global OPTIONS statement.
                             *
                             * @author ml
                             */
                            var OptionsStatementState = /** @class */ (function (_super) {
                                __extends(OptionsStatementState, _super);
                                function OptionsStatementState(statementParentState, parent, currentStatement, option) {
                                    if (option === void 0) { option = null; }
                                    var _this = _super.call(this, statementParentState, parent, null, option) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.currentStatement = currentStatement;
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden so that the state changes to a copy of the current one, except
                                 * with the option string stored with it.
                                 */
                                OptionsStatementState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var result = null;
                                    if (identifier != null) {
                                        var optionLanguageInfo = this.getSasLanguageSupporter().getSystemOption(identifier);
                                        var tokenType = optionLanguageInfo != null || (SasLanguage.APPEND === identifier) || (SasLanguage.INSERT === identifier) ? TokenType.keyword : TokenType.identifier;
                                        return this.createTokenisationResult(tokenType, new OptionsStatementState(this.statementParentState, this.parent, this.currentStatement, identifier), stream);
                                    }
                                    return result;
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden to change to {@link OptionValueState} after the '='. The parent of that instance is a
                                 * clone of this class but with no option set, so that when returning to this class it's correct.
                                 * <br/>
                                 *
                                 * @param tokenType - The token type
                                 * @param stream - The stream
                                 * @return - A {@link TokenisationResult} that has a next state of type {@link OptionValueState}.
                                 */
                                OptionsStatementState.prototype.tokeniseOperator_Handle_EQUALS = function (tokenType, stream) {
                                    var nextParent = new OptionsStatementState(this.statementParentState, this.parent, this.currentStatement, null);
                                    if ((SasLanguage.APPEND === this.option) || (SasLanguage.INSERT === this.option)) {
                                        return this.createTokenisationResult(tokenType, nextParent, stream);
                                    }
                                    var optionLanguageInfo = this.option != null ? this.getSasLanguageSupporter().getSystemOption(this.option) : null;
                                    if (optionLanguageInfo == null) {
                                        optionLanguageInfo = EmptyLanguageInfo.INSTANCE;
                                    }
                                    var optionValueState = new state.OptionValueState(this.statementParentState, nextParent, this.nextState, optionLanguageInfo);
                                    return this.createTokenisationResult(tokenType, optionValueState, stream);
                                };
                                OptionsStatementState.prototype.getCurrentStatement = function () {
                                    return this.currentStatement;
                                };
                                OptionsStatementState.prototype.getName = function () {
                                    return "OptionsStatementState";
                                };
                                OptionsStatementState.prototype.getFieldsString = function () {
                                    return "currentStatement=" + this.currentStatement + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return OptionsStatementState;
                            }(state.AbstractOptionsState));
                            state.OptionsStatementState = OptionsStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * {@link StatementState} for libname blocks. Libname has the following form: <br/>
                             *
                             * <b>LIBNAME &lt;name&gt; &lt;engine&gt; "&lt;location&gt;" &lt;options&gt;; </b><br/>
                             *
                             * @author Nick Robson [nr]
                             */
                            var LibnameState = /** @class */ (function (_super) {
                                __extends(LibnameState, _super);
                                function LibnameState(statementParentState, parent, nextState, libnameInfo, internalState) {
                                    if (internalState === void 0) { internalState = LibnameState.LibnameInternalState.NAME; }
                                    var _this = _super.call(this, statementParentState, parent, nextState, libnameInfo) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                    if (libnameInfo == null) {
                                        throw new Error("IllegalArgumentException: Parameter \'libnameInfo\' must not be null");
                                    }
                                    if (internalState == null) {
                                        throw new Error("IllegalArgumentException: Parameter \'internalState\' must not be null");
                                    }
                                    _this.internalState = internalState;
                                    return _this;
                                }
                                LibnameState.prototype.matchIdentifier = function (stream) {
                                    var result = null;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.LibnameState.LibnameInternalState.NAME:
                                            result = this.matchIdentifier_Handle_Name(stream);
                                            break;
                                        default:
                                            result = _super.prototype.matchIdentifier.call(this, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * Overridden to match identifier against the defined library engines.
                                 */
                                LibnameState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var result = null;
                                    if (this.internalState == LibnameState.LibnameInternalState.NAME) {
                                        result = this.tokeniseIdentifier_Handle_Name(identifier, stream);
                                    }
                                    else {
                                        var hasTokenisedEngine;
                                        if (this.internalState == LibnameState.LibnameInternalState.ENGINE) {
                                            result = this.tokeniseIdentifier_Handle_Engine(identifier, stream);
                                            hasTokenisedEngine = result != null && !(result.getNextState() instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState);
                                        }
                                        else {
                                            hasTokenisedEngine = true;
                                        }
                                        if (this.internalState == LibnameState.LibnameInternalState.LOCATION || !hasTokenisedEngine) {
                                            result = this.tokeniseIdentifier_Handle_Location(identifier, stream);
                                        }
                                        if (this.internalState == LibnameState.LibnameInternalState.OPTIONS || result == null || (result.getNextState() instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState)) {
                                            result = this.tokeniseIdentifier_Handle_Options(identifier, stream, hasTokenisedEngine);
                                        }
                                    }
                                    if (result == null) {
                                        var nextState = new state.UnknownStatementState(this.statementParentState, this);
                                        result = this.createTokenisationResult(TokenType.unknown, nextState, stream);
                                    }
                                    return result;
                                };
                                /**
                                 * For {@link LibnameInternalState#NAME} we match up to the next whitespace character or semi colon,
                                 * single or double quote, ignoring any other characters.
                                 *
                                 * @param stream - The stream.
                                 * @return - The identifier.
                                 */
                                LibnameState.prototype.matchIdentifier_Handle_Name = function (stream) {
                                    var startOffset = stream.getOffset();
                                    stream.skipUntil(false, SasLanguage.SPACE_, SasLanguage.TAB_, SasLanguage.DOUBLE_QUOTE_, SasLanguage.SINGLE_QUOTE_, SasLanguage.SEMI_COLON_);
                                    return stream.peekBack(startOffset);
                                };
                                /**
                                 * Name is not highlighted, we separate the identifier at the next whitespace character.
                                 *
                                 * @param identifier
                                 * @param stream
                                 * @return
                                 */
                                LibnameState.prototype.tokeniseIdentifier_Handle_Name = function (identifier, stream) {
                                    return this.createTokenisationResult(TokenType.identifier, new LibnameState(this.statementParentState, this, this.nextState, this.getCurrentStatement(), LibnameState.LibnameInternalState.ENGINE), stream);
                                };
                                LibnameState.prototype.tokeniseIdentifier_Handle_Engine = function (identifier, stream) {
                                    var libraryEngine = this.getSasLanguageSupporter().getLibraryEngine(identifier);
                                    var nextStateForResult = null;
                                    var tokenType = TokenType.identifier;
                                    if (libraryEngine != null) {
                                        tokenType = TokenType.keyword;
                                        nextStateForResult = new LibnameState(this.statementParentState, this, this.nextState, libraryEngine, LibnameState.LibnameInternalState.LOCATION);
                                    }
                                    else if ((SasLanguage.CLEAR === identifier) || (SasLanguage.LIST === identifier)) {
                                        tokenType = TokenType.keyword;
                                        nextStateForResult = new state.TransitionState(this.statementParentState, this, this.nextState);
                                    }
                                    else {
                                        nextStateForResult = new state.UnknownStatementState(this.statementParentState, this);
                                    }
                                    return this.createTokenisationResult(tokenType, nextStateForResult, stream);
                                };
                                LibnameState.prototype.tokeniseIdentifier_Handle_Location = function (identifier, stream) {
                                    var result = null;
                                    if (identifier != null && identifier.length > 1 && SasLanguage.isStringLiteralBoundaryChar(identifier.charAt(0)) && SasLanguage.isStringLiteralBoundaryChar(identifier.charAt(identifier.length - 1))) {
                                        var nextStateForResult = new LibnameState(this.statementParentState, this, this.nextState, this.getCurrentStatement(), LibnameState.LibnameInternalState.OPTIONS);
                                        result = this.createTokenisationResult(null, nextStateForResult, stream);
                                    }
                                    else {
                                        result = this.createTokenisationResult(null, new state.UnknownStatementState(this.statementParentState, this), stream);
                                    }
                                    return result;
                                };
                                LibnameState.prototype.tokeniseIdentifier_Handle_Options = function (identifier, stream, hasTokenisedEngine) {
                                    var result = null;
                                    if (!hasTokenisedEngine) {
                                        if (this.isEngineOption(identifier)) {
                                            return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                        }
                                    }
                                    else {
                                        var libnameOption = this.getCurrentStatement().getOption(identifier);
                                        if (libnameOption != null) {
                                            var optionState = new state.LibnameOptionsState(this, libnameOption);
                                            return this.createTokenisationResult(TokenType.keyword, optionState, stream);
                                        }
                                    }
                                    return this.createTokenisationResult(TokenType.identifier, new state.UnknownLibnameOptionState(this.statementParentState, this, identifier), stream);
                                };
                                /**
                                 * Checks whether the identifier is a valid engine option for a LIBNAME statement or not.
                                 *
                                 * @param identifier The identifier to check.
                                 * @return True if the identifier is a valid option name, false otherwise.
                                 */
                                LibnameState.prototype.isEngineOption = function (identifier) {
                                    var enginesInfo = this.sasLanguageSupporter.getLibraryEngines();
                                    for (var i = 0; i < enginesInfo.size(); i++) {
                                        var engineInfo = enginesInfo.get(i);
                                        var engineOptionsIterator = engineInfo.getOptions().iterator();
                                        while ((engineOptionsIterator.hasNext())) {
                                            var engineOption = engineOptionsIterator.next();
                                            if ((engineOption.getName() === identifier)) {
                                                return true;
                                            }
                                        }
                                        ;
                                    }
                                    return false;
                                };
                                /**
                                 * Overridden so we can provide a different nextState that allows us to progress our
                                 * {@link LibnameInternalState}.
                                 */
                                LibnameState.prototype.getStateAfterString = function () {
                                    return new LibnameState(this.statementParentState, this, this.nextState, this.getCurrentStatement(), LibnameState.LibnameInternalState.OPTIONS);
                                };
                                /**
                                 * Overrriden to change the internal state after the macro invocation.
                                 */
                                LibnameState.prototype.getNextStateAfterMacroState = function () {
                                    return new LibnameState(this.statementParentState, this, this.nextState, this.getCurrentStatement(), this.getNextInternalState());
                                };
                                /**
                                 * @return the next internal state after the current one.
                                 */
                                LibnameState.prototype.getNextInternalState = function () {
                                    var nextInternalState = LibnameState.LibnameInternalState.OPTIONS;
                                    switch ((this.internalState)) {
                                        case com.wpc.wps.language.context.tokenisation.state.LibnameState.LibnameInternalState.ENGINE:
                                            nextInternalState = LibnameState.LibnameInternalState.LOCATION;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.LibnameState.LibnameInternalState.LOCATION:
                                            nextInternalState = LibnameState.LibnameInternalState.OPTIONS;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.LibnameState.LibnameInternalState.NAME:
                                            nextInternalState = LibnameState.LibnameInternalState.ENGINE;
                                            break;
                                        default:
                                    }
                                    return nextInternalState;
                                };
                                /**
                                 * Overrriden to change the internal state after the macro variable.
                                 */
                                LibnameState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                    var nextLibnameState = new LibnameState(this.statementParentState, this, this.nextState, this.getCurrentStatement(), this.getNextInternalState());
                                    return this.createTokenisationResult(tokenType, nextLibnameState, stream);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                LibnameState.prototype.getInternalState = function () {
                                    return this.internalState;
                                };
                                LibnameState.prototype.getName = function () {
                                    return "LibnameState";
                                };
                                LibnameState.prototype.getFieldsString = function () {
                                    return "internalState=" + this.internalState + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return LibnameState;
                            }(state.StatementState));
                            state.LibnameState = LibnameState;
                            (function (LibnameState) {
                                /**
                                 * The order presented here refers to the form of the libname statement, such that we look for the
                                 * relevant part in turn running from top (first) to bottom (last). Hence, the order of values() is
                                 * important.
                                 */
                                var LibnameInternalState;
                                (function (LibnameInternalState) {
                                    LibnameInternalState[LibnameInternalState["NAME"] = 0] = "NAME";
                                    LibnameInternalState[LibnameInternalState["ENGINE"] = 1] = "ENGINE";
                                    LibnameInternalState[LibnameInternalState["LOCATION"] = 2] = "LOCATION";
                                    LibnameInternalState[LibnameInternalState["OPTIONS"] = 3] = "OPTIONS";
                                })(LibnameInternalState = LibnameState.LibnameInternalState || (LibnameState.LibnameInternalState = {}));
                            })(LibnameState = state.LibnameState || (state.LibnameState = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * For LIBNAME statement options.
                             *
                             * @author Nick Robson [nr]
                             */
                            var LibnameOptionsState = /** @class */ (function (_super) {
                                __extends(LibnameOptionsState, _super);
                                function LibnameOptionsState(parent, option) {
                                    var _this = _super.call(this, parent.getStatementParentState(), parent, null, option.getName()) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.optionLanguageInfo = option;
                                    return _this;
                                }
                                /**
                                 * Go back to parent (as this class provides a different next state).
                                 */
                                LibnameOptionsState.prototype.tokeniseSemiColon = function (stream) {
                                    var parent = this.getParent();
                                    return this.createTokenisationResult(TokenType.semicolon, parent.getStatementParentState(), stream);
                                };
                                /**
                                 * We don't do anything with the equals, just move on from it.
                                 */
                                LibnameOptionsState.prototype.tokeniseOperator_Handle_EQUALS = function (tokenType, stream) {
                                    return this.createTokenisationResult(tokenType, new state.LibnameOptionValueState(this), stream);
                                };
                                /**
                                 * Retrieves the {@link LanguageInfo} of the parent Libname statement that this option belongs to.
                                 */
                                LibnameOptionsState.prototype.getCurrentStatement = function () {
                                    var currentStatement = null;
                                    if (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.LibnameState) {
                                        currentStatement = this.parent.getCurrentStatement();
                                    }
                                    else if (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) {
                                        currentStatement = this.parent.getCurrentStep().getLanguageInfo();
                                    }
                                    return currentStatement;
                                };
                                /**
                                 * Retrieves the {@link LanguageInfo} for the option associated with this state.
                                 *
                                 * @return The option language info.
                                 */
                                LibnameOptionsState.prototype.getOptionLanguageInfo = function () {
                                    return this.optionLanguageInfo;
                                };
                                LibnameOptionsState.prototype.getName = function () {
                                    return "LibnameOptionsState";
                                };
                                return LibnameOptionsState;
                            }(state.AbstractOptionsState));
                            state.LibnameOptionsState = LibnameOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            /**
                             * State class for dealing with options belonging to libname library engines.
                             *
                             * @author Nick Robson [nr]
                             */
                            var LibnameOptionValueState = /** @class */ (function (_super) {
                                __extends(LibnameOptionValueState, _super);
                                function LibnameOptionValueState(parent) {
                                    var _this = _super.call(this, parent.statementParentState, parent, parent.getParent()) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                LibnameOptionValueState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Overridden to transition back to {@link LibnameState} on any non-null token and is followed by
                                 * whitespace.
                                 */
                                LibnameOptionValueState.prototype.createTokenisationResult = function (tokenType, nextState2, stream) {
                                    if (nextState2 == null && tokenType != null) {
                                        if (stream.eos() || SasLanguage.isWhitespace(stream.peek()) || SasLanguage.SEMI_COLON == stream.peek()) {
                                            return new TokenisationResult(tokenType, this.nextState);
                                        }
                                    }
                                    return _super.prototype.createTokenisationResult.call(this, tokenType, nextState2, stream);
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 *
                                 * Overridden to return to LibnameOptionsState after a string.
                                 *
                                 * @return {@link LibnameState} .
                                 */
                                LibnameOptionValueState.prototype.getStateAfterString = function () {
                                    return this.nextState;
                                };
                                /**
                                 * {@inheritDoc} </br>
                                 *
                                 * Overridden to return to LibnameOptionsState after a macro.
                                 *
                                 * @return {@link LibnameState} .
                                 */
                                LibnameOptionValueState.prototype.getNextStateAfterMacroState = function () {
                                    return this.nextState;
                                };
                                LibnameOptionValueState.prototype.getName = function () {
                                    return "LibnameOptionValueState";
                                };
                                return LibnameOptionValueState;
                            }(state.TransitionState));
                            state.LibnameOptionValueState = LibnameOptionValueState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * For DATA step options. Differs from {@link ProcOptionsState} in that the {@link SasStepInfo} is fixed
                             * to the DataStep from {@link SasLanguageSupporter}.
                             *
                             * Can also be instantiated from {@link OptionValueState} where the {@link OptionType} is a
                             * {@link OptionType#DATASET} or {@link OptionType#OUTPUT_DATASET} or {@link OptionType#INPUT_DATASET}.
                             *
                             * @author ml
                             */
                            var DataOptionsState = /** @class */ (function (_super) {
                                __extends(DataOptionsState, _super);
                                function DataOptionsState(statementParentState, parent, nextState, option, bracketCount) {
                                    var _this = _super.call(this, statementParentState, parent, nextState, parent.getDataStepInfoSingleton(), option, bracketCount) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                DataOptionsState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                DataOptionsState.prototype.createStepOptionsState = function (newOption, newBracketCount) {
                                    return new DataOptionsState(this.statementParentState, this.getParent(), this.nextState, newOption, newBracketCount);
                                };
                                DataOptionsState.prototype.getName = function () {
                                    return "DataOptionsState";
                                };
                                DataOptionsState.prototype.getFieldsString = function () {
                                    return "bracketCount=" + this.bracketCount + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return DataOptionsState;
                            }(state.AbstractStepStateOptionsState));
                            state.DataOptionsState = DataOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * For PROC options.
                             *
                             * @author ml
                             */
                            var ProcOptionsState = /** @class */ (function (_super) {
                                __extends(ProcOptionsState, _super);
                                function ProcOptionsState(parent, stepState, stepInfo, option, bracketCount) {
                                    if (option === void 0) { option = null; }
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, parent, parent, stepState, stepInfo, option, bracketCount) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                ProcOptionsState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ProcOptionsState.prototype.getNextState = function () {
                                    return _super.prototype.getNextState.call(this);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcOptionsState.prototype.createStepOptionsState = function (newOption, newBracketCount) {
                                    return new ProcOptionsState(this.getParent(), this.nextState, this.stepInfo, newOption, newBracketCount);
                                };
                                /**
                                 * Overridden to fix STYLE(DATA) = {...
                                 */
                                ProcOptionsState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    if ((SasLanguage.STYLE === this.option) && this.bracketCount > 0) {
                                        return this.createTokenisationResult(TokenType.identifier, null, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                ProcOptionsState.prototype.getName = function () {
                                    return "ProcOptionsState";
                                };
                                return ProcOptionsState;
                            }(state.AbstractStepStateOptionsState));
                            state.ProcOptionsState = ProcOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * State for dealing with an unknown statement. This can be
                             * a statement within a PROC, DATA step, or a global statement.
                             * This just skips to semicolon.
                             */
                            var UnknownStatementState = /** @class */ (function (_super) {
                                __extends(UnknownStatementState, _super);
                                function UnknownStatementState(statementParentState, parent) {
                                    var _this = _super.call(this, statementParentState, parent, null) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                UnknownStatementState.prototype.getCurrentStatement = function () {
                                    return null;
                                };
                                UnknownStatementState.prototype.getName = function () {
                                    return "UnknownStatementState";
                                };
                                return UnknownStatementState;
                            }(state.BaseStatementState));
                            state.UnknownStatementState = UnknownStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * Class to handle a label, e.g. 'START:'
                             *
                             * Simply looks for colon before returning to {@link StatementParentState}.
                             *
                             * @author ml
                             */
                            var LabelState = /** @class */ (function (_super) {
                                __extends(LabelState, _super);
                                function LabelState(statementParentState) {
                                    var _this = _super.call(this, statementParentState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.statementParentState = statementParentState;
                                    return _this;
                                }
                                /**
                                 * Overridden to handle ':' to return to {@link StatementParentState}.
                                 */
                                LabelState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    if (c == SasLanguage.COLON) {
                                        return this.createTokenisationResult(tokenType, this.statementParentState, stream);
                                    }
                                    return _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                };
                                LabelState.prototype.getName = function () {
                                    return "LabelState";
                                };
                                LabelState.prototype.getFieldsString = function () {
                                    return "statementParentState/parent/";
                                };
                                return LabelState;
                            }(state.AbstractTokenisationState));
                            state.LabelState = LabelState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var sql;
                            (function (sql) {
                                var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                                var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                                var StatementState = com.wpc.wps.language.context.tokenisation.state.StatementState;
                                var UnknownStatementState = com.wpc.wps.language.context.tokenisation.state.UnknownStatementState;
                                /**
                                 * State for handling <code>PROC SQL; SELECT</code> statement
                                 *
                                 * @author ml
                                 */
                                var SelectStatementState = /** @class */ (function (_super) {
                                    __extends(SelectStatementState, _super);
                                    /**
                                     * Constructor that allows change of {@link #internalState}.
                                     *
                                     * @param statementParentState
                                     * @param parent
                                     * @param nextState
                                     * @param currentStatement
                                     * @param internalState the {@link InternalState}
                                     */
                                    function SelectStatementState(statementParentState, parent, nextState, currentStatement, internalState) {
                                        if (internalState === void 0) { internalState = SelectStatementState.InternalState.SELECT; }
                                        var _this = _super.call(this, statementParentState, parent, nextState, currentStatement) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.sql.SqlStatementState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                        _this.internalState = internalState;
                                        return _this;
                                    }
                                    SelectStatementState.prototype.getStatementParentState = function () {
                                        return _super.prototype.getStatementParentState.call(this);
                                    };
                                    /**
                                     * Factory method.
                                     *
                                     * @param nextInternalState
                                     * @return a copy of this state with different {@link InternalState}
                                     */
                                    SelectStatementState.prototype.createSelectStatementState = function (nextInternalState) {
                                        return new SelectStatementState(this.getStatementParentState(), this.parent, this.nextState, this.getCurrentStatement(), nextInternalState);
                                    };
                                    /**
                                     * Factory method.
                                     *
                                     * @param nextInternalState
                                     * @return a {@link SqlExpressionState} which returns to a copy of this state with different
                                     * {@link InternalState}
                                     */
                                    SelectStatementState.prototype.createSqlExpressionState = function (nextInternalState) {
                                        return new sql.SqlExpressionState(this.getStatementParentState(), this.createSelectStatementState(nextInternalState));
                                    };
                                    /**
                                     * Overridden to transition directly to {@link SqlExpressionState} for the main select expression.
                                     * Also handles the DISTINCT keyword.
                                     */
                                    SelectStatementState.prototype.tokenise = function (stream) {
                                        stream.mark();
                                        if ((this.internalState == SelectStatementState.InternalState.SELECT || this.internalState == SelectStatementState.InternalState.SELECT_DISTINCT) && stream.skipSpace() == 0) {
                                            if (this.internalState == SelectStatementState.InternalState.SELECT) {
                                                var identifier = this.matchIdentifier(stream);
                                                if ((SasLanguage.DISTINCT === identifier)) {
                                                    return this.createTokenisationResult(TokenType.keyword, this.createSelectStatementState(SelectStatementState.InternalState.SELECT_DISTINCT), stream);
                                                }
                                                else if (identifier != null) {
                                                    stream.rewind();
                                                }
                                            }
                                            return this.createTokenisationResult(null, this.createSqlExpressionState(SelectStatementState.InternalState.SELECT_EXPRESSION), stream);
                                        }
                                        stream.rewind();
                                        return _super.prototype.tokenise.call(this, stream);
                                    };
                                    SelectStatementState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                        var result = this.tokeniseIdentifierBY(identifier);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierAfterINTO(identifier);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierKeywordsAfterExpressions(identifier);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierKeywordsForJoinStates(identifier);
                                        var tokenisationResult = this.convertInternalTokenisationResult(result, stream);
                                        if (tokenisationResult == null) {
                                            tokenisationResult = _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                        }
                                        return tokenisationResult;
                                    };
                                    /**
                                     * Handle keywords after expressions: <br/>
                                     * <code> SELECT * FROM x ORDER BY y ASC</code><br/>
                                     * <code> SELECT * FROM x ORDER BY y DESC</code><br/>
                                     * <code> SELECT * FROM</code><br/>
                                     * <code> SELECT * INTO</code><br/>
                                     * <code> SELECT * FROM x GROUP</code><br/>
                                     * <code> SELECT * FROM x ORDER</code><br/>
                                     * <code> SELECT * FROM x WHERE</code><br/>
                                     * <code> SELECT * FROM x HAVING</code><br/>
                                     * <code> SELECT * FROM x JOIN y ON</code><br/>
                                     * <br/>
                                     * Also Detect start of JOIN condition: <br/>
                                     * <code> SELECT * FROM x ...</code><br/>
                                     * ... can be: FULL, INNER, JOIN, LEFT, NATURAL, MATCH, SPRINGFIELD, RIGHT, UNION<br/>
                                     * <br/>
                                     * Also detect start of next SELECT query: <br/>
                                     * <code> SELECT * FROM x UNION SELECT ...</code><br/>
                                     * Error is assumed if no match found
                                     *
                                     * @return
                                     */
                                    SelectStatementState.prototype.tokeniseIdentifierKeywordsAfterExpressions = function (identifier) {
                                        var result = new SelectStatementState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        var internalStateAfterExpression = null;
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FROM_EXPRESSION:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_ON_EXPRESSION:
                                                internalStateAfterExpression = this.getInternalStateForJoinKeyword(identifier);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER_BY_EXPRESSION:
                                                if ((SasLanguage.ASC === identifier) || (SasLanguage.DESC === identifier)) {
                                                    internalStateAfterExpression = SelectStatementState.InternalState.ORDER_BY_EXPRESSION_DIR;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_EXPRESSION:
                                                if ((SasLanguage.ON === identifier)) {
                                                    internalStateAfterExpression = SelectStatementState.InternalState.JOIN_ON;
                                                }
                                                else {
                                                    internalStateAfterExpression = this.getInternalStateForJoinKeyword(identifier);
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NEXT_SELECT:
                                                if ((SasLanguage.SELECT === identifier)) {
                                                    internalStateAfterExpression = SelectStatementState.InternalState.SELECT;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.OUTER:
                                                if ((SasLanguage.UNION === identifier)) {
                                                    internalStateAfterExpression = SelectStatementState.InternalState.OUTER_UNION;
                                                }
                                                break;
                                            default:
                                        }
                                        if (internalStateAfterExpression == null) {
                                            switch ((this.internalState)) {
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FROM_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.GROUP_BY_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.HAVING_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER_BY_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.SELECT_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.WHERE_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY_CHAR:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON_NAME:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_ON_EXPRESSION:
                                                    switch ((identifier)) {
                                                        case SasLanguage.FROM:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.FROM;
                                                            break;
                                                        case SasLanguage.INTO:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.INTO;
                                                            break;
                                                        case SasLanguage.GROUP:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.GROUP;
                                                            break;
                                                        case SasLanguage.ORDER:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.ORDER;
                                                            break;
                                                        case SasLanguage.WHERE:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.WHERE;
                                                            break;
                                                        case SasLanguage.HAVING:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.HAVING;
                                                            break;
                                                        case SasLanguage.EXCEPT:
                                                        case SasLanguage.INTERSECT:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.NEXT_SELECT;
                                                            break;
                                                        case SasLanguage.OUTER:
                                                            internalStateAfterExpression = SelectStatementState.InternalState.OUTER;
                                                            break;
                                                        default:
                                                            result.setErrorOccurred(true);
                                                    }
                                                    break;
                                                default:
                                            }
                                        }
                                        if (internalStateAfterExpression != null) {
                                            result.setNextInternalStateWithType(internalStateAfterExpression, TokenType.keyword);
                                        }
                                        return result;
                                    };
                                    /**
                                     * If the identifier matches a join keyword, return the appropriate {@link InternalState}.
                                     *
                                     * @param identifier
                                     * @return
                                     */
                                    SelectStatementState.prototype.getInternalStateForJoinKeyword = function (identifier) {
                                        var internalStateAfterExpression = null;
                                        switch ((identifier)) {
                                            case SasLanguage.CROSS:
                                                internalStateAfterExpression = SelectStatementState.InternalState.CROSS;
                                                break;
                                            case SasLanguage.FULL:
                                                internalStateAfterExpression = SelectStatementState.InternalState.FULL;
                                                break;
                                            case SasLanguage.INNER:
                                                internalStateAfterExpression = SelectStatementState.InternalState.INNER;
                                                break;
                                            case SasLanguage.JOIN:
                                                internalStateAfterExpression = SelectStatementState.InternalState.JOIN;
                                                break;
                                            case SasLanguage.LEFT:
                                                internalStateAfterExpression = SelectStatementState.InternalState.LEFT;
                                                break;
                                            case SasLanguage.NATURAL:
                                                internalStateAfterExpression = SelectStatementState.InternalState.NATURAL;
                                                break;
                                            case SasLanguage.MATCH:
                                                internalStateAfterExpression = SelectStatementState.InternalState.MATCH;
                                                break;
                                            case SasLanguage.SPRINGFIELD:
                                                internalStateAfterExpression = SelectStatementState.InternalState.SPRINGFIELD;
                                                break;
                                            case SasLanguage.RIGHT:
                                                internalStateAfterExpression = SelectStatementState.InternalState.RIGHT;
                                                break;
                                            case SasLanguage.UNION:
                                                internalStateAfterExpression = SelectStatementState.InternalState.UNION;
                                                break;
                                            default:
                                        }
                                        return internalStateAfterExpression;
                                    };
                                    /**
                                     * Handle keyword BY: <br/>
                                     * <code> SELECT * FROM x GROUP BY</code><br/>
                                     * <code> SELECT * FROM x ORDER BY</code><br/>
                                     * <code> SELECT * INTO :x1 SEPARATED BY</code><br/>
                                     *
                                     * @return
                                     */
                                    SelectStatementState.prototype.tokeniseIdentifierBY = function (identifier) {
                                        var result = new SelectStatementState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        var internalStateAfterBY = null;
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.GROUP:
                                                internalStateAfterBY = SelectStatementState.InternalState.GROUP_BY;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER:
                                                internalStateAfterBY = SelectStatementState.InternalState.ORDER_BY;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED:
                                                internalStateAfterBY = SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY;
                                                break;
                                            default:
                                        }
                                        if (internalStateAfterBY != null) {
                                            if ((SasLanguage.BY === identifier)) {
                                                result.setNextInternalStateWithType(internalStateAfterBY, TokenType.keyword);
                                            }
                                            else {
                                                result.setErrorOccurred(true);
                                            }
                                        }
                                        return result;
                                    };
                                    /**
                                     * Handle situations with identifier with INTO: <br/>
                                     * <code> SELECT * INTO :x</code><br/>
                                     * <code> SELECT * INTO :x1 - x2</code><br/>
                                     * Detect keyword SEPARATED<br/>
                                     * <code> SELECT * INTO :x1 SEPARATED</code><br/>
                                     * Detect keyword NOTRIM<br/>
                                     * <code> SELECT * INTO :x1 NOTRIM</code><br/>
                                     * <code> SELECT * INTO :x1 - x2 NOTRIM</code><br/>
                                     * <code> SELECT * INTO :x1 SEPARATED BY ' ' NOTRIM</code><br/>
                                     *
                                     * @return
                                     */
                                    SelectStatementState.prototype.tokeniseIdentifierAfterINTO = function (identifier) {
                                        var result = new SelectStatementState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON:
                                                result.setNextInternalState(SelectStatementState.InternalState.INTO_COLON_NAME);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON:
                                                result.setNextInternalState(SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON_NAME);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME:
                                                if ((SasLanguage.SEPARATED === identifier)) {
                                                    result.setNextInternalStateWithType(SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED, TokenType.keyword);
                                                }
                                                else if ((SasLanguage.TRIMMED === identifier)) {
                                                    result.setNextInternalStateWithType(SelectStatementState.InternalState.INTO_EXPRESSION, TokenType.keyword);
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON_NAME:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY_CHAR:
                                                if ((SasLanguage.NOTRIM === identifier) || (SasLanguage.TRIMMED === identifier)) {
                                                    result.setNextInternalStateWithType(SelectStatementState.InternalState.INTO_EXPRESSION, TokenType.keyword);
                                                }
                                                break;
                                            default:
                                        }
                                        return result;
                                    };
                                    /**
                                     * Handle situations with JOIN keyword: <br/>
                                     * <code> SELECT * FROM x FULL ...</code><br/>
                                     * <code> SELECT * FROM x FULL OUTER ...</code><br/>
                                     * <code> SELECT * FROM x INNER ...</code><br/>
                                     * <code> SELECT * FROM x LEFT ...</code><br/>
                                     * <code> SELECT * FROM x LEFT OUTER ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL INNER ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL LEFT ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL LEFT OUTER ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL RIGHT ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL RIGHT OUTER ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL FULL ...</code><br/>
                                     * <code> SELECT * FROM x NATURAL FULL OUTER ...</code><br/>
                                     * <code> SELECT * FROM x MATCH ...</code><br/>
                                     * <code> SELECT * FROM x SPRINGFIELD ...</code><br/>
                                     * <code> SELECT * FROM x RIGHT ...</code><br/>
                                     * <code> SELECT * FROM x RIGHT OUTER ...</code><br/>
                                     * <code> SELECT * FROM x UNION ...</code><br/>
                                     *
                                     * @return
                                     */
                                    SelectStatementState.prototype.tokeniseIdentifierKeywordsForJoinStates = function (identifier) {
                                        var result = new SelectStatementState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        var map = this.transpilableCollections.transpilableMapBuilder();
                                        map.put(SasLanguage.JOIN, SelectStatementState.InternalState.JOIN);
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FULL:
                                                map.put(SasLanguage.OUTER, SelectStatementState.InternalState.FULL_OUTER);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.LEFT:
                                                map.put(SasLanguage.OUTER, SelectStatementState.InternalState.LEFT_OUTER);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL:
                                                map.put(SasLanguage.INNER, SelectStatementState.InternalState.NATURAL_INNER);
                                                map.put(SasLanguage.LEFT, SelectStatementState.InternalState.NATURAL_LEFT);
                                                map.put(SasLanguage.RIGHT, SelectStatementState.InternalState.NATURAL_RIGHT);
                                                map.put(SasLanguage.FULL, SelectStatementState.InternalState.NATURAL_FULL);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_LEFT:
                                                map.put(SasLanguage.OUTER, SelectStatementState.InternalState.NATURAL_LEFT_OUTER);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_RIGHT:
                                                map.put(SasLanguage.OUTER, SelectStatementState.InternalState.NATURAL_RIGHT_OUTER);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_FULL:
                                                map.put(SasLanguage.OUTER, SelectStatementState.InternalState.NATURAL_FULL_OUTER);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.RIGHT:
                                                map.put(SasLanguage.OUTER, SelectStatementState.InternalState.RIGHT_OUTER);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.UNION:
                                                map.put(SasLanguage.SELECT, SelectStatementState.InternalState.SELECT);
                                                map.put(SasLanguage.ALL, SelectStatementState.InternalState.NEXT_SELECT);
                                                map.put(SasLanguage.CORR, SelectStatementState.InternalState.NEXT_SELECT);
                                                map.put(SasLanguage.CORRELATED, SelectStatementState.InternalState.NEXT_SELECT);
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.CROSS:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INNER:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FULL_OUTER:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.LEFT_OUTER:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_LEFT_OUTER:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_FULL_OUTER:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_RIGHT_OUTER:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.MATCH:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.SPRINGFIELD:
                                            case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.RIGHT_OUTER:
                                                break;
                                            default:
                                                return result;
                                        }
                                        var nextInternalState = map.build().get(identifier);
                                        if (nextInternalState != null) {
                                            result.setNextInternalStateWithType(nextInternalState, TokenType.keyword);
                                        }
                                        else {
                                            result.setErrorOccurred(true);
                                        }
                                        return result;
                                    };
                                    SelectStatementState.prototype.getStateAfterIdentifierString = function () {
                                        var result = this.tokeniseIdentifierAfterINTO(null);
                                        if (result.handled) {
                                            return this.createSelectStatementState(result.getNextInternalState());
                                        }
                                        return _super.prototype.getStateAfterIdentifierString.call(this);
                                    };
                                    SelectStatementState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                        var result = this.tokeniseOperatorComma(tokenType, c);
                                        result = result.isHandled() ? result : this.tokeniseOperatorInto(tokenType, c);
                                        var tokenisationResult = this.convertInternalTokenisationResult(result, stream);
                                        if (tokenisationResult == null) {
                                            tokenisationResult = _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                        }
                                        return tokenisationResult;
                                    };
                                    /**
                                     * Handle situations with comma: <br/>
                                     * <code> SELECT * FROM x GROUP BY y,</code><br/>
                                     * <code> SELECT * FROM x ORDER BY y,</code><br/>
                                     * <code> SELECT * INTO :x,</code><br/>
                                     * <code> SELECT * INTO :x SEPARATED BY ' ',</code><br/>
                                     * <code> SELECT * INTO :x1 - x2,</code><br/>
                                     * <code> SELECT * FROM x JOIN y ON a=b,</code><br/>
                                     *
                                     * @param tokenType
                                     * @return
                                     */
                                    SelectStatementState.prototype.tokeniseOperatorComma = function (tokenType, c) {
                                        var result = new SelectStatementState.InternalTokenisationResult(this.internalState, tokenType);
                                        var internalStateAfterComma = null;
                                        if (c == SasLanguage.COMMA) {
                                            switch ((this.internalState)) {
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.GROUP_BY_EXPRESSION:
                                                    internalStateAfterComma = SelectStatementState.InternalState.GROUP_BY;
                                                    break;
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER_BY_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER_BY_EXPRESSION_DIR:
                                                    internalStateAfterComma = SelectStatementState.InternalState.ORDER_BY;
                                                    break;
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_EXPRESSION:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY_CHAR:
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON_NAME:
                                                    internalStateAfterComma = SelectStatementState.InternalState.INTO;
                                                    break;
                                                case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_ON_EXPRESSION:
                                                    internalStateAfterComma = SelectStatementState.InternalState.JOIN_ON;
                                                    break;
                                                default:
                                                    result.setErrorOccurred(true);
                                                    break;
                                            }
                                        }
                                        if (internalStateAfterComma != null) {
                                            result.setNextInternalState(internalStateAfterComma);
                                        }
                                        return result;
                                    };
                                    /**
                                     * Handle situations: <br/>
                                     * <code> SELECT * INTO :</code><br/>
                                     * <code> SELECT * INTO :x1 -</code><br/>
                                     * <code> SELECT * INTO :x1 - :</code><br/>
                                     *
                                     * @param tokenType
                                     * @return
                                     */
                                    SelectStatementState.prototype.tokeniseOperatorInto = function (tokenType, c) {
                                        var result = new SelectStatementState.InternalTokenisationResult(this.internalState, tokenType);
                                        if (this.internalState == SelectStatementState.InternalState.INTO && c == SasLanguage.COLON) {
                                            result.setNextInternalState(SelectStatementState.InternalState.INTO_COLON);
                                        }
                                        else if (this.internalState == SelectStatementState.InternalState.INTO_COLON_NAME_DASH && c == SasLanguage.COLON) {
                                            result.setNextInternalState(SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON);
                                        }
                                        else if (this.internalState == SelectStatementState.InternalState.INTO_COLON_NAME && c == SasLanguage.MINUS) {
                                            result.setNextInternalState(SelectStatementState.InternalState.INTO_COLON_NAME_DASH);
                                        }
                                        return result;
                                    };
                                    /**
                                     * Never match formats.
                                     */
                                    SelectStatementState.prototype.matchFormat = function (stream) {
                                        return null;
                                    };
                                    SelectStatementState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                        if (c == SasLanguage.BRACKET_CLOSE && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.sql.SqlExpressionState)) {
                                            stream.rewind();
                                            return this.createTokenisationResult(null, this.nextState, stream);
                                        }
                                        return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                    };
                                    /**
                                     * Handle situation: <code> SELECT * INTO :x SEPARATED BY ',' </code>
                                     */
                                    SelectStatementState.prototype.getStateAfterString = function () {
                                        if (this.internalState == SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY) {
                                            return this.createSelectStatementState(SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY_CHAR);
                                        }
                                        return _super.prototype.getStateAfterString.call(this);
                                    };
                                    SelectStatementState.prototype.getInternalState = function () {
                                        return this.internalState;
                                    };
                                    SelectStatementState.prototype.getFieldsString = function () {
                                        return "internalState=" + this.internalState + ", " + _super.prototype.getFieldsString.call(this);
                                    };
                                    SelectStatementState.prototype.getName = function () {
                                        return "SelectStatementState";
                                    };
                                    /**
                                     * Convert the {@link InternalTokenisationResult} into a {@link TokenisationResult}.
                                     *
                                     * @param result
                                     * @param stream
                                     * @return
                                     */
                                    SelectStatementState.prototype.convertInternalTokenisationResult = function (result, stream) {
                                        if (result.isHandled()) {
                                            if (result.isErrorOccurred()) {
                                                return this.createTokenisationResult(result.getTokenType(), new UnknownStatementState(this.statementParentState, this), stream);
                                            }
                                            var internalStateAfterSqlExpression = null;
                                            if (result.getNextInternalState() == SelectStatementState.InternalState.WHERE) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.WHERE_EXPRESSION;
                                            }
                                            else if (result.getNextInternalState() == SelectStatementState.InternalState.FROM) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.FROM_EXPRESSION;
                                            }
                                            else if (result.getNextInternalState() == SelectStatementState.InternalState.HAVING) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.HAVING_EXPRESSION;
                                            }
                                            else if (result.getNextInternalState() == SelectStatementState.InternalState.GROUP_BY) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.GROUP_BY_EXPRESSION;
                                            }
                                            else if (result.getNextInternalState() == SelectStatementState.InternalState.ORDER_BY) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.ORDER_BY_EXPRESSION;
                                            }
                                            else if (result.getNextInternalState() == SelectStatementState.InternalState.JOIN) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.JOIN_EXPRESSION;
                                            }
                                            else if (result.getNextInternalState() == SelectStatementState.InternalState.JOIN_ON) {
                                                internalStateAfterSqlExpression = SelectStatementState.InternalState.JOIN_ON_EXPRESSION;
                                            }
                                            if (internalStateAfterSqlExpression != null) {
                                                return this.createTokenisationResult(result.getTokenType(), this.createSqlExpressionState(internalStateAfterSqlExpression), stream);
                                            }
                                            else if (this.internalState != result.getNextInternalState()) {
                                                return this.createTokenisationResult(result.getTokenType(), this.createSelectStatementState(result.getNextInternalState()), stream);
                                            }
                                        }
                                        return null;
                                    };
                                    return SelectStatementState;
                                }(StatementState));
                                sql.SelectStatementState = SelectStatementState;
                                (function (SelectStatementState) {
                                    var InternalState;
                                    (function (InternalState) {
                                        InternalState[InternalState["SELECT"] = 0] = "SELECT";
                                        InternalState[InternalState["SELECT_DISTINCT"] = 1] = "SELECT_DISTINCT";
                                        InternalState[InternalState["SELECT_EXPRESSION"] = 2] = "SELECT_EXPRESSION";
                                        InternalState[InternalState["FROM"] = 3] = "FROM";
                                        InternalState[InternalState["FROM_EXPRESSION"] = 4] = "FROM_EXPRESSION";
                                        InternalState[InternalState["CROSS"] = 5] = "CROSS";
                                        InternalState[InternalState["FULL"] = 6] = "FULL";
                                        InternalState[InternalState["FULL_OUTER"] = 7] = "FULL_OUTER";
                                        InternalState[InternalState["INNER"] = 8] = "INNER";
                                        InternalState[InternalState["LEFT"] = 9] = "LEFT";
                                        InternalState[InternalState["LEFT_OUTER"] = 10] = "LEFT_OUTER";
                                        InternalState[InternalState["NATURAL"] = 11] = "NATURAL";
                                        InternalState[InternalState["NATURAL_INNER"] = 12] = "NATURAL_INNER";
                                        InternalState[InternalState["NATURAL_LEFT"] = 13] = "NATURAL_LEFT";
                                        InternalState[InternalState["NATURAL_LEFT_OUTER"] = 14] = "NATURAL_LEFT_OUTER";
                                        InternalState[InternalState["NATURAL_RIGHT"] = 15] = "NATURAL_RIGHT";
                                        InternalState[InternalState["NATURAL_RIGHT_OUTER"] = 16] = "NATURAL_RIGHT_OUTER";
                                        InternalState[InternalState["NATURAL_FULL"] = 17] = "NATURAL_FULL";
                                        InternalState[InternalState["NATURAL_FULL_OUTER"] = 18] = "NATURAL_FULL_OUTER";
                                        InternalState[InternalState["MATCH"] = 19] = "MATCH";
                                        InternalState[InternalState["SPRINGFIELD"] = 20] = "SPRINGFIELD";
                                        InternalState[InternalState["RIGHT"] = 21] = "RIGHT";
                                        InternalState[InternalState["RIGHT_OUTER"] = 22] = "RIGHT_OUTER";
                                        InternalState[InternalState["UNION"] = 23] = "UNION";
                                        InternalState[InternalState["JOIN"] = 24] = "JOIN";
                                        InternalState[InternalState["JOIN_EXPRESSION"] = 25] = "JOIN_EXPRESSION";
                                        InternalState[InternalState["JOIN_ON"] = 26] = "JOIN_ON";
                                        InternalState[InternalState["JOIN_ON_EXPRESSION"] = 27] = "JOIN_ON_EXPRESSION";
                                        InternalState[InternalState["INTO"] = 28] = "INTO";
                                        InternalState[InternalState["INTO_COLON"] = 29] = "INTO_COLON";
                                        InternalState[InternalState["INTO_COLON_NAME"] = 30] = "INTO_COLON_NAME";
                                        InternalState[InternalState["INTO_COLON_NAME_SEPARATED"] = 31] = "INTO_COLON_NAME_SEPARATED";
                                        InternalState[InternalState["INTO_COLON_NAME_SEPARATED_BY"] = 32] = "INTO_COLON_NAME_SEPARATED_BY";
                                        InternalState[InternalState["INTO_COLON_NAME_SEPARATED_BY_CHAR"] = 33] = "INTO_COLON_NAME_SEPARATED_BY_CHAR";
                                        InternalState[InternalState["INTO_COLON_NAME_DASH"] = 34] = "INTO_COLON_NAME_DASH";
                                        InternalState[InternalState["INTO_COLON_NAME_DASH_COLON"] = 35] = "INTO_COLON_NAME_DASH_COLON";
                                        InternalState[InternalState["INTO_COLON_NAME_DASH_COLON_NAME"] = 36] = "INTO_COLON_NAME_DASH_COLON_NAME";
                                        InternalState[InternalState["INTO_EXPRESSION"] = 37] = "INTO_EXPRESSION";
                                        InternalState[InternalState["GROUP"] = 38] = "GROUP";
                                        InternalState[InternalState["GROUP_BY"] = 39] = "GROUP_BY";
                                        InternalState[InternalState["GROUP_BY_EXPRESSION"] = 40] = "GROUP_BY_EXPRESSION";
                                        InternalState[InternalState["ORDER"] = 41] = "ORDER";
                                        InternalState[InternalState["ORDER_BY"] = 42] = "ORDER_BY";
                                        InternalState[InternalState["ORDER_BY_EXPRESSION"] = 43] = "ORDER_BY_EXPRESSION";
                                        InternalState[InternalState["ORDER_BY_EXPRESSION_DIR"] = 44] = "ORDER_BY_EXPRESSION_DIR";
                                        InternalState[InternalState["WHERE"] = 45] = "WHERE";
                                        InternalState[InternalState["WHERE_EXPRESSION"] = 46] = "WHERE_EXPRESSION";
                                        InternalState[InternalState["HAVING"] = 47] = "HAVING";
                                        InternalState[InternalState["HAVING_EXPRESSION"] = 48] = "HAVING_EXPRESSION";
                                        InternalState[InternalState["NEXT_SELECT"] = 49] = "NEXT_SELECT";
                                        InternalState[InternalState["OUTER"] = 50] = "OUTER";
                                        InternalState[InternalState["OUTER_UNION"] = 51] = "OUTER_UNION";
                                    })(InternalState = SelectStatementState.InternalState || (SelectStatementState.InternalState = {}));
                                    var InternalTokenisationResult = /** @class */ (function () {
                                        function InternalTokenisationResult(nextInternalState, tokenType) {
                                            this.nextInternalState = nextInternalState;
                                            this.tokenType = tokenType;
                                        }
                                        InternalTokenisationResult.prototype.setNextInternalState = function (nextInternalState) {
                                            this.nextInternalState = nextInternalState;
                                            this.handled = true;
                                        };
                                        InternalTokenisationResult.prototype.setNextInternalStateWithType = function (nextInternalState, tokenType) {
                                            this.nextInternalState = nextInternalState;
                                            this.tokenType = tokenType;
                                            this.handled = true;
                                        };
                                        InternalTokenisationResult.prototype.setErrorOccurred = function (errorOccurred) {
                                            this.errorOccurred = errorOccurred;
                                            this.handled = true;
                                        };
                                        InternalTokenisationResult.prototype.getNextInternalState = function () {
                                            return this.nextInternalState;
                                        };
                                        InternalTokenisationResult.prototype.getTokenType = function () {
                                            return this.tokenType;
                                        };
                                        InternalTokenisationResult.prototype.isErrorOccurred = function () {
                                            return this.errorOccurred;
                                        };
                                        InternalTokenisationResult.prototype.isHandled = function () {
                                            return this.handled;
                                        };
                                        return InternalTokenisationResult;
                                    }());
                                    SelectStatementState.InternalTokenisationResult = InternalTokenisationResult;
                                })(SelectStatementState = sql.SelectStatementState || (sql.SelectStatementState = {}));
                            })(sql = state.sql || (state.sql = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var sql;
                            (function (sql) {
                                var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                                var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                                var StatementState = com.wpc.wps.language.context.tokenisation.state.StatementState;
                                var TransitionState = com.wpc.wps.language.context.tokenisation.state.TransitionState;
                                var UnknownStatementState = com.wpc.wps.language.context.tokenisation.state.UnknownStatementState;
                                var CreateIndexStatementState = /** @class */ (function (_super) {
                                    __extends(CreateIndexStatementState, _super);
                                    function CreateIndexStatementState(statementParentState, parent, currentStatement) {
                                        var _this = _super.call(this, statementParentState, parent, null, currentStatement) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.sql.SqlStatementState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                        _this.internalState = (SasLanguage.UNIQUE === currentStatement.getName()) ? CreateIndexStatementState.InternalState.UNIQUE : CreateIndexStatementState.InternalState.INDEX;
                                        return _this;
                                    }
                                    CreateIndexStatementState.prototype.getParent = function () {
                                        return _super.prototype.getParent.call(this);
                                    };
                                    CreateIndexStatementState.prototype.createCreateIndexStatementState = function (newInternalState) {
                                        var newState = new CreateIndexStatementState(this.statementParentState, this.getParent(), this.getCurrentStatement());
                                        newState.internalState = newInternalState;
                                        return newState;
                                    };
                                    CreateIndexStatementState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                        var tokenType = TokenType.identifier;
                                        var nextInternalState = null;
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.UNIQUE:
                                                if ((SasLanguage.INDEX === identifier)) {
                                                    nextInternalState = CreateIndexStatementState.InternalState.INDEX;
                                                    tokenType = TokenType.keyword;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.INDEX:
                                                nextInternalState = CreateIndexStatementState.InternalState.INDEX_NAME;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.INDEX_NAME:
                                                if ((SasLanguage.ON === identifier)) {
                                                    nextInternalState = CreateIndexStatementState.InternalState.ON;
                                                    tokenType = TokenType.keyword;
                                                }
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.ON:
                                                nextInternalState = CreateIndexStatementState.InternalState.TABLE_NAME;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.OPEN_BRACKET_OR_COMMA:
                                                nextInternalState = CreateIndexStatementState.InternalState.COLUMN_NAME;
                                                break;
                                            default:
                                        }
                                        if (nextInternalState == null) {
                                            return this.errorTokenisationResult(tokenType, stream);
                                        }
                                        return this.createTokenisationResult(tokenType, this.createCreateIndexStatementState(nextInternalState), stream);
                                    };
                                    CreateIndexStatementState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                        var nextInternalState = this.getNextInternalStateForMacro();
                                        if (nextInternalState == null) {
                                            return this.errorTokenisationResult(tokenType, stream);
                                        }
                                        return this.createTokenisationResult(tokenType, this.createCreateIndexStatementState(nextInternalState), stream);
                                    };
                                    CreateIndexStatementState.prototype.getNextInternalStateForMacro = function () {
                                        var nextInternalState = null;
                                        switch ((this.internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.INDEX:
                                                nextInternalState = CreateIndexStatementState.InternalState.INDEX_NAME;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.ON:
                                                nextInternalState = CreateIndexStatementState.InternalState.TABLE_NAME;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.OPEN_BRACKET_OR_COMMA:
                                                nextInternalState = CreateIndexStatementState.InternalState.COLUMN_NAME;
                                                break;
                                            default:
                                        }
                                        return nextInternalState;
                                    };
                                    CreateIndexStatementState.prototype.getNextStateAfterMacroState = function () {
                                        var nextInternalState = this.getNextInternalStateForMacro();
                                        if (nextInternalState == null) {
                                            return this.newUnknownStatementState();
                                        }
                                        return this.createCreateIndexStatementState(nextInternalState);
                                    };
                                    CreateIndexStatementState.prototype.tokeniseNumber = function (tokenType, stream) {
                                        return this.errorTokenisationResult(tokenType, stream);
                                    };
                                    CreateIndexStatementState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                        if (this.internalState == CreateIndexStatementState.InternalState.COLUMN_NAME && c == SasLanguage.COMMA) {
                                            return this.createTokenisationResult(tokenType, this.createCreateIndexStatementState(CreateIndexStatementState.InternalState.OPEN_BRACKET_OR_COMMA), stream);
                                        }
                                        return this.errorTokenisationResult(tokenType, stream);
                                    };
                                    CreateIndexStatementState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                        if (this.internalState == CreateIndexStatementState.InternalState.TABLE_NAME && c == SasLanguage.BRACKET_OPEN) {
                                            return this.createTokenisationResult(tokenType, this.createCreateIndexStatementState(CreateIndexStatementState.InternalState.OPEN_BRACKET_OR_COMMA), stream);
                                        }
                                        if (this.internalState == CreateIndexStatementState.InternalState.COLUMN_NAME && c == SasLanguage.BRACKET_CLOSE) {
                                            return this.createTokenisationResult(tokenType, new TransitionState(this.statementParentState, this.parent, this.statementParentState), stream);
                                        }
                                        return this.errorTokenisationResult(tokenType, stream);
                                    };
                                    CreateIndexStatementState.prototype.errorTokenisationResult = function (tokenType, stream) {
                                        return this.createTokenisationResult(tokenType, this.newUnknownStatementState(), stream);
                                    };
                                    CreateIndexStatementState.prototype.newUnknownStatementState = function () {
                                        return new UnknownStatementState(this.statementParentState, this.parent);
                                    };
                                    CreateIndexStatementState.prototype.getInternalState = function () {
                                        return this.internalState;
                                    };
                                    CreateIndexStatementState.prototype.getFieldsString = function () {
                                        return "internalState=" + this.internalState + ", " + _super.prototype.getFieldsString.call(this);
                                    };
                                    CreateIndexStatementState.prototype.getName = function () {
                                        return "CreateIndexStatementState";
                                    };
                                    return CreateIndexStatementState;
                                }(StatementState));
                                sql.CreateIndexStatementState = CreateIndexStatementState;
                                (function (CreateIndexStatementState) {
                                    var InternalState;
                                    (function (InternalState) {
                                        InternalState[InternalState["UNIQUE"] = 0] = "UNIQUE";
                                        InternalState[InternalState["INDEX"] = 1] = "INDEX";
                                        InternalState[InternalState["INDEX_NAME"] = 2] = "INDEX_NAME";
                                        InternalState[InternalState["ON"] = 3] = "ON";
                                        InternalState[InternalState["TABLE_NAME"] = 4] = "TABLE_NAME";
                                        InternalState[InternalState["OPEN_BRACKET_OR_COMMA"] = 5] = "OPEN_BRACKET_OR_COMMA";
                                        InternalState[InternalState["COLUMN_NAME"] = 6] = "COLUMN_NAME";
                                        InternalState[InternalState["CLOSE_BRACKET"] = 7] = "CLOSE_BRACKET";
                                    })(InternalState = CreateIndexStatementState.InternalState || (CreateIndexStatementState.InternalState = {}));
                                })(CreateIndexStatementState = sql.CreateIndexStatementState || (sql.CreateIndexStatementState = {}));
                            })(sql = state.sql || (state.sql = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var sql;
                            (function (sql) {
                                var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                                var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                                var AbstractTokenisationState = com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState;
                                var StatementState = com.wpc.wps.language.context.tokenisation.state.StatementState;
                                /**
                                 * Tokenisation state for where there is an expression inside brackets that needs to be ignored, e.g.
                                 * PROC SQL; EXECUTE (<br/>
                                 *
                                 * Transitions {@link StatementState} on the last closing bracket. Semicolons are ignored inside the
                                 * brackets.
                                 *
                                 * @author ml
                                 */
                                var BracketedExpressionStatementState = /** @class */ (function (_super) {
                                    __extends(BracketedExpressionStatementState, _super);
                                    /**
                                     *
                                     * @param parent class that created this
                                     * @param currentStatement the {@link LanguageInfo} for the statement
                                     * @param bracketCount number of unclosed open brackets
                                     */
                                    function BracketedExpressionStatementState(parent, currentStatement, bracketCount) {
                                        var _this = _super.call(this, parent) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                        _this.currentStatement = currentStatement;
                                        _this.bracketCount = bracketCount;
                                        return _this;
                                    }
                                    BracketedExpressionStatementState.prototype.getParent = function () {
                                        return this.parent;
                                    };
                                    /**
                                     * Overridden to count brackets and transition to {@link StatementState} on the last closing bracket.
                                     */
                                    BracketedExpressionStatementState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                        var nextBracketCount = this.bracketCount;
                                        if (SasLanguage.isBracketOpen(c)) {
                                            nextBracketCount++;
                                        }
                                        else {
                                            nextBracketCount--;
                                        }
                                        var procStepState = this.getParent();
                                        if (nextBracketCount == 0) {
                                            return this.createTokenisationResult(tokenType, new StatementState(procStepState, procStepState, procStepState, this.currentStatement), stream);
                                        }
                                        return this.createTokenisationResult(tokenType, new BracketedExpressionStatementState(procStepState, this.currentStatement, nextBracketCount), stream);
                                    };
                                    BracketedExpressionStatementState.prototype.tokeniseSemiColon = function (stream) {
                                        if (this.bracketCount == 0) {
                                            return _super.prototype.tokeniseSemiColon.call(this, stream);
                                        }
                                        return this.createTokenisationResult(TokenType.semicolon, null, stream);
                                    };
                                    BracketedExpressionStatementState.prototype.getName = function () {
                                        return "BracketedExpressionStatementState";
                                    };
                                    BracketedExpressionStatementState.prototype.getFieldsString = function () {
                                        return "bracketCount=" + this.bracketCount + ", ";
                                    };
                                    return BracketedExpressionStatementState;
                                }(AbstractTokenisationState));
                                sql.BracketedExpressionStatementState = BracketedExpressionStatementState;
                            })(sql = state.sql || (state.sql = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var sql;
                            (function (sql) {
                                var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                                var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                                var FunctionState = com.wpc.wps.language.context.tokenisation.state.FunctionState;
                                var WhereStatementState = com.wpc.wps.language.context.tokenisation.state.WhereStatementState;
                                /**
                                 * State for handling SQL expressions.
                                 *
                                 * @author ml
                                 */
                                var SqlExpressionState = /** @class */ (function (_super) {
                                    __extends(SqlExpressionState, _super);
                                    function SqlExpressionState(statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) {
                                        if (bracketCount === void 0) { bracketCount = state.AbstractExpressionState.DEFAULT_BRACKET_COUNT; }
                                        if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS; }
                                        if (prevIdentifier === void 0) { prevIdentifier = null; }
                                        if (component === void 0) { component = null; }
                                        var _this = _super.call(this, statementParentState, parent, bracketCount, conditionState, prevIdentifier, component) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                        return _this;
                                    }
                                    SqlExpressionState.prototype.getStatementParentState = function () {
                                        return _super.prototype.getStatementParentState.call(this);
                                    };
                                    SqlExpressionState.prototype.getParent = function () {
                                        return _super.prototype.getParent.call(this);
                                    };
                                    SqlExpressionState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                        return new SqlExpressionState(this.getStatementParentState(), this.getParent(), bracketCount, newConditionState, prevIdentifier, component);
                                    };
                                    /**
                                     * Overridden for specific SQL handling.
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                        var result = this.tokeniseIdentifierKeywordsReturnToSelect(identifier, stream);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierCaseKeywords(identifier);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierFormatLabelLengthKeyword(identifier);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierWhenBoolean(identifier);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierCountDistinct(identifier, stream);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierSuper(identifier, stream);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierWhereKeywords(identifier, stream);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierEmbeddedSelect(identifier, stream);
                                        result = result.isHandled() ? result : this.tokeniseIdentifierAS();
                                        var tokenisationResult = this.convertInternalTokenisationResult(result, stream);
                                        return tokenisationResult != null ? tokenisationResult : _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                    };
                                    /**
                                     * Keywords (FROM, INTO, GROUP, ORDER, WHERE, HAVING etc) handled by parent
                                     * {@link SelectStatementState#tokeniseIdentifierKeywordsAfterExpressions(String)}.<br/>
                                     * <code>SELECT x FROM</code><br/>
                                     * <code>SELECT x FROM y INTO</code><br/>
                                     * <code>SELECT x FROM y GROUP</code><br/>
                                     * etc.
                                     *
                                     * @param result
                                     * @param identifier
                                     * @param stream
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierKeywordsReturnToSelect = function (identifier, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING) && this.bracketCount == 0 && (this.parent instanceof com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState)) {
                                            var selectStatementState = this.parent;
                                            if (selectStatementState.tokeniseIdentifierKeywordsAfterExpressions(identifier).getTokenType() == TokenType.keyword) {
                                                stream.rewind();
                                                result.setTokenisationResult(this.createTokenisationResult(null, this.parent, stream));
                                            }
                                        }
                                        return result;
                                    };
                                    /**
                                     * Identify the FORMAT/INFORMAT/LABEL/LENGTH keywords.<br/>
                                     * <code>SELECT a FORMAT</code><br/>
                                     * <code>SELECT a INFORMAT</code><br/>
                                     * <code>SELECT a LABEL</code><br/>
                                     * <code>SELECT a LENGTH</code><br/>
                                     *
                                     * @param identifier
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierFormatLabelLengthKeyword = function (identifier) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING)) {
                                            switch ((identifier)) {
                                                case SasLanguage.FORMAT:
                                                case SasLanguage.INFORMAT:
                                                    result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT, TokenType.keyword);
                                                    break;
                                                case SasLanguage.LABEL:
                                                    result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LABEL, TokenType.keyword);
                                                    break;
                                                case SasLanguage.LENGTH:
                                                    result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LENGTH, TokenType.keyword);
                                                    break;
                                            }
                                        }
                                        return result;
                                    };
                                    /**
                                     * Identify boolean mnemonic after WHEN:<br/>
                                     * <code>SELECT CASE a WHEN GT</code><br/>
                                     *
                                     * @param identifier
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierWhenBoolean = function (identifier) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN && SasLanguage.isComparisonMnemonic(identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_OP, TokenType.keyword);
                                        }
                                        return result;
                                    };
                                    /**
                                     * Detect CASE related keywords.<br/>
                                     * <strong>WHEN</strong>:<br/>
                                     * <code>SELECT CASE WHEN</code><br/>
                                     * <code>SELECT CASE a WHEN</code><br/>
                                     * <code>SELECT CASE WHEN a THEN b WHEN</code><br/>
                                     * <strong>THEN</strong>:<br/>
                                     * <code>SELECT CASE WHEN a THEN</code><br/>
                                     * <strong>ELSE</strong>:<br/>
                                     * <code>SELECT CASE WHEN a THEN b ELSE</code><br/>
                                     * <strong>END</strong>:<br/>
                                     * <code>SELECT CASE WHEN a THEN b END</code><br/>
                                     * <code>SELECT CASE WHEN a THEN b ELSE c END</code><br/>
                                     *
                                     * @param identifier
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierCaseKeywords = function (identifier) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS && (SasLanguage.CASE === identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE, TokenType.keyword);
                                        }
                                        else if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE_NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE) && (SasLanguage.WHEN === identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN, TokenType.keyword);
                                        }
                                        else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_NNS_FOUND && (SasLanguage.THEN === identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN, TokenType.keyword);
                                        }
                                        else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND && (SasLanguage.ELSE === identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE, TokenType.keyword);
                                        }
                                        else if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE_NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND) && (SasLanguage.END === identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND, TokenType.keyword);
                                        }
                                        return result;
                                    };
                                    /**
                                     * Handle AS ...
                                     *
                                     * @param identifier
                                     * @param stream
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierAS = function () {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_AS) {
                                            result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                        }
                                        return result;
                                    };
                                    /**
                                     * Detect keywords in WHERE / HAVING expressions:<br/>
                                     * <code>WHERE x = ANY</code><br/>
                                     * <code>WHERE x = ALL</code><br/>
                                     *
                                     * @param identifier
                                     * @param stream
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierWhereKeywords = function (identifier, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (this.getParent().getInternalState() == sql.SelectStatementState.InternalState.WHERE_EXPRESSION || this.getParent().getInternalState() == sql.SelectStatementState.InternalState.HAVING_EXPRESSION) {
                                            if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS) {
                                                switch ((identifier)) {
                                                    case SasLanguage.ANY:
                                                    case SasLanguage.ALL:
                                                    case SasLanguage.CALCULATED:
                                                    case SasLanguage.EXISTS:
                                                        result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, TokenType.keyword);
                                                        break;
                                                    default:
                                                }
                                            }
                                            else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND && (SasLanguage.CONTAINS === identifier)) {
                                                result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, TokenType.keyword);
                                            }
                                        }
                                        if ((this.getParent().getInternalState() == sql.SelectStatementState.InternalState.GROUP_BY_EXPRESSION || this.getParent().getInternalState() == sql.SelectStatementState.InternalState.ORDER_BY_EXPRESSION) && (SasLanguage.CALCULATED === identifier)) {
                                            result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, TokenType.keyword);
                                        }
                                        return result;
                                    };
                                    /**
                                     * Call super class {@link #tokeniseIdentifier_handle_NNS(String, ITokenisationStream)} and
                                     * {@link #tokeniseIdentifier_handle_NNS_FOUND(String, ITokenisationStream)} for equivalent SQL NNS /
                                     * NNS_FOUND states.
                                     *
                                     * @param identifier
                                     * @param stream
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierSuper = function (identifier, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (SqlExpressionState.isSqlNnsFoundState(this.internalState)) {
                                            result.setTokenisationResult(this.tokeniseIdentifier_handle_NNS_FOUND(identifier, stream));
                                        }
                                        else if (SqlExpressionState.isSqlNnsState(this.internalState)) {
                                            result.setTokenisationResult(this.tokeniseIdentifier_handle_NNS(identifier, stream));
                                        }
                                        return result;
                                    };
                                    /**
                                     * Overridden to detect SQL aggregate functions. Also where expecting a name after <strong>CASE WHEN
                                     * THEN ELSE</strong>, change state.
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifier_handle_NNS = function (identifier, stream) {
                                        if (this.containsOpenBracket(stream)) {
                                            if (SasLanguage.isSqlAggregationFunction(identifier)) {
                                                return this.createTokenisationResult(TokenType._function, this.createExpressionState(this.internalState, this.bracketCount, identifier, null), stream);
                                            }
                                            if ((SasLanguage.BTRIM === identifier)) {
                                                return this.createTokenisationResult(TokenType._function, new sql.BtrimFunctionState(this.getStatementParentState(), this, this.createExpressionState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND, 0, identifier, null), 0), null);
                                            }
                                            var functionInfo = this.getGlobalFunction(identifier);
                                            if (functionInfo != null) {
                                                var functionState = new FunctionState(this.statementParentState, this, this.createExpressionState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND, 0, identifier, null), functionInfo, FunctionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER);
                                                return this.createTokenisationResult(TokenType._function, functionState, stream);
                                            }
                                        }
                                        if (SqlExpressionState.isSqlNnsState(this.internalState)) {
                                            return this.createTokenisationResult(TokenType.identifier, this.createExpressionStateMinimal(SqlExpressionState.getSqlNnsFoundState(this.internalState)), stream);
                                        }
                                        return _super.prototype.tokeniseIdentifier_handle_NNS.call(this, identifier, stream);
                                    };
                                    /**
                                     * Handle comparison / boolean mnemonics for <strong>CASE WHEN THEN ELSE</strong>. Also handle
                                     * keyword <strong>AS</strong>, e.g.<br/>
                                     * <code>SELECT a AS</code><br/>
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifier_handle_NNS_FOUND = function (identifier, stream) {
                                        if ((this.isComparisonMnemonic(identifier) || SasLanguage.isBooleanMnemonic(identifier)) && SqlExpressionState.isSqlNnsFoundState(this.internalState)) {
                                            return this.createTokenisationResult(TokenType.keyword, this.createExpressionStateMinimal(SqlExpressionState.getSqlNnsState(this.internalState)), stream);
                                        }
                                        if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING) && (SasLanguage.AS === identifier)) {
                                            return this.createTokenisationResult(TokenType.keyword, this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_AS), stream);
                                        }
                                        if (this.getParent().getInternalState() == sql.SelectStatementState.InternalState.FROM_EXPRESSION || this.getParent().getInternalState() == sql.SelectStatementState.InternalState.JOIN_EXPRESSION) {
                                            stream.rewind();
                                            return this.createTokenisationResult(null, this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_AS), stream);
                                        }
                                        return _super.prototype.tokeniseIdentifier_handle_NNS_FOUND.call(this, identifier, stream);
                                    };
                                    SqlExpressionState.prototype.tokeniseIdentifierCountDistinct = function (identifier, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (this.bracketCount > 0 && this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS && (SasLanguage.DISTINCT === identifier) && (SasLanguage.COUNT === this.prevIdentifier)) {
                                            result.setTokenisationResult(this.createTokenisationResult(TokenType.keyword, this.createExpressionState(this.internalState, this.bracketCount, null, null), stream));
                                        }
                                        return result;
                                    };
                                    /**
                                     * Handle embedded SELECT, e.g.:<br/>
                                     * <code>SELECT * FROM (SELECT </code>
                                     *
                                     * @param identifier
                                     * @param stream
                                     * @return
                                     */
                                    SqlExpressionState.prototype.tokeniseIdentifierEmbeddedSelect = function (identifier, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS && this.bracketCount == 1 && (SasLanguage.SELECT === identifier)) {
                                            result.setTokenisationResult(this.createTokenisationResult(TokenType.keyword, new sql.SelectStatementState(this.getStatementParentState(), this, this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND), null), stream));
                                        }
                                        return result;
                                    };
                                    /**
                                     * Handle numbers after <strong>WHEN THEN ELSE</strong> but not <strong>CASE</strong>.<br/>
                                     * Also handle number after <code>LENGTH = </code>
                                     */
                                    SqlExpressionState.prototype.tokeniseNumber = function (tokenType, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, tokenType);
                                        if (SqlExpressionState.isSqlNnsState(this.internalState) && this.internalState != state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE) {
                                            result.setNextInternalState(SqlExpressionState.getSqlNnsFoundState(this.internalState));
                                        }
                                        else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LENGTH || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LENGTH_EQ) {
                                            result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                        }
                                        else if (SqlExpressionState.isSqlNnsFoundState(this.internalState) || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_AS) {
                                            result.setErrorOccurred(true);
                                        }
                                        var tokenisationResult = this.convertInternalTokenisationResult(result, stream);
                                        return tokenisationResult != null ? tokenisationResult : _super.prototype.tokeniseNumber.call(this, tokenType, stream);
                                    };
                                    /**
                                     *
                                     * @param internalState
                                     * @return true if the state is waiting for a Number/String: CASE / ELSE / THEN / WHEN
                                     */
                                    SqlExpressionState.isSqlNnsState = function (internalState) {
                                        switch ((internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_OP:
                                                return true;
                                            default:
                                                return false;
                                        }
                                    };
                                    /**
                                     *
                                     * @param internalState
                                     * @return true if the state has just found a Name/Number/String
                                     */
                                    SqlExpressionState.isSqlNnsFoundState = function (internalState) {
                                        switch ((internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE_NNS_FOUND:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE_NNS_FOUND:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_NNS_FOUND:
                                                return true;
                                            default:
                                                return false;
                                        }
                                    };
                                    /**
                                     *
                                     * @param internalState
                                     * @return where the internalState expects a Name/Number/String, this will
                                     * return the corresponding state to indicate one has been found or else null returned.
                                     */
                                    SqlExpressionState.getSqlNnsFoundState = function (internalState) {
                                        switch ((internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE_NNS_FOUND;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE_NNS_FOUND;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_OP:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_NNS_FOUND;
                                            default:
                                                return null;
                                        }
                                    };
                                    /**
                                     * Where a state has found a Name/Number/String, return to the state before this to expect another
                                     * (after an operator).
                                     *
                                     * @param internalState
                                     * @return
                                     */
                                    SqlExpressionState.getSqlNnsState = function (internalState) {
                                        switch ((internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE_NNS_FOUND:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE_NNS_FOUND:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_NNS_FOUND:
                                                return state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN;
                                            default:
                                                return null;
                                        }
                                    };
                                    /**
                                     * Overridden so that formats only matched after the FORMAT keyword.
                                     */
                                    SqlExpressionState.prototype.matchFormat = function (stream) {
                                        if (this.internalState != state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT_EQ && this.internalState != state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT) {
                                            return null;
                                        }
                                        return _super.prototype.matchFormat.call(this, stream);
                                    };
                                    /**
                                     * Handle formats after the FORMAT keyword.
                                     */
                                    SqlExpressionState.prototype.tokeniseFormat = function (tokenType, identifier, stream) {
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT_EQ || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT) {
                                            return this.createTokenisationResult(tokenType, this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND), stream);
                                        }
                                        return _super.prototype.tokeniseFormat.call(this, tokenType, identifier, stream);
                                    };
                                    /**
                                     * Handle SQL operators:<br/>
                                     * <p>
                                     * <strong>'='</strong> e.g.:<br/>
                                     * <code>SELECT c FORMAT =</code><br/>
                                     * <code>SELECT c LENGTH =</code><br/>
                                     * <code>SELECT c LABEL =</code><br/>
                                     * </p>
                                     * <p>
                                     * <strong>','</strong> e.g.:<br/>
                                     * <code>SELECT a,</code><br/>
                                     * </p>
                                     * <p>
                                     * <strong>'*'</strong> e.g.:<br/>
                                     * <code>SELECT *</code><br/>
                                     * </p>
                                     * Special case for <strong>WHEN</strong> which is allowed to skip the parameter<br/>
                                     * <code>SELECT CASE x WHEN > </code><br/>
                                     * Also in CASE / WHEN / THEN / ELSE, assume all operators are valid and change state.
                                     */
                                    SqlExpressionState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, tokenType);
                                        if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING) && c == SasLanguage.COMMA) {
                                            result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS);
                                        }
                                        else if ((this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT) && c == SasLanguage.ASTERISK) {
                                            result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                        }
                                        else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_OP) {
                                            result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_OP);
                                        }
                                        else if (SqlExpressionState.isSqlNnsFoundState(this.internalState)) {
                                            result.setNextInternalState(SqlExpressionState.getSqlNnsState(this.internalState));
                                        }
                                        else if (SqlExpressionState.isSqlNnsState(this.internalState)) {
                                            result.setTokenisationResult(this.createTokenisationResult(tokenType, null, stream));
                                        }
                                        else if (c == SasLanguage.EQUALS) {
                                            switch ((this.internalState)) {
                                                case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT:
                                                    result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_FORMAT_EQ);
                                                    break;
                                                case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LABEL:
                                                    result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LABEL_EQ);
                                                    break;
                                                case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LENGTH:
                                                    result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LENGTH_EQ);
                                                    break;
                                                default:
                                            }
                                        }
                                        var tokenisationResult = this.convertInternalTokenisationResult(result, stream);
                                        return tokenisationResult != null ? tokenisationResult : _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                    };
                                    /**
                                     * Count brackets, never use {@link FunctionState}, return to this state. Where bracket count is 0,
                                     * on a close bracket, assume it is a return to the parent {@link SelectStatementState}.
                                     */
                                    SqlExpressionState.prototype.tokeniseBracket = function (tokenType, c, stream) {
                                        if (c == SasLanguage.BRACKET_OPEN && this.internalState != state.AssignmentExpressionState.AssignmentExpressionInternalState.IN) {
                                            return this.createTokenisationResult(tokenType, this.createExpressionState(this.internalState, this.bracketCount + 1, this.prevIdentifier, null), stream);
                                        }
                                        else if (c == SasLanguage.BRACKET_CLOSE && this.internalState != state.AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED) {
                                            if (this.bracketCount == 0) {
                                                stream.rewind();
                                                return this.createTokenisationResult(null, this.parent, stream);
                                            }
                                            else if (this.bracketCount == 1 && (SasLanguage.MONOTONIC === this.prevIdentifier)) {
                                                return this.createTokenisationResult(tokenType, this.createExpressionState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND, 0, null, null), stream);
                                            }
                                            else {
                                                return this.createTokenisationResult(tokenType, this.createExpressionState(this.internalState, this.bracketCount - 1, null, null), stream);
                                            }
                                        }
                                        return _super.prototype.tokeniseBracket.call(this, tokenType, c, stream);
                                    };
                                    /**
                                     * Handle strings after <strong>WHEN THEN ELSE</strong> but not <strong>CASE</strong>.<br/>
                                     * Also handle string after AS keyword and handle column names that are a string.
                                     */
                                    SqlExpressionState.prototype.getStateAfterString = function () {
                                        if (SqlExpressionState.isSqlNnsState(this.internalState)) {
                                            return this.createExpressionStateMinimal(SqlExpressionState.getSqlNnsFoundState(this.internalState));
                                        }
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_AS || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LABEL || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_LABEL_EQ) {
                                            return this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                        }
                                        return _super.prototype.getStateAfterString.call(this);
                                    };
                                    /**
                                     * Handle string identifier after <strong>WHEN THEN ELSE CASE</strong>.
                                     */
                                    SqlExpressionState.prototype.getStateAfterIdentifierString = function () {
                                        if (SqlExpressionState.isSqlNnsState(this.internalState)) {
                                            return this.createExpressionStateMinimal(SqlExpressionState.getSqlNnsFoundState(this.internalState));
                                        }
                                        return _super.prototype.getStateAfterIdentifierString.call(this);
                                    };
                                    SqlExpressionState.prototype.tokeniseMacroVariable = function (tokenType, stream) {
                                        var nextInternalState = this.internalState;
                                        if (SqlExpressionState.isSqlNnsState(this.internalState)) {
                                            nextInternalState = SqlExpressionState.getSqlNnsFoundState(this.internalState);
                                        }
                                        else if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS) {
                                            nextInternalState = state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND;
                                        }
                                        if (nextInternalState != this.internalState) {
                                            return this.createTokenisationResult(tokenType, this.createExpressionStateMinimal(nextInternalState), stream);
                                        }
                                        return _super.prototype.tokeniseMacroVariable.call(this, tokenType, stream);
                                    };
                                    SqlExpressionState.prototype.getName = function () {
                                        return "SqlExpressionState";
                                    };
                                    return SqlExpressionState;
                                }(WhereStatementState));
                                sql.SqlExpressionState = SqlExpressionState;
                            })(sql = state.sql || (state.sql = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var sql;
                            (function (sql) {
                                var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                                var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                                var BracketBooleanExpressionState = com.wpc.wps.language.context.tokenisation.state.BracketBooleanExpressionState;
                                /**
                                 * State to tokenise BTRIM in SQL select. Format: BTRIM ([[spec] [char] FROM] &lt;column name>).<br/>
                                 * spec can be LEADING/TRAILING/BOTH
                                 *
                                 * @author ml
                                 */
                                var BtrimFunctionState = /** @class */ (function (_super) {
                                    __extends(BtrimFunctionState, _super);
                                    function BtrimFunctionState(statementParentState, parent, nextState, bracketCount, conditionState, prevIdentifier, component) {
                                        if (conditionState === void 0) { conditionState = state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM; }
                                        if (prevIdentifier === void 0) { prevIdentifier = null; }
                                        if (component === void 0) { component = null; }
                                        var _this = _super.call(this, statementParentState, parent, nextState, bracketCount, conditionState, prevIdentifier, component) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StateWithInternalState"] });
                                        return _this;
                                    }
                                    BtrimFunctionState.prototype.getParent = function () {
                                        return _super.prototype.getParent.call(this);
                                    };
                                    BtrimFunctionState.prototype.createExpressionState = function (newConditionState, bracketCount, prevIdentifier, component) {
                                        return new BtrimFunctionState(this.statementParentState, this.getParent(), this.nextState, bracketCount, newConditionState, prevIdentifier, component);
                                    };
                                    /**
                                     * Handle the LEADING / TRAILING / BOTH / FROM keywords
                                     */
                                    BtrimFunctionState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                        var result = new state.AssignmentExpressionState.InternalTokenisationResult(this.internalState, TokenType.identifier);
                                        switch ((identifier)) {
                                            case SasLanguage.LEADING:
                                            case SasLanguage.TRAILING:
                                            case SasLanguage.BOTH:
                                                if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM) {
                                                    result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_SPEC, TokenType.keyword);
                                                }
                                                break;
                                            case SasLanguage.FROM:
                                                if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_SPEC || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_CHAR) {
                                                    result.setNextInternalStateWithType(state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_FROM, TokenType.keyword);
                                                }
                                                break;
                                            default:
                                                if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_FROM) {
                                                    result.setNextInternalState(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                                }
                                        }
                                        if (result.isHandled()) {
                                            return this.convertInternalTokenisationResult(result, stream);
                                        }
                                        return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                    };
                                    /**
                                     * Handle the string char for BTRIM
                                     */
                                    BtrimFunctionState.prototype.getStateAfterString = function () {
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_SPEC) {
                                            return this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_CHAR);
                                        }
                                        return _super.prototype.getStateAfterString.call(this);
                                    };
                                    /**
                                     * Handle identifier by itself or after FROM.
                                     */
                                    BtrimFunctionState.prototype.getStateAfterIdentifierString = function () {
                                        if (this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM || this.internalState == state.AssignmentExpressionState.AssignmentExpressionInternalState.BTRIM_FROM) {
                                            return this.createExpressionStateMinimal(state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND);
                                        }
                                        return _super.prototype.getStateAfterIdentifierString.call(this);
                                    };
                                    return BtrimFunctionState;
                                }(BracketBooleanExpressionState));
                                sql.BtrimFunctionState = BtrimFunctionState;
                            })(sql = state.sql || (state.sql = {}));
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state_4) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var TokenisationResult = com.wpc.wps.language.context.tokenisation.TokenisationResult;
                            var BracketedExpressionStatementState = com.wpc.wps.language.context.tokenisation.state.sql.BracketedExpressionStatementState;
                            var CreateIndexStatementState = com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState;
                            var SelectStatementState = com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState;
                            var BasicStateTransitionHelper = /** @class */ (function () {
                                function BasicStateTransitionHelper() {
                                    this.sasLanguageSupporter = null;
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.StateTransitionHelper"] });
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseMajorIdentifier = function (identifier, globalState, currentState) {
                                    var nextState = null;
                                    switch ((identifier)) {
                                        case SasLanguage.PROC:
                                            nextState = new state_4.ProcChooserState(globalState);
                                            break;
                                        case SasLanguage.DATA:
                                            nextState = new state_4.DataNameState(globalState);
                                            break;
                                        case SasLanguage.RUN:
                                            if ((currentState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) && currentState.getCurrentStep().runGroups()) {
                                                nextState = new state_4.TransitionState(globalState, currentState, currentState);
                                            }
                                            else {
                                                nextState = new state_4.TransitionState(globalState, globalState, null);
                                            }
                                            break;
                                        case SasLanguage.QUIT:
                                            nextState = new state_4.TransitionState(globalState, globalState, null);
                                            break;
                                        case SasLanguage.RSUBMIT:
                                            nextState = new state_4.TransitionState(globalState, globalState, null);
                                            break;
                                        case SasLanguage.ENDRSUBMIT:
                                            nextState = new state_4.TransitionState(globalState, globalState, null);
                                            break;
                                        case SasLanguage.MACRO:
                                            nextState = new state_4.MacroNameState(currentState, true);
                                            break;
                                    }
                                    return nextState;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseGlobalStatement = function (identifier, statementParentState, currentState) {
                                    var nextState = null;
                                    var si = this.sasLanguageSupporter.getGlobal(identifier);
                                    if (si == null) {
                                        if (SasLanguage.isNumberedIdentifier(identifier)) {
                                            var truncatedName = SasLanguage.truncateNumberedIdentifier(identifier);
                                            si = this.sasLanguageSupporter.getGlobal(truncatedName);
                                            if (si != null && !si.isNumbered()) {
                                                si = null;
                                            }
                                        }
                                    }
                                    if (si != null) {
                                        if ((SasLanguage.OPTIONS === identifier) || ("OPTION" === identifier)) {
                                            nextState = new state_4.OptionsStatementState(statementParentState, currentState, si);
                                        }
                                        else if ((SasLanguage.LIBNAME === identifier)) {
                                            nextState = new state_4.LibnameState(statementParentState, currentState, currentState, si);
                                        }
                                        else {
                                            nextState = new state_4.StatementState(statementParentState, currentState, null, si);
                                        }
                                    }
                                    return nextState;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseDataStatement = function (identifier, statementParentState) {
                                    var languageInfo = this.sasLanguageSupporter.getDataStep().getLanguageInfo().getStatement(identifier);
                                    if (languageInfo != null) {
                                        return new state_4.StatementState(statementParentState, statementParentState, null, languageInfo);
                                    }
                                    return null;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseExpressions = function (identifier, statementParentState, currentState) {
                                    var nextState = null;
                                    switch ((identifier)) {
                                        case SasLanguage.IF:
                                            nextState = new state_4.IfStatementState(statementParentState, currentState);
                                            break;
                                        case SasLanguage.DO:
                                            nextState = new state_4.DoExpressionState(statementParentState);
                                            break;
                                        case SasLanguage.SELECT:
                                            nextState = new state_4.SelectExpressionState(statementParentState, currentState);
                                            break;
                                        case SasLanguage.WHERE:
                                            nextState = new state_4.WhereStatementState(statementParentState, currentState);
                                            break;
                                        case SasLanguage.END:
                                            nextState = new state_4.TransitionState(statementParentState, statementParentState, null);
                                            break;
                                        case SasLanguage.WHEN:
                                            nextState = new state_4.BracketBooleanExpressionState(statementParentState, currentState, currentState);
                                            break;
                                        case SasLanguage.CALL:
                                            nextState = new state_4.CallRoutineChooserState(statementParentState, currentState);
                                            break;
                                        case SasLanguage.OTHERWISE:
                                        case SasLanguage.ELSE:
                                            nextState = statementParentState;
                                            break;
                                        case SasLanguage.DECLARE:
                                        case SasLanguage.DCL:
                                            nextState = new state_4.ComponentChooserState(statementParentState, currentState);
                                            break;
                                        case SasLanguage.ARRAY:
                                            if (statementParentState != null && statementParentState["__interfaces"] != null && statementParentState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState") >= 0) {
                                                nextState = new state_4.ArrayNameState(statementParentState);
                                            }
                                            break;
                                        case SasLanguage.RETURN:
                                            nextState = new state_4.AssignmentExpressionState(statementParentState, statementParentState, state_4.AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER, state_4.AssignmentExpressionState.AssignmentExpressionInternalState.NNS, null, null);
                                            break;
                                    }
                                    return nextState;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseCardsExpressions = function (identifier, globalState) {
                                    var endString = null;
                                    switch ((identifier)) {
                                        case SasLanguage.CARDS:
                                        case SasLanguage.DATALINES:
                                            endString = SasLanguage.asString(SasLanguage.SEMI_COLON);
                                            break;
                                        case SasLanguage.CARDS4:
                                        case SasLanguage.DATALINES4:
                                            endString = SasLanguage.SEMI_COLON4;
                                            break;
                                    }
                                    if (endString != null) {
                                        return new state_4.TransitionState(globalState, globalState, new state_4.DatalinesState(globalState, endString));
                                    }
                                    return null;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseLabel = function (identifier, statementParentState, stream) {
                                    var offset = stream.getOffset();
                                    try {
                                        stream.skipSpace();
                                        if (stream.available() > 0 && stream.peek() == SasLanguage.COLON) {
                                            return new state_4.LabelState(statementParentState);
                                        }
                                    }
                                    finally {
                                        stream.setOffset(offset);
                                    }
                                    ;
                                    return null;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseLineCommentFromOperator = function (c, parent) {
                                    if (c == SasLanguage.LINE_COMMENT_START) {
                                        return new TokenisationResult(TokenType.comment, new state_4.StatementCommentState(parent));
                                    }
                                    return null;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseIdentifierAfterMacro = function (identifier, statementParentState, globalState, state, stream) {
                                    var tokenType = null;
                                    var nextState = this.tokeniseCardsExpressions(identifier, globalState);
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.tokeniseExpressions(identifier, statementParentState, state);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.tokeniseDataStatement(identifier, statementParentState);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.major_keyword;
                                        nextState = this.tokeniseMajorIdentifier(identifier, globalState, state);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        nextState = this.tokeniseGlobalStatement(identifier, statementParentState, state);
                                    }
                                    if (nextState == null) {
                                        tokenType = TokenType.keyword;
                                        var statementMap = this.sasLanguageSupporter.searchForStatement(identifier);
                                        for (var it = statementMap.entryCollection().iterator(); it.hasNext();) {
                                            var next = it.next();
                                            var proc = this.sasLanguageSupporter.getProcStep(next.getKey());
                                            nextState = new state_4.StatementState(statementParentState, state, new state_4.ProcStepState(globalState, proc), next.getValue());
                                            break;
                                        }
                                    }
                                    return nextState != null && (statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) ? this.createTokenisationResultForAssignment(statementParentState, tokenType, nextState, stream) : null;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.tokeniseOperatorAfterMacro = function (operator, statementParentState, stream) {
                                    var assignmentExpressionState = new state_4.AssignmentExpressionState(statementParentState, statementParentState, 0, state_4.AssignmentExpressionState.AssignmentExpressionInternalState.MACRO, null, null);
                                    var tr = assignmentExpressionState.tokeniseOperator(TokenType.punctuation, operator, stream);
                                    if (tr.getNextState() == null) {
                                        tr = new TokenisationResult(tr.getTokenType(), assignmentExpressionState);
                                    }
                                    return tr;
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicStateTransitionHelper.prototype.createTokenisationResultForAssignment = function (currentState, tokenType, nextState, stream) {
                                    var statementParentState = currentState.getStatementParentState();
                                    if (currentState instanceof com.wpc.wps.language.context.tokenisation.state.MacroDefinitionState) {
                                        statementParentState = currentState;
                                    }
                                    if (tokenType == TokenType.identifier || tokenType == TokenType.keyword || tokenType == TokenType.major_keyword) {
                                        var startOffset = stream.getOffset();
                                        stream.rewind();
                                        var identifier = currentState.matchIdentifier(stream);
                                        stream.setOffset(startOffset);
                                        var spaceSkipped = stream.skipSpace();
                                        if (spaceSkipped == 0 && (currentState.containsMacroVariableAtCurrentPosition(stream) || this.containsMacroOrComment(currentState, stream))) {
                                            return new TokenisationResult(tokenType);
                                        }
                                        var useIdentifierState = false;
                                        if (stream.eos()) {
                                            useIdentifierState = true;
                                        }
                                        else {
                                            var peek = stream.peek();
                                            var assigment = peek == SasLanguage.EQUALS;
                                            var array = SasLanguage.isBracketOpen(peek) && tokenType != TokenType.keyword;
                                            var addition = peek == SasLanguage.PLUS && !(identifier === SasLanguage.PUT);
                                            var objectDot = peek == SasLanguage.DOT && spaceSkipped == 0;
                                            if (assigment || array || objectDot || addition) {
                                                tokenType = TokenType.identifier;
                                                useIdentifierState = true;
                                            }
                                        }
                                        if (useIdentifierState) {
                                            var stateIfNotAssignment = nextState != null ? nextState : currentState;
                                            nextState = new state_4.IdentifierState(statementParentState, currentState, stateIfNotAssignment, identifier);
                                        }
                                        stream.setOffset(startOffset);
                                    }
                                    else if (tokenType == TokenType.macro_variable) {
                                        nextState = new state_4.AssignmentExpressionState(statementParentState, currentState, state_4.AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER, state_4.AssignmentExpressionState.AssignmentExpressionInternalState.MACRO, null, null);
                                    }
                                    else if (tokenType == TokenType.macro_invocation) {
                                        nextState = new state_4.AssignmentExpressionState(statementParentState, currentState, state_4.AbstractExpressionState.INITIAL_BRACKETCOUNT_ON_IDENTIFIER, state_4.AssignmentExpressionState.AssignmentExpressionInternalState.MACRO, null, null);
                                        nextState = new state_4.MacroInvocationExpressionState(currentState, nextState);
                                    }
                                    return new TokenisationResult(tokenType, nextState);
                                };
                                /**
                                 * Check for a macro or statement comment in the stream, e.g. %a or %*
                                 *
                                 * @param stream
                                 * @return
                                 */
                                BasicStateTransitionHelper.prototype.containsMacroOrComment = function (currentState, stream) {
                                    var result = false;
                                    if (!stream.eos()) {
                                        var offset = stream.getOffset();
                                        try {
                                            var c = stream.next();
                                            if (c == SasLanguage.PERCENT) {
                                                if (!stream.eos() && stream.peek() == SasLanguage.ASTERISK) {
                                                    result = true;
                                                }
                                                else {
                                                    var macroIdentifier = currentState.matchIdentifier(stream);
                                                    result = macroIdentifier != null;
                                                }
                                            }
                                        }
                                        finally {
                                            stream.setOffset(offset);
                                        }
                                        ;
                                    }
                                    return result;
                                };
                                BasicStateTransitionHelper.prototype.getSqlStatementState = function (statementParentState, statementLangInfo) {
                                    if (statementLangInfo != null) {
                                        var statementName = statementLangInfo.getName();
                                        switch ((statementName)) {
                                            case SasLanguage.EXECUTE:
                                                return new BracketedExpressionStatementState(statementParentState, statementLangInfo, 0);
                                            case SasLanguage.SELECT:
                                                return new SelectStatementState(statementParentState, statementParentState, null, statementLangInfo);
                                            default:
                                        }
                                    }
                                    return null;
                                };
                                BasicStateTransitionHelper.prototype.getSqlStatementStateFromStatementState = function (statementParentState, parent, currentStatement, statementLangInfo) {
                                    if (statementLangInfo != null) {
                                        var statementName = statementLangInfo.getName();
                                        if (currentStatement != null && (SasLanguage.CREATE === currentStatement.getName())) {
                                            switch ((statementName)) {
                                                case SasLanguage.UNIQUE:
                                                case SasLanguage.INDEX:
                                                    return new CreateIndexStatementState(statementParentState, parent, statementLangInfo);
                                                default:
                                            }
                                        }
                                    }
                                    return null;
                                };
                                return BasicStateTransitionHelper;
                            }());
                            state_4.BasicStateTransitionHelper = BasicStateTransitionHelper;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state_5) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * Main implementation of {@link FunctionHelper}.
                             *
                             * @author ml
                             */
                            var BasicFunctionHelper = /** @class */ (function () {
                                function BasicFunctionHelper() {
                                    this.sasLanguageSupporter = null;
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.FunctionHelper"] });
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                BasicFunctionHelper.prototype.getFunctionLanguageInfo = function (caller, identifier) {
                                    var arrayNames;
                                    var ads;
                                    if ((ads = this.locateArrayDefinitionState(caller)) != null && (arrayNames = ads.getDefinedArrayNames()) != null && arrayNames.contains(identifier)) {
                                        return null;
                                    }
                                    var result = null;
                                    if (this.sasLanguageSupporter != null) {
                                        result = this.sasLanguageSupporter.getFunction(identifier);
                                        if (result == null && SasLanguage.isNumberedIdentifier(identifier)) {
                                            var truncatedName = SasLanguage.truncateNumberedIdentifier(identifier);
                                            result = this.sasLanguageSupporter.getFunction(truncatedName);
                                            if (result != null && !result.isNumbered()) {
                                                result = null;
                                            }
                                        }
                                        var statementParentState = caller.getStatementParentState();
                                        if (result == null && (statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.ProcImlStepState)) {
                                            result = this.sasLanguageSupporter.getImlFunction(identifier);
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * Check if an {@link ITokenisationState} implements {@link ArrayDefinitionState}: recursively checks
                                 * the parent.
                                 *
                                 * @param state
                                 * @return the first implementation of {@link ArrayDefinitionState}.
                                 */
                                BasicFunctionHelper.prototype.locateArrayDefinitionState = function (state) {
                                    if (state != null && state["__interfaces"] != null && state["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState") >= 0) {
                                        return state;
                                    }
                                    if (state instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) {
                                        return this.locateArrayDefinitionState(state.parent);
                                    }
                                    return null;
                                };
                                return BasicFunctionHelper;
                            }());
                            state_5.BasicFunctionHelper = BasicFunctionHelper;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State to handle option values for PROC ACCESS/DBLOAD DBMS=. Looks up the library engine. Alters the
                             * ProcAccessStepState so that it knows about which library is being used and it can then recognise
                             * library
                             * specific statements.
                             *
                             * @author ml
                             */
                            var ProcAccessDbloadDbmsOptionValueState = /** @class */ (function (_super) {
                                __extends(ProcAccessDbloadDbmsOptionValueState, _super);
                                /**
                                 * Full constructor
                                 *
                                 * @param statementParentState
                                 * @param parent the {@link ProcAccessDbloadOptionsState} that created this state.
                                 * @param optionsState - The options state for which this state holds the value for. TYpically used
                                 * as our next state.
                                 * @param optionLanguageInfo - Nullable. The language info linked to our option.
                                 * @param bracketCount
                                 * @param internalState
                                 */
                                function ProcAccessDbloadDbmsOptionValueState(statementParentState, parent, optionsState, optionLanguageInfo, bracketCount, internalState) {
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    if (internalState === void 0) { internalState = null; }
                                    var _this = _super.call(this, statementParentState, parent, optionsState, optionLanguageInfo, bracketCount, internalState) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                ProcAccessDbloadDbmsOptionValueState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * Create a copy of this state with a different bracket count.
                                 *
                                 * @param nextBracketCount
                                 * @return
                                 */
                                ProcAccessDbloadDbmsOptionValueState.prototype.createOptionValueStateNextBracketCount = function (nextBracketCount) {
                                    return new ProcAccessDbloadDbmsOptionValueState(this.statementParentState, this.getParent(), this.nextState, this.optionLanguageInfo, nextBracketCount, this.internalState);
                                };
                                /**
                                 * Create a copy of this state with a different {@link InternalState}.
                                 *
                                 * @param nextInternalState {@link InternalState} to set
                                 * @return new instance of {@link ProcAccessDbloadDbmsOptionValueState}
                                 */
                                ProcAccessDbloadDbmsOptionValueState.prototype.createOptionValueStateInternalState = function (nextInternalState) {
                                    return new ProcAccessDbloadDbmsOptionValueState(this.statementParentState, this.getParent(), this.nextState, this.optionLanguageInfo, this.bracketCount, nextInternalState);
                                };
                                /**
                                 * Look up the library and then return to {@link ProcAccessDbloadOptionsState} with its nextState set
                                 * to
                                 * {@link ProcAccessDbloadStepState} whose libraryLanguageInfo has been set.
                                 */
                                ProcAccessDbloadDbmsOptionValueState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var tokenType = TokenType.identifier;
                                    var libraryEngine = this.getSasLanguageSupporter().getLibraryEngine(identifier);
                                    var result = this.createTokenisationResult(tokenType, this.getParent().createProcAccessDbloadOptionsState(libraryEngine), stream);
                                    return result;
                                };
                                ProcAccessDbloadDbmsOptionValueState.prototype.getName = function () {
                                    return "ProcAccessDbmsOptionValueState";
                                };
                                return ProcAccessDbloadDbmsOptionValueState;
                            }(state.OptionValueState));
                            state.ProcAccessDbloadDbmsOptionValueState = ProcAccessDbloadDbmsOptionValueState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            /**
                             * For PROC ACCESS/DBLOAD options: subclassed to have special handling of DBMS option:
                             * {@link ProcAccessDbloadDbmsOptionValueState} is used when that option is encountered.
                             *
                             * @author ml
                             */
                            var ProcAccessDbloadOptionsState = /** @class */ (function (_super) {
                                __extends(ProcAccessDbloadOptionsState, _super);
                                function ProcAccessDbloadOptionsState(parent, stepState, stepInfo, option, bracketCount) {
                                    if (option === void 0) { option = null; }
                                    if (bracketCount === void 0) { bracketCount = 0; }
                                    var _this = _super.call(this, parent, stepState, stepInfo, option, bracketCount) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                ProcAccessDbloadOptionsState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                ProcAccessDbloadOptionsState.prototype.getNextState = function () {
                                    return _super.prototype.getNextState.call(this);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcAccessDbloadOptionsState.prototype.createStepOptionsState = function (newOption, newBracketCount) {
                                    return new ProcAccessDbloadOptionsState(this.getParent(), this.nextState, this.stepInfo, newOption, newBracketCount);
                                };
                                /**
                                 * Create an instance of {@link ProcAccessDbloadOptionsState} where the next state
                                 * {@link ProcAccessDbloadStepState} has been copied but with the {@link LanguageInfo} for the
                                 * library
                                 * engine set.
                                 *
                                 * @param libraryEngine
                                 * @return
                                 */
                                ProcAccessDbloadOptionsState.prototype.createProcAccessDbloadOptionsState = function (libraryEngine) {
                                    return new ProcAccessDbloadOptionsState(this.getParent(), this.getNextState().createProcAccessStepState(libraryEngine), this.stepInfo, this.option, this.bracketCount);
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden to get the DBMS option for special handling.
                                 */
                                ProcAccessDbloadOptionsState.prototype.createOptionValueState = function (optionLanguageInfo) {
                                    if ((SasLanguage.DBMS === this.option)) {
                                        return new state.ProcAccessDbloadDbmsOptionValueState(this.statementParentState, this, this.nextState, optionLanguageInfo);
                                    }
                                    return _super.prototype.createOptionValueState.call(this, optionLanguageInfo);
                                };
                                ProcAccessDbloadOptionsState.prototype.getName = function () {
                                    return "ProcAccessDbloadOptionsState";
                                };
                                return ProcAccessDbloadOptionsState;
                            }(state.ProcOptionsState));
                            state.ProcAccessDbloadOptionsState = ProcAccessDbloadOptionsState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * Handle PROC ACCESS/DBLOAD: uses the Library options depending on the library set in the options (if
                             * any)
                             *
                             * @author ml
                             */
                            var ProcAccessDbloadStepState = /** @class */ (function (_super) {
                                __extends(ProcAccessDbloadStepState, _super);
                                function ProcAccessDbloadStepState(parent, currentStep, definedArrayNames, definedComponents, libraryLangInfo, afterMacro) {
                                    if (definedArrayNames === void 0) { definedArrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (libraryLangInfo === void 0) { libraryLangInfo = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, currentStep, definedArrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    _this.libraryLangInfo = libraryLangInfo;
                                    return _this;
                                }
                                ProcAccessDbloadStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new ProcAccessDbloadStepState(parent, currentStep, definedArrayNames, definedComponents, this.libraryLangInfo, this.afterMacro);
                                };
                                ProcAccessDbloadStepState.prototype.copyStatementParentStateSetAfterMacro = function (newAfterMacro) {
                                    return new ProcAccessDbloadStepState(this.getParent(), this.getCurrentStep(), this.definedArrayNames, this.definedComponents, this.libraryLangInfo, newAfterMacro);
                                };
                                /**
                                 * Create a copy of this class with the {@link #libraryLangInfo} set.
                                 *
                                 * @param libraryEngine
                                 * @return
                                 */
                                ProcAccessDbloadStepState.prototype.createProcAccessStepState = function (libraryEngine) {
                                    return new ProcAccessDbloadStepState(this.getParent(), this.currentStep, this.definedArrayNames, this.definedComponents, libraryEngine, this.afterMacro);
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden to check for Library statements.
                                 */
                                ProcAccessDbloadStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var libOption = this.libraryLangInfo != null ? this.libraryLangInfo.getOption(identifier) : null;
                                    if (libOption != null) {
                                        return this.createTokenisationResult(TokenType.keyword, new state.LibnameOptionsState(this, libOption), stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                ProcAccessDbloadStepState.prototype.getName = function () {
                                    return "ProcAccessDbloadStepState";
                                };
                                ProcAccessDbloadStepState.prototype.getFieldsString = function () {
                                    return "libraryLangInfo=" + this.libraryLangInfo + ", " + _super.prototype.getFieldsString.call(this);
                                };
                                return ProcAccessDbloadStepState;
                            }(state.ProcStepState));
                            state.ProcAccessDbloadStepState = ProcAccessDbloadStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * Special state for handling the COPY statement in PROC DATASETS: the COPY
                             * statement may be followed by a SELECT or EXCLUDE statement, the SELECT is not
                             * handled like a normal SELECT statement either.
                             *
                             * @author ml
                             */
                            var ProcDatasetsCopyStatementState = /** @class */ (function (_super) {
                                __extends(ProcDatasetsCopyStatementState, _super);
                                function ProcDatasetsCopyStatementState(parent, currentStatement, semicolonFound) {
                                    if (semicolonFound === void 0) { semicolonFound = false; }
                                    var _this = _super.call(this, parent, parent, parent, currentStatement) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.semicolonFound = semicolonFound;
                                    return _this;
                                }
                                ProcDatasetsCopyStatementState.prototype.getParent = function () {
                                    return _super.prototype.getParent.call(this);
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden to look for SELECT or EXCLUDE after the COPY statement has
                                 * ended, in the event that it's not found, rewind and return to
                                 * ProcStepState.
                                 */
                                ProcDatasetsCopyStatementState.prototype.tokenise = function (stream) {
                                    var result = _super.prototype.tokenise.call(this, stream);
                                    if (this.semicolonFound && result.getTokenType() != null) {
                                        switch ((result.getTokenType())) {
                                            case com.wpc.wps.language.context.tokenisation.TokenType.comment:
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.TokenType.identifier:
                                                stream.rewind();
                                                var identifier = this.matchIdentifier(stream);
                                                if ((SasLanguage.SELECT === identifier) || (SasLanguage.EXCLUDE === identifier)) {
                                                    result = this.createTokenisationResult(TokenType.keyword, new state.StatementState(this.getParent(), this.getParent(), this.getParent(), this.getCurrentStatement()), stream);
                                                    break;
                                                }
                                            default:
                                                stream.rewind();
                                                result = this.createTokenisationResult(null, this.getParent(), stream);
                                        }
                                    }
                                    return result;
                                };
                                /**
                                 * {@inheritDoc}
                                 *
                                 * Overridden to set the semicolonFound boolean.
                                 *
                                 */
                                ProcDatasetsCopyStatementState.prototype.tokeniseSemiColon = function (stream) {
                                    if (!this.semicolonFound) {
                                        return this.createTokenisationResult(TokenType.semicolon, new ProcDatasetsCopyStatementState(this.getParent(), this.getCurrentStatement(), true), stream);
                                    }
                                    return _super.prototype.tokeniseSemiColon.call(this, stream);
                                };
                                ProcDatasetsCopyStatementState.prototype.getFieldsString = function () {
                                    return _super.prototype.getFieldsString.call(this) + "semicolonFound=" + this.semicolonFound + ", ";
                                };
                                ProcDatasetsCopyStatementState.prototype.getName = function () {
                                    return "ProcDatasetsCopyStatementState";
                                };
                                return ProcDatasetsCopyStatementState;
                            }(state.StatementState));
                            state.ProcDatasetsCopyStatementState = ProcDatasetsCopyStatementState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * StepState overridden for special handling of 'submit'
                             *
                             * @author ml
                             */
                            var ProcPythonStepState = /** @class */ (function (_super) {
                                __extends(ProcPythonStepState, _super);
                                function ProcPythonStepState(parent, currentStep, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, currentStep, arrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcPythonStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new ProcPythonStepState(parent, currentStep, definedArrayNames, definedComponents, this.afterMacro);
                                };
                                /**
                                 * {@inheritDoc}
                                 */
                                ProcPythonStepState.prototype.copyStatementParentStateSetAfterMacro = function (newAfterMacro) {
                                    return new ProcPythonStepState(this.getParent(), this.getCurrentStep(), this.definedArrayNames, this.definedComponents, newAfterMacro);
                                };
                                ProcPythonStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    if ((identifier === SasLanguage.SUBMIT)) {
                                        var nextState = new state.TransitionState(this.getParent(), this, new state.PythonBodyState(this));
                                        return this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                ProcPythonStepState.prototype.getName = function () {
                                    return "ProcPythonStepState";
                                };
                                return ProcPythonStepState;
                            }(state.ProcStepState));
                            state.ProcPythonStepState = ProcPythonStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * State for representing Python block comments: &#x201c&#x201d&#x201d
                             */
                            var PythonBlockCommentState = /** @class */ (function (_super) {
                                __extends(PythonBlockCommentState, _super);
                                function PythonBlockCommentState(parent) {
                                    var _this = _super.call(this, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    return _this;
                                }
                                PythonBlockCommentState.prototype.getBlockCommentEnd = function () {
                                    return PythonBlockCommentState.BLOCK_COMMENT_END;
                                };
                                PythonBlockCommentState.prototype.getName = function () {
                                    return "PythonBlockCommentState";
                                };
                                PythonBlockCommentState.BLOCK_COMMENT_END = "\u201c\u201d\u201d";
                                return PythonBlockCommentState;
                            }(state.BlockCommentState));
                            state.PythonBlockCommentState = PythonBlockCommentState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            /**
                             * State for Python. Where the parent is null, it can be used for a standalone Python editor.
                             *
                             * @author ml
                             */
                            var PythonBodyState = /** @class */ (function (_super) {
                                __extends(PythonBodyState, _super);
                                function PythonBodyState(parent) {
                                    var _this = this;
                                    if ((parent instanceof com.wpc.wps.language.context.tokenisation.state.ProcPythonStepState)) {
                                        _this = _super.call(this, parent) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    }
                                    else if (parent == null) {
                                        _this = _super.call(this, null) || this;
                                        Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    }
                                    else
                                        throw new Error('invalid overload');
                                    return _this;
                                }
                                /**
                                 * Overridden to detect the 'ENDSUBMIT' at start of the line (except where the parent is null in
                                 * which case it's a standalone editor so ignore ENDSUBMIT).
                                 *
                                 * Detects Python keywords. Also detects python block comments.
                                 */
                                PythonBodyState.prototype.tokenise = function (stream) {
                                    stream.mark();
                                    if (this.parent != null && stream.getOffset() == 0) {
                                        stream.skipSpace();
                                        var identifier = this.matchIdentifier(stream);
                                        if ((SasLanguage.ENDSUBMIT === identifier)) {
                                            return this.createTokenisationResult(TokenType.keyword, new state.TransitionState(this.getStatementParentState(), this, this.parent), stream);
                                        }
                                        stream.setOffset(0);
                                    }
                                    var identifier = this.matchIdentifierSameCase(stream);
                                    if (identifier != null && PythonBodyState.isKeyword(identifier)) {
                                        return this.createTokenisationResult(TokenType.keyword, null, stream);
                                    }
                                    else if (identifier != null) {
                                        return this.tokeniseIdentifier(identifier, stream);
                                    }
                                    return _super.prototype.tokenise.call(this, stream);
                                };
                                /**
                                 * Overridden for Python comments.
                                 */
                                PythonBodyState.prototype.getBlockCommentStart = function () {
                                    return PythonBodyState.BLOCK_COMMENT_START;
                                };
                                /**
                                 * Overridden for Python comments.
                                 */
                                PythonBodyState.prototype.getBlockCommentState = function () {
                                    return new state.PythonBlockCommentState(this);
                                };
                                /**
                                 * Overridden to include assignment operators &lt;- and &lt;&lt;
                                 * Also check for '#' comments
                                 */
                                PythonBodyState.prototype.tokeniseOperator = function (tokenType, c, stream) {
                                    if (c == '<') {
                                        stream.backup(1);
                                        if (stream.match("<-") == 0 && stream.match("<<-") == 0) {
                                            stream.skip(1);
                                        }
                                    }
                                    if (c == '#') {
                                        return this.createTokenisationResult(TokenType.comment, new state.RCommentState(this), stream);
                                    }
                                    return _super.prototype.tokeniseOperator.call(this, tokenType, c, stream);
                                };
                                /**
                                 * Overridden to stay in this state on semicolons;
                                 */
                                PythonBodyState.prototype.tokeniseSemiColon = function (stream) {
                                    return this.createTokenisationResult(TokenType.semicolon, null, stream);
                                };
                                PythonBodyState.prototype.getName = function () {
                                    return "PythonBodyState";
                                };
                                PythonBodyState.isKeyword = function (s) {
                                    switch ((s)) {
                                        case "and":
                                        case "as":
                                        case "assert":
                                        case "break":
                                        case "class":
                                        case "continue":
                                        case "def":
                                        case "del":
                                        case "elif":
                                        case "else":
                                        case "except":
                                        case "exec":
                                        case "finally":
                                        case "for":
                                        case "from":
                                        case "global":
                                        case "if":
                                        case "import":
                                        case "in":
                                        case "is":
                                        case "lambda":
                                        case "not":
                                        case "or":
                                        case "pass":
                                        case "print":
                                        case "try":
                                        case "raise":
                                        case "return":
                                        case "while":
                                        case "with":
                                        case "yield":
                                            return true;
                                    }
                                    return false;
                                };
                                PythonBodyState.BLOCK_COMMENT_START = "\u201c\u201d\u201d\u201d";
                                return PythonBodyState;
                            }(state.AbstractTokenisationState));
                            state.PythonBodyState = PythonBodyState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                            var ProcSqlStepState = /** @class */ (function (_super) {
                                __extends(ProcSqlStepState, _super);
                                function ProcSqlStepState(parent, currentStep, arrayNames, definedComponents, afterMacro) {
                                    if (arrayNames === void 0) { arrayNames = null; }
                                    if (definedComponents === void 0) { definedComponents = null; }
                                    if (afterMacro === void 0) { afterMacro = false; }
                                    var _this = _super.call(this, parent, currentStep, arrayNames, definedComponents, afterMacro) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ComponentDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState", "com.wpc.wps.language.context.tokenisation.state.ITokenisationState", "com.wpc.wps.language.context.tokenisation.state.StatementParentState"] });
                                    return _this;
                                }
                                ProcSqlStepState.prototype.createStepState = function (parent, currentStep, definedArrayNames, definedComponents) {
                                    return new ProcSqlStepState(parent, currentStep, definedArrayNames, definedComponents, this.afterMacro);
                                };
                                ProcSqlStepState.prototype.copyStatementParentStateSetAfterMacro = function (newAfterMacro) {
                                    return new ProcSqlStepState(this.getParent(), this.getCurrentStep(), this.definedArrayNames, this.definedComponents, newAfterMacro);
                                };
                                ProcSqlStepState.prototype.tokeniseIdentifier = function (identifier, stream) {
                                    var languageInfo = this.getCurrentStep().getLanguageInfo().getStatement(identifier);
                                    var nextState = this.stateTransitionHelper.getSqlStatementState(this, languageInfo);
                                    if (nextState != null) {
                                        return this.createTokenisationResult(TokenType.keyword, nextState, stream);
                                    }
                                    return _super.prototype.tokeniseIdentifier.call(this, identifier, stream);
                                };
                                ProcSqlStepState.prototype.getName = function () {
                                    return "ProcSqlStepState";
                                };
                                return ProcSqlStepState;
                            }(state.ProcStepState));
                            state.ProcSqlStepState = ProcSqlStepState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var tokenisation;
                    (function (tokenisation) {
                        var state;
                        (function (state) {
                            /**
                             * An {@link UnknownStatementState} that occurs when an option in a LIBNAME statement is unknown.
                             */
                            var UnknownLibnameOptionState = /** @class */ (function (_super) {
                                __extends(UnknownLibnameOptionState, _super);
                                function UnknownLibnameOptionState(statementParentState, parent, option) {
                                    var _this = _super.call(this, statementParentState, parent) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.tokenisation.state.ITokenisationState"] });
                                    _this.option = option;
                                    return _this;
                                }
                                UnknownLibnameOptionState.prototype.getOption = function () {
                                    return this.option;
                                };
                                return UnknownLibnameOptionState;
                            }(state.UnknownStatementState));
                            state.UnknownLibnameOptionState = UnknownLibnameOptionState;
                        })(state = tokenisation.state || (tokenisation.state = {}));
                    })(tokenisation = context.tokenisation || (context.tokenisation = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_2) {
                    var support;
                    (function (support) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var Component = com.wpc.wps.language.context.information.Component;
                        var SasLanguageInfo = com.wpc.wps.language.context.information.SasLanguageInfo;
                        var AbstractSasLanguageSupport_Lua = com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        var SasLanguageSupport_Lua = /** @class */ (function (_super) {
                            __extends(SasLanguageSupport_Lua, _super);
                            function SasLanguageSupport_Lua() {
                                var _this = _super.call(this) || this;
                                _this.transpilableCollections = null;
                                _this.callRoutinesBuilder = null;
                                _this.imlCallRoutinesBuilder = null;
                                _this.componentsBuilder = null;
                                _this.datastepInfosBuilder = null;
                                _this.datasetOptionsBuilder = null;
                                _this.formatsBuilder = null;
                                _this.functionsBuilder = null;
                                _this.globalInfosBuilder = null;
                                _this.imlFunctionsBuilder = null;
                                _this.informatsBuilder = null;
                                _this.libraryEngineBuilder = null;
                                _this.procInformationBuilder = null;
                                _this.systemOptionsBuilder = null;
                                _this.callRoutines = null;
                                _this.imlCallRoutines = null;
                                _this.components = null;
                                _this.datastepInfos = null;
                                _this.datasetOptions = null;
                                _this.formats = null;
                                _this.functions = null;
                                _this.globalInfos = null;
                                _this.informats = null;
                                _this.imlFunctions = null;
                                _this.libraryEngines = null;
                                _this.procInformation = null;
                                _this.systemOptions = null;
                                return _this;
                            }
                            SasLanguageSupport_Lua.prototype.postConstruct = function () {
                                this.componentsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.datastepInfosBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.datasetOptionsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.globalInfosBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.formatsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.functionsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.imlFunctionsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.informatsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.libraryEngineBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.callRoutinesBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.imlCallRoutinesBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.procInformationBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.systemOptionsBuilder = this.transpilableCollections.transpilableListBuilder();
                                this.createCallRoutines();
                                this.callRoutines = this.callRoutinesBuilder.build();
                                this.createImlCallRoutines();
                                this.imlCallRoutines = this.imlCallRoutinesBuilder.build();
                                this.createComponents();
                                this.components = this.componentsBuilder.build();
                                this.createDatasetOptions();
                                this.datasetOptions = this.datasetOptionsBuilder.build();
                                this.createDatastepInfos();
                                this.datastepInfos = this.datastepInfosBuilder.build();
                                this.createFormats();
                                this.formats = this.formatsBuilder.build();
                                this.createFunctions();
                                this.functions = this.functionsBuilder.build();
                                this.createGlobalInfos();
                                this.globalInfos = this.globalInfosBuilder.build();
                                this.createImlFunctions();
                                this.imlFunctions = this.imlFunctionsBuilder.build();
                                this.createInformats();
                                this.informats = this.informatsBuilder.build();
                                this.createLibraryEngines();
                                this.libraryEngines = this.libraryEngineBuilder.build();
                                this.createProcInformation();
                                this.procInformation = this.procInformationBuilder.build();
                                this.createSystemOptions();
                                this.systemOptions = this.systemOptionsBuilder.build();
                            };
                            SasLanguageSupport_Lua.prototype.getGlobalInfos = function () {
                                return this.globalInfos;
                            };
                            SasLanguageSupport_Lua.prototype.getDatastepInfos = function () {
                                return this.datastepInfos;
                            };
                            SasLanguageSupport_Lua.prototype.getProcInformation = function () {
                                return this.procInformation;
                            };
                            SasLanguageSupport_Lua.prototype.getSystemOptions = function () {
                                return this.systemOptions;
                            };
                            SasLanguageSupport_Lua.prototype.getDatasetOptions = function () {
                                return this.datasetOptions;
                            };
                            SasLanguageSupport_Lua.prototype.getFunctions = function () {
                                return this.functions;
                            };
                            SasLanguageSupport_Lua.prototype.getImlFunctions = function () {
                                return this.imlFunctions;
                            };
                            SasLanguageSupport_Lua.prototype.getLibraryEngines = function () {
                                return this.libraryEngines;
                            };
                            SasLanguageSupport_Lua.prototype.getCallRoutines = function () {
                                return this.callRoutines;
                            };
                            SasLanguageSupport_Lua.prototype.getImlCallRoutines = function () {
                                return this.imlCallRoutines;
                            };
                            SasLanguageSupport_Lua.prototype.getFormats = function () {
                                return this.formats;
                            };
                            SasLanguageSupport_Lua.prototype.getInformats = function () {
                                return this.informats;
                            };
                            SasLanguageSupport_Lua.prototype.getComponents = function () {
                                return this.components;
                            };
                            SasLanguageSupport_Lua.prototype.newGlobalInfoBuilder = function (name) {
                                var myInfoBuilder = new SasLanguageSupport_Lua.MyInfoBuilder(this.transpilableCollections, this.globalInfosBuilder, name);
                                myInfoBuilder.global = true;
                                return myInfoBuilder;
                            };
                            SasLanguageSupport_Lua.prototype.newDatastepInfoBuilder = function (name) {
                                return new SasLanguageSupport_Lua.MyInfoBuilder(this.transpilableCollections, this.datastepInfosBuilder, name);
                            };
                            SasLanguageSupport_Lua.prototype.newProcInfoBuilder = function (name) {
                                return new SasLanguageSupport_Lua.MyInfoBuilder(this.transpilableCollections, this.procInformationBuilder, name);
                            };
                            SasLanguageSupport_Lua.prototype.newComponentBuilder = function (name) {
                                return new SasLanguageSupport_Lua.MyComponentBuilder(this.transpilableCollections, this.componentsBuilder, name);
                            };
                            SasLanguageSupport_Lua.prototype.newLibraryEngineBuilder = function (name) {
                                return new SasLanguageSupport_Lua.MyLibraryEngineBuilder(this.transpilableCollections, this.libraryEngineBuilder, name);
                            };
                            SasLanguageSupport_Lua.prototype.addCallRoutine = function (str, hidden, platforms) {
                                this.callRoutinesBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, hidden, false));
                            };
                            SasLanguageSupport_Lua.prototype.addImlCallRoutine = function (str, hidden, platforms) {
                                this.imlCallRoutinesBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, hidden, false));
                            };
                            SasLanguageSupport_Lua.prototype.addDatasetOption = function (str, hidden, engine) {
                                this.datasetOptionsBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, hidden, false));
                            };
                            SasLanguageSupport_Lua.prototype.addFormat = function (str, strs, platforms) {
                                this.formatsBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, false, false));
                                this.formatsBuilder.addAll(SasLanguageSupport_Lua.convertToUpperCase(this.transpilableCollections, strs, false, false));
                            };
                            SasLanguageSupport_Lua.prototype.addFunction = function (str, aliases, hidden, platforms, context, numbered) {
                                this.functionsBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, hidden, numbered));
                                this.functionsBuilder.addAll(SasLanguageSupport_Lua.convertToUpperCase(this.transpilableCollections, aliases, hidden, numbered));
                            };
                            SasLanguageSupport_Lua.prototype.addImlFunction = function (str, hidden, platforms) {
                                this.imlFunctionsBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, hidden, false));
                            };
                            SasLanguageSupport_Lua.prototype.addInformat = function (str, strs, platforms) {
                                this.informatsBuilder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, false, false));
                                this.informatsBuilder.addAll(SasLanguageSupport_Lua.convertToUpperCase(this.transpilableCollections, strs, false, false));
                            };
                            SasLanguageSupport_Lua.prototype.addSystemOption = function (name, hidden, platforms, choices, optionType) {
                                var keywords = SasLanguageSupport_Lua.convertToUpperCase(this.transpilableCollections, choices, hidden, false);
                                var langInfo = new SasLanguageInfo.SasLanguageInfoBuilder().setName(name).setHidden(hidden).setTranspilableCollections(this.transpilableCollections).setKeywordsFromCollection(keywords).setOptionType(optionType).build();
                                this.systemOptionsBuilder.add(langInfo);
                            };
                            SasLanguageSupport_Lua.toUpperCaseLanguageInfo = function (str, hidden, numbered) {
                                return str != null ? new SasLanguageInfo.SasLanguageInfoBuilder().setName(str).setHidden(hidden).setNumbered(numbered).build() : null;
                            };
                            /**
                             * Converts the provided
                             *
                             * @param transpilableCollections TODO
                             * @param strs
                             *
                             * @return
                             */
                            SasLanguageSupport_Lua.convertToUpperCase = function (transpilableCollections, strs, hidden, numbered) {
                                var builder = transpilableCollections.transpilableListBuilder();
                                if (strs != null) {
                                    for (var i = 0; i < strs.length; i++) {
                                        builder.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(strs[i], hidden, numbered));
                                    }
                                }
                                return builder.build();
                            };
                            return SasLanguageSupport_Lua;
                        }(AbstractSasLanguageSupport_Lua));
                        support.SasLanguageSupport_Lua = SasLanguageSupport_Lua;
                        (function (SasLanguageSupport_Lua) {
                            /**
                             * Super-type for all {@link Builder}s.
                             */
                            var AbstractBuilder = /** @class */ (function () {
                                function AbstractBuilder(transpilableCollections, name) {
                                    Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder"] });
                                    this.transpilableCollections = transpilableCollections;
                                    this.name = name.toUpperCase();
                                }
                                AbstractBuilder.prototype.getName = function () {
                                    return this.name;
                                };
                                return AbstractBuilder;
                            }());
                            SasLanguageSupport_Lua.AbstractBuilder = AbstractBuilder;
                            /**
                             * Inner abstract class as super-type of other builders for building {@link LanguageInfo} objects.
                             */
                            var AbstractLanguageInfoBuilder = /** @class */ (function (_super) {
                                __extends(AbstractLanguageInfoBuilder, _super);
                                function AbstractLanguageInfoBuilder(transpilableCollections, name) {
                                    var _this = _super.call(this, transpilableCollections, name) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder"] });
                                    _this.optionBuilders = transpilableCollections.transpilableListBuilder();
                                    _this.aliasBuilder = transpilableCollections.transpilableListBuilder();
                                    return _this;
                                }
                                AbstractLanguageInfoBuilder.prototype.build = function () {
                                    return this.createLanguageInfo(this.name);
                                };
                                AbstractLanguageInfoBuilder.prototype.addOption = function (name, type, hidden) {
                                    var index = name.indexOf(SasLanguage.FORWARD_SLASH);
                                    if (index > 0) {
                                        var actualName = name.substring(index + 1);
                                        var alias = name.substring(0, index);
                                        var optionBuilder = null;
                                        for (var i = this.optionBuilders.build().iterator(); i.hasNext();) {
                                            var next = i.next();
                                            if ((next.name === actualName)) {
                                                optionBuilder = next;
                                                break;
                                            }
                                        }
                                        if (optionBuilder == null) {
                                            optionBuilder = new SasLanguageSupport_Lua.MyOptionBuilder(this.transpilableCollections, actualName, type, hidden);
                                            this.optionBuilders.add(optionBuilder);
                                        }
                                        optionBuilder.addAlias(alias);
                                        return optionBuilder;
                                    }
                                    var result = new SasLanguageSupport_Lua.MyOptionBuilder(this.transpilableCollections, name, type, hidden);
                                    this.optionBuilders.add(result);
                                    return result;
                                };
                                AbstractLanguageInfoBuilder.prototype.aliases = function (aliases) {
                                    for (var i = 0; i < aliases.length; i++) {
                                        this.aliasBuilder.add(aliases[i]);
                                    }
                                    return this;
                                };
                                AbstractLanguageInfoBuilder.prototype.addAlias = function (alias) {
                                    this.aliasBuilder.add(alias);
                                };
                                AbstractLanguageInfoBuilder.prototype.isNumbered = function () {
                                    return false;
                                };
                                AbstractLanguageInfoBuilder.prototype.isGlobal = function () {
                                    return false;
                                };
                                AbstractLanguageInfoBuilder.prototype.isRunGroups = function () {
                                    return false;
                                };
                                AbstractLanguageInfoBuilder.prototype.allowsAssignment = function () {
                                    return false;
                                };
                                /**
                                 * Builds options and their aliases and choices.
                                 * Aliases are stored as a duplicate option but instead using the alias name as the name.
                                 * Choices are stored as options within the options {@link LanguageInfo}.
                                 *
                                 * @return List of {@link LanguageInfo}s representing the options.
                                 */
                                AbstractLanguageInfoBuilder.prototype.buildOptions = function () {
                                    var allOptionBuilders = this.optionBuilders.build();
                                    var options = this.transpilableCollections.transpilableListBuilder();
                                    var buildersIterator = allOptionBuilders.iterator();
                                    while ((buildersIterator.hasNext())) {
                                        var currBuilder = buildersIterator.next();
                                        var option = currBuilder.build();
                                        options.add(option);
                                        var aliases = currBuilder.buildAliases();
                                        var aliasesIterator = aliases.iterator();
                                        while ((aliasesIterator.hasNext())) {
                                            var liAlias = aliasesIterator.next();
                                            options.add(liAlias);
                                        }
                                        ;
                                    }
                                    ;
                                    return options.build();
                                };
                                AbstractLanguageInfoBuilder.prototype.buildKeywords = function () {
                                    return null;
                                };
                                AbstractLanguageInfoBuilder.prototype.buildStatements = function () {
                                    return null;
                                };
                                AbstractLanguageInfoBuilder.prototype.buildProperties = function () {
                                    return null;
                                };
                                /**
                                 * Builds aliases by producing a list of {@link LanguageInfo}s that are duplicates of 'this' but
                                 * with their own unique name.
                                 *
                                 * @return List of LanguageInfos holding aliases of 'this'.
                                 */
                                AbstractLanguageInfoBuilder.prototype.buildAliases = function () {
                                    var result = this.transpilableCollections.transpilableListBuilder();
                                    var aliases = this.aliasBuilder.build();
                                    for (var it = aliases.iterator(); it.hasNext();) {
                                        result.add(this.createLanguageInfo(it.next()));
                                    }
                                    return result.build();
                                };
                                /**
                                 * Creates a new {@link SasLanguageInfo}. Invokes {@link #isHidden()}, {@link #isNumbered()},
                                 * {@link #buildKeywords()}, {@link #buildStatements()},{@link #buildOptions()},
                                 * {@link #buildProperties()}.
                                 *
                                 * @param name - The name.
                                 * @return Created language info.
                                 */
                                AbstractLanguageInfoBuilder.prototype.createLanguageInfo = function (name) {
                                    return this.getSasLanguageInfoBuilder(name).build();
                                };
                                AbstractLanguageInfoBuilder.prototype.getSasLanguageInfoBuilder = function (name) {
                                    return new SasLanguageInfo.SasLanguageInfoBuilder().setName(name).setHidden(this.hidden).setNumbered(this.isNumbered()).setRunGroups(this.isRunGroups()).setAllowsAssignment(this.allowsAssignment()).setTranspilableCollections(this.transpilableCollections).setKeywordsFromCollection(this.buildKeywords()).setStatementsFromCollection(this.buildStatements()).setOptionsFromCollection(this.buildOptions()).setProperties(this.buildProperties()).setGlobal(this.isGlobal());
                                };
                                return AbstractLanguageInfoBuilder;
                            }(SasLanguageSupport_Lua.AbstractBuilder));
                            SasLanguageSupport_Lua.AbstractLanguageInfoBuilder = AbstractLanguageInfoBuilder;
                            /**
                             * implementation of InfoBuilder. It has no parent, so the Generic type of AbstractBuilder is set to
                             * Object so that there are no compiler warnings.
                             */
                            var MyInfoBuilder = /** @class */ (function (_super) {
                                __extends(MyInfoBuilder, _super);
                                function MyInfoBuilder(transpilableCollections, infosBuilder, name) {
                                    var _this = _super.call(this, transpilableCollections, name) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder", "com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.InfoBuilder"] });
                                    _this.infosBuilder = infosBuilder;
                                    _this.numbered = false;
                                    _this.keywords = transpilableCollections.transpilableListBuilder();
                                    _this.nestedStatements = transpilableCollections.transpilableListBuilder();
                                    _this.statementBuilders = transpilableCollections.transpilableListBuilder();
                                    return _this;
                                }
                                /**
                                 * Adds result to the InfosBuilder.
                                 */
                                MyInfoBuilder.prototype.build = function () {
                                    var result = _super.prototype.build.call(this);
                                    var aliases = this.buildAliases();
                                    this.infosBuilder.add(result);
                                    if (aliases != null && aliases.size() > 0) {
                                        this.infosBuilder.addAll(aliases);
                                    }
                                    return result;
                                };
                                MyInfoBuilder.prototype.setNumbered = function (numbered) {
                                    this.numbered = numbered;
                                    return this;
                                };
                                MyInfoBuilder.prototype.setRunGroups = function (runGroups) {
                                    this.runGroups = runGroups;
                                    return this;
                                };
                                MyInfoBuilder.prototype.setAllowsAssignment = function (allowsAssignment) {
                                    this.__allowsAssignment = allowsAssignment;
                                    return this;
                                };
                                MyInfoBuilder.prototype.setHidden = function (hidden) {
                                    this.hidden = hidden;
                                    return this;
                                };
                                MyInfoBuilder.prototype.addKeyword = function (str, hidden, platforms) {
                                    this.keywords.add(SasLanguageSupport_Lua.toUpperCaseLanguageInfo(str, hidden, false));
                                    return this;
                                };
                                MyInfoBuilder.prototype.addStatement = function (key, hidden, platforms) {
                                    var result = new SasLanguageSupport_Lua.MyStatementBuilder(this.transpilableCollections, key.toUpperCase());
                                    result.hidden = hidden;
                                    this.statementBuilders.add(result);
                                    return result;
                                };
                                MyInfoBuilder.prototype.addStatementFromInfoBuilder = function (builder) {
                                    if (builder == this) {
                                        throw new Error("Cannot add Statement to itself");
                                    }
                                    this.nestedStatements.add(builder);
                                    return this;
                                };
                                MyInfoBuilder.prototype.platforms = function (platforms) {
                                    return this;
                                };
                                MyInfoBuilder.prototype.buildStatements = function () {
                                    var allNestedStatementBuilders = this.nestedStatements.build();
                                    var iter = allNestedStatementBuilders.iterator();
                                    var nestBuilder = this.transpilableCollections.transpilableListBuilder();
                                    while ((iter.hasNext())) {
                                        var obj = iter.next().build();
                                        if (obj != null && obj["__interfaces"] != null && obj["__interfaces"].indexOf("com.wpc.wps.language.context.information.LanguageInfo") >= 0) {
                                            nestBuilder.add(obj);
                                        }
                                    }
                                    ;
                                    var allStatementBuilders = this.statementBuilders.build().iterator();
                                    var statementBuilder = this.transpilableCollections.transpilableListBuilder();
                                    while ((allStatementBuilders.hasNext())) {
                                        var currBuilder = allStatementBuilders.next();
                                        var li = currBuilder.build();
                                        statementBuilder.add(li);
                                        statementBuilder.addAll(currBuilder.buildAliases());
                                    }
                                    ;
                                    var statements = statementBuilder.build();
                                    return this.transpilableCollections.join(statements, nestBuilder.build());
                                };
                                MyInfoBuilder.prototype.buildKeywords = function () {
                                    return this.keywords.build();
                                };
                                MyInfoBuilder.prototype.isNumbered = function () {
                                    return this.numbered;
                                };
                                MyInfoBuilder.prototype.isGlobal = function () {
                                    return this.global;
                                };
                                MyInfoBuilder.prototype.isRunGroups = function () {
                                    return this.runGroups;
                                };
                                MyInfoBuilder.prototype.allowsAssignment = function () {
                                    return this.__allowsAssignment;
                                };
                                return MyInfoBuilder;
                            }(SasLanguageSupport_Lua.AbstractLanguageInfoBuilder));
                            SasLanguageSupport_Lua.MyInfoBuilder = MyInfoBuilder;
                            var MyStatementBuilder = /** @class */ (function (_super) {
                                __extends(MyStatementBuilder, _super);
                                function MyStatementBuilder(transpilableCollections, name) {
                                    var _this = _super.call(this, transpilableCollections, name) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.StatementBuilder", "com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder"] });
                                    return _this;
                                }
                                MyStatementBuilder.prototype.aliases = function (aliases) {
                                    return _super.prototype.aliases.call(this, aliases);
                                };
                                MyStatementBuilder.prototype.platforms = function (platforms) {
                                    return this;
                                };
                                return MyStatementBuilder;
                            }(SasLanguageSupport_Lua.AbstractLanguageInfoBuilder));
                            SasLanguageSupport_Lua.MyStatementBuilder = MyStatementBuilder;
                            var MyOptionBuilder = /** @class */ (function (_super) {
                                __extends(MyOptionBuilder, _super);
                                function MyOptionBuilder(transpilableCollections, name, type, hidden) {
                                    var _this = _super.call(this, transpilableCollections, name) || this;
                                    _this.choiceBuilder = _this.transpilableCollections.transpilableMapBuilder();
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.OptionBuilder", "com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder"] });
                                    _this.hidden = hidden;
                                    _this.type = type;
                                    return _this;
                                }
                                MyOptionBuilder.prototype.build = function () {
                                    return this.createLanguageInfo(this.name);
                                };
                                MyOptionBuilder.prototype.aliases = function (aliases) {
                                    return _super.prototype.aliases.call(this, aliases);
                                };
                                MyOptionBuilder.prototype.choices = function (choices) {
                                    if (choices != null) {
                                        var strBuilder = this.transpilableCollections.transpilableSetBuilder();
                                        for (var i = 0; i < choices.length; i++) {
                                            var str = choices[i];
                                            var index = str.indexOf(SasLanguage.FORWARD_SLASH);
                                            if (index > 0) {
                                                strBuilder.add(StringUtils.toUpperCase(str.substring(index + 1)));
                                                strBuilder.add(StringUtils.toUpperCase(str.substring(0, index)));
                                            }
                                            else {
                                                strBuilder.add(StringUtils.toUpperCase(str));
                                            }
                                        }
                                        for (var it = strBuilder.build().iterator(); it.hasNext();) {
                                            var choice = SasLanguageSupport_Lua.toUpperCaseLanguageInfo(it.next(), false, false);
                                            this.choiceBuilder.put(choice.getName(), choice);
                                        }
                                    }
                                    return this;
                                };
                                MyOptionBuilder.prototype.arg_name = function (str) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.platforms = function (platforms) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.since = function (str) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.group = function (name, description) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.defaultBoolean = function (b) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.minInt = function (i) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.maxInt = function (i) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.defaultInt = function (i) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.minLong = function (l) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.maxLong = function (l) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.defaultLong = function (l) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.minDouble = function (d) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.maxDouble = function (d) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.defaultDouble = function (d) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.minLen = function (i) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.maxLen = function (i) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.defaultString = function (str) {
                                    return this;
                                };
                                MyOptionBuilder.prototype.defaultChoice = function (choice) {
                                    return this;
                                };
                                /**
                                 * Overridden to set the keywords from choices
                                 */
                                MyOptionBuilder.prototype.getSasLanguageInfoBuilder = function (name) {
                                    return _super.prototype.getSasLanguageInfoBuilder.call(this, name).setKeywordsMap(this.choiceBuilder.build()).setOptionType(this.type);
                                };
                                return MyOptionBuilder;
                            }(SasLanguageSupport_Lua.AbstractLanguageInfoBuilder));
                            SasLanguageSupport_Lua.MyOptionBuilder = MyOptionBuilder;
                            var MyComponentBuilder = /** @class */ (function (_super) {
                                __extends(MyComponentBuilder, _super);
                                function MyComponentBuilder(transpilableCollections, componentsBuilder, name) {
                                    var _this = _super.call(this, transpilableCollections, name) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder", "com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.ComponentBuilder"] });
                                    _this.componentsBuilder = componentsBuilder;
                                    return _this;
                                }
                                MyComponentBuilder.prototype.setMethods = function (strings) {
                                    this.methods = this.transpilableCollections.transpilableSet(strings);
                                    return this;
                                };
                                MyComponentBuilder.prototype.setAttributes = function (strings) {
                                    this.attributes = this.transpilableCollections.transpilableSet(strings);
                                    return this;
                                };
                                MyComponentBuilder.prototype.build = function () {
                                    var component = new Component(this.name, this.toLanguageInfoMapFromStringCollection(this.methods), this.toLanguageInfoMapFromStringCollection(this.attributes));
                                    this.componentsBuilder.add(component);
                                    return component;
                                };
                                MyComponentBuilder.prototype.toLanguageInfoMapFromStringCollection = function (strs) {
                                    return this.transpilableCollections.buildMapFromCollection(strs, function (s) { return s; }, function (s) { return SasLanguageSupport_Lua.toUpperCaseLanguageInfo(s, false, false); });
                                };
                                MyComponentBuilder.prototype.addOption = function (name, type, hidden) {
                                    return null;
                                };
                                MyComponentBuilder.prototype.aliases = function (strs) {
                                    return null;
                                };
                                MyComponentBuilder.prototype.buildAliases = function () {
                                    return null;
                                };
                                return MyComponentBuilder;
                            }(SasLanguageSupport_Lua.AbstractBuilder));
                            SasLanguageSupport_Lua.MyComponentBuilder = MyComponentBuilder;
                            var MyLibraryEngineBuilder = /** @class */ (function (_super) {
                                __extends(MyLibraryEngineBuilder, _super);
                                function MyLibraryEngineBuilder(transpilableCollections, libraryEngineBuilder, name) {
                                    var _this = _super.call(this, transpilableCollections, name) || this;
                                    Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.LibraryEngineBuilder", "com.wpc.wps.language.context.support.sas.AbstractSasLanguageSupport_Lua.Builder"] });
                                    _this.libraryEngineBuilder = libraryEngineBuilder;
                                    return _this;
                                }
                                MyLibraryEngineBuilder.prototype.build = function () {
                                    var result = _super.prototype.build.call(this);
                                    this.libraryEngineBuilder.add(result);
                                    var aliases = this.buildAliases();
                                    this.libraryEngineBuilder.addAll(aliases);
                                    return result;
                                };
                                MyLibraryEngineBuilder.prototype.addLibnameOption = function (optionName, hidden) {
                                    return this.addOption(optionName, null, hidden);
                                };
                                return MyLibraryEngineBuilder;
                            }(SasLanguageSupport_Lua.AbstractLanguageInfoBuilder));
                            SasLanguageSupport_Lua.MyLibraryEngineBuilder = MyLibraryEngineBuilder;
                        })(SasLanguageSupport_Lua = support.SasLanguageSupport_Lua || (support.SasLanguageSupport_Lua = {}));
                    })(support = context_2.support || (context_2.support = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var support;
                    (function (support) {
                        var SasMacroLanguageInfo = com.wpc.wps.language.context.information.SasMacroLanguageInfo;
                        var SasLanguageSupport_Macro = /** @class */ (function () {
                            function SasLanguageSupport_Macro() {
                                this.transpilableCollections = null;
                                this.macroStatements = null;
                            }
                            SasLanguageSupport_Macro.prototype.postConstruct = function () {
                                var mapBuilder = this.transpilableCollections.transpilableMapBuilder();
                                this.addMacroLanguageInfo(mapBuilder, "LET", true);
                                this.addMacroLanguageInfo(mapBuilder, "GLOBAL", true);
                                this.addMacroLanguageInfo(mapBuilder, "SYSEXEC", true);
                                this.addMacroLanguageInfo(mapBuilder, "TSO", true);
                                this.addMacroLanguageInfo(mapBuilder, "SYSCALL", true);
                                this.addMacroLanguageInfo(mapBuilder, "INCLUDE", true, ["SOURCE2", "SOURCE", "NOSOURCE2", "NOSOURCE", "S2", "ENCODING", "JCLEXCL"]);
                                this.addMacroLanguageInfo(mapBuilder, "ACTIVATE", true);
                                this.addMacroLanguageInfo(mapBuilder, "DEACTIVATE", true);
                                this.addMacroLanguageInfo(mapBuilder, "DEACT", true);
                                this.addMacroLanguageInfo(mapBuilder, "MLIST", true);
                                this.addMacroLanguageInfo(mapBuilder, "DEL", true);
                                this.addMacroLanguageInfo(mapBuilder, "DELETE", true);
                                this.addMacroLanguageInfo(mapBuilder, "PUT", true, ["_ALL_", "_LOCAL_", "_GLOBAL_", "_AUTOMATIC_", "_USER_"]);
                                this.addMacroLanguageInfo(mapBuilder, "SYMDEL", true, ["NOWARN"]);
                                this.addMacroLanguageInfo(mapBuilder, "COPY", true, ["SOURCE", "SRC", "LIBRARY", "LIB", "OUTFILE", "OUT"]);
                                this.addMacroLanguageInfo(mapBuilder, "RUN", true);
                                this.addMacroLanguageInfo(mapBuilder, "SYSLPUT", true, ["_ALL_", "_AUTOMATIC_", "GLOBAL_", "_LOCAL_", "USER_", "LIKE", "REMOTE"]);
                                this.addMacroLanguageInfo(mapBuilder, "SYSRPUT", true);
                                this.addMacroLanguageInfo(mapBuilder, "ABORT", false, ["ABEND", "RETURN"]);
                                this.addMacroLanguageInfo(mapBuilder, "LOCAL", false);
                                this.addMacroLanguageInfo(mapBuilder, "GOTO", false);
                                this.addMacroLanguageInfo(mapBuilder, "GO", false);
                                this.addMacroLanguageInfo(mapBuilder, "RETURN", false);
                                this.addMacroLanguageInfo(mapBuilder, "MACRO", true, ["STMT", "CMD", "DES", "PARMBUFF", "PBUFF", "SOURCE", "SRC", "STORE"]);
                                this.addMacroLanguageInfo(mapBuilder, "MEND", false);
                                this.macroStatements = mapBuilder.build();
                            };
                            SasLanguageSupport_Macro.prototype.getMacroLanguageInfo = function (macroStatementName) {
                                if (macroStatementName != null) {
                                    return this.macroStatements.get(macroStatementName.toUpperCase());
                                }
                                return null;
                            };
                            SasLanguageSupport_Macro.prototype.getMacroStatements = function () {
                                return this.macroStatements;
                            };
                            SasLanguageSupport_Macro.prototype.addMacroLanguageInfo = function (mapBuilder, name, openCode, keywords, macroKeywords) {
                                if (keywords === void 0) { keywords = null; }
                                if (macroKeywords === void 0) { macroKeywords = null; }
                                var result = new SasMacroLanguageInfo.SasMacroLanguageInfoBuilder().setTranspilableCollections(this.transpilableCollections).setName(name).setKeywordsFromArray(keywords).setMacroKeywordsFromArray(macroKeywords).setOpenCode(openCode).build();
                                mapBuilder.put(name, result);
                            };
                            return SasLanguageSupport_Macro;
                        }());
                        support.SasLanguageSupport_Macro = SasLanguageSupport_Macro;
                    })(support = context.support || (context.support = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var support;
                    (function (support) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var BasicSasStepInfo = com.wpc.wps.language.context.information.BasicSasStepInfo;
                        var SasLanguageInfo = com.wpc.wps.language.context.information.SasLanguageInfo;
                        var UnknownStepInfo = com.wpc.wps.language.context.information.UnknownStepInfo;
                        /**
                         * Provides support for the SAS Language based on Lua via {@link LangInfo_Lua}.
                         */
                        var SasLanguageSupport = /** @class */ (function () {
                            function SasLanguageSupport() {
                                this.datastepInfo = null;
                                this.callRoutines = null;
                                this.imlCallRoutines = null;
                                this.components = null;
                                this.datasetOptions = null;
                                this.formats = null;
                                this.functions = null;
                                this.imlFunctions = null;
                                this.informats = null;
                                this.libraryEngines = null;
                                this.procs = null;
                                this.rootStatements = null;
                                this.systemOptions = null;
                                this.callRoutinesMap = null;
                                this.imlCallRoutinesMap = null;
                                this.dataMap = null;
                                this.formatMap = null;
                                this.functionsMap = null;
                                this.globalMap = null;
                                this.imlFunctionsMap = null;
                                this.informatMap = null;
                                this.libraryEngineMap = null;
                                this.procMap = null;
                                this.procStepMap = null;
                                this.systemOptionsMap = null;
                                this.transpilableCollections = null;
                                this.lua = null;
                                this.macro = null;
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.support.SasLanguageSupporter"] });
                            }
                            SasLanguageSupport.prototype.postConstruct = function () {
                                this.rootStatements = this.transpilableCollections.buildListFromArray([SasLanguage.DATA, SasLanguage.PROC, SasLanguage.QUIT, SasLanguage.RUN], function (s) { return new SasLanguageInfo.SasLanguageInfoBuilder().setName(s).build(); });
                                this.procs = this.transpilableCollections.buildListFromCollection(this.lua.getProcInformation(), function (pi) { return new BasicSasStepInfo(pi); });
                                this.procMap = this.transpilableCollections.buildMapFromCollection(this.lua.getProcInformation(), function (pi) { return pi.getName().toUpperCase(); }, function (pi) { return pi; });
                                this.procStepMap = this.transpilableCollections.buildMapFromCollection(this.procs, function (i) { return i.getLanguageInfo().getName(); }, function (i) { return i; });
                                this.globalMap = this.transpilableCollections.buildMapFromCollection(this.lua.getGlobalInfos(), function (i) { return i.getName().toUpperCase(); }, function (i) { return i; });
                                this.dataMap = this.transpilableCollections.buildMapFromCollection(this.lua.getDatastepInfos(), function (i) { return i.getName().toUpperCase(); }, function (i) { return i; });
                                this.formatMap = this.transpilableCollections.buildMapFromCollection(this.lua.getFormats(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.informatMap = this.transpilableCollections.buildMapFromCollection(this.lua.getInformats(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.systemOptionsMap = this.transpilableCollections.buildMapFromCollection(this.lua.getSystemOptions(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.callRoutinesMap = this.transpilableCollections.buildMapFromCollection(this.lua.getCallRoutines(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.imlCallRoutinesMap = this.transpilableCollections.buildMapFromCollection(this.lua.getImlCallRoutines(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.functionsMap = this.transpilableCollections.buildMapFromCollection(this.lua.getFunctions(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.imlFunctionsMap = this.transpilableCollections.buildMapFromCollection(this.lua.getImlFunctions(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.libraryEngineMap = this.transpilableCollections.buildMapFromCollection(this.lua.getLibraryEngines(), function (l) { return l.getName(); }, function (l) { return l; });
                                this.callRoutines = this.lua.getCallRoutines();
                                this.imlCallRoutines = this.lua.getImlCallRoutines();
                                this.datasetOptions = this.lua.getDatasetOptions();
                                var datastepLanguageInfo = new SasLanguageInfo.SasLanguageInfoBuilder().setTranspilableCollections(this.transpilableCollections).setName(SasLanguage.DATA).setAllowsAssignment(true).setStatementsFromCollection(this.lua.getDatastepInfos()).setOptionsFromCollection(this.datasetOptions).build();
                                this.datastepInfo = new BasicSasStepInfo(datastepLanguageInfo, true, true, true, false);
                                this.formats = this.lua.getFormats();
                                this.functions = this.lua.getFunctions();
                                this.imlFunctions = this.lua.getImlFunctions();
                                this.informats = this.lua.getInformats();
                                this.libraryEngines = this.lua.getLibraryEngines();
                                this.systemOptions = this.lua.getSystemOptions();
                                this.components = this.transpilableCollections.buildMapFromCollection(this.lua.getComponents(), function (c) { return c.getName().toUpperCase(); }, function (c) { return c; });
                            };
                            SasLanguageSupport.prototype.getRootStatements = function () {
                                return this.rootStatements;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getDataStep = function () {
                                return this.datastepInfo;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getProcs = function () {
                                return this.procs;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getProcStep = function (procName) {
                                var result = this.procStepMap.get(procName.toUpperCase());
                                if (result == null) {
                                    result = new UnknownStepInfo(new SasLanguageInfo.SasLanguageInfoBuilder().setName(procName).build());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getProc = function (procName) {
                                var result = null;
                                if (procName != null) {
                                    result = this.procMap.get(procName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getGlobals = function () {
                                return this.globalMap;
                            };
                            /**
                             * Get the {@link LanguageInfo} with name matching the input String.
                             *
                             * @param name- The statement name.
                             * @return The info representing 'globalName' or null if none exists.
                             */
                            SasLanguageSupport.prototype.getGlobal = function (globalName) {
                                var result = null;
                                if (globalName != null) {
                                    result = this.globalMap.get(globalName.toUpperCase());
                                }
                                return result;
                            };
                            SasLanguageSupport.prototype.searchForStatement = function (statementName) {
                                var mapBuilder = this.transpilableCollections.transpilableMapBuilder();
                                for (var it = this.procs.iterator(); it.hasNext();) {
                                    var stepInfo = it.next();
                                    var statement = stepInfo.getLanguageInfo().getStatement(statementName);
                                    if (statement != null) {
                                        mapBuilder.put(stepInfo.getLanguageInfo().getName(), statement);
                                    }
                                }
                                return mapBuilder.build();
                            };
                            /**
                             * Get the {@link LanguageInfo} with name matching the input String.
                             *
                             * @param name- The statement name.
                             * @return The info representing 'datastepName' or null if none exists.
                             */
                            SasLanguageSupport.prototype.getData = function (dataStepName) {
                                var result = null;
                                if (dataStepName != null) {
                                    result = this.dataMap.get(dataStepName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getMacroLanguageInfo = function (name) {
                                return this.macro.getMacroLanguageInfo(name.toUpperCase());
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getMacroStatements = function () {
                                return this.macro.getMacroStatements();
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getCallRoutines = function () {
                                return this.callRoutines;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getCallRoutine = function (routineName) {
                                var result = null;
                                if (routineName != null) {
                                    result = this.callRoutinesMap.get(routineName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getImlCallRoutines = function () {
                                return this.imlCallRoutines;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getImlCallRoutine = function (routineName) {
                                var result = null;
                                if (routineName != null) {
                                    result = this.imlCallRoutinesMap.get(routineName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getDatasetOptions = function () {
                                return this.datasetOptions;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getFormats = function () {
                                return this.formats;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getFormat = function (formatName) {
                                var result = null;
                                if (formatName != null) {
                                    result = this.formatMap.get(formatName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getFunction = function (functionName) {
                                var result = null;
                                if (functionName != null) {
                                    result = this.functionsMap.get(functionName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getFunctions = function () {
                                return this.functions;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getImlFunction = function (functionName) {
                                var result = null;
                                if (functionName != null) {
                                    result = this.imlFunctionsMap.get(functionName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getImlFunctions = function () {
                                return this.imlFunctions;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getInformat = function (informatName) {
                                var result = null;
                                if (informatName != null) {
                                    result = this.informatMap.get(informatName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getInformats = function () {
                                return this.informats;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getLibraryEngines = function () {
                                return this.libraryEngines;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getLibraryEngine = function (engineName) {
                                var result = null;
                                if (engineName != null) {
                                    result = this.libraryEngineMap.get(engineName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getSystemOption = function (optionName) {
                                var result = null;
                                if (optionName != null) {
                                    result = this.systemOptionsMap.get(optionName.toUpperCase());
                                }
                                return result;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            SasLanguageSupport.prototype.getSystemOptions = function () {
                                return this.systemOptions;
                            };
                            SasLanguageSupport.prototype.getComponent = function (s) {
                                return this.components.get(s);
                            };
                            SasLanguageSupport.prototype.getComponents = function () {
                                return this.components;
                            };
                            return SasLanguageSupport;
                        }());
                        support.SasLanguageSupport = SasLanguageSupport;
                    })(support = context.support || (context.support = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Provides convenience method sfor executing common lambda expression.
                         * Note: Creating a concrete class that implements java.util.function.Function will not transpile, hence
                         * the creation of this helper class for common expressions.
                         *
                         * @author Nick Robson [nr]
                         */
                        var LambdaExpressionHelper = /** @class */ (function () {
                            function LambdaExpressionHelper() {
                            }
                            /**
                             * Builds a List of {@link Proposal}s, using a lamba expression, from a collection of
                             * {@link LanguageInfo}s. Only {@link LanguageInfo}s that are not hidden are included in the output.
                             *
                             * @param transpilableCollections - The collections factory.
                             * @param languageInfos - The collection of {@link LanguageInfo}s to convert
                             * @param proposalType - The proposal type to assign to all new proposals.
                             * @return List of IProposals for the not hidden {@link LanguageInfo}s.
                             */
                            LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection = function (transpilableCollections, languageInfos, proposalType) {
                                return transpilableCollections.buildListFromCollection(languageInfos, function (li) { return !li.isHidden() ? new proposer.Proposal(li.getName(), proposalType) : null; });
                            };
                            return LambdaExpressionHelper;
                        }());
                        proposer.LambdaExpressionHelper = LambdaExpressionHelper;
                    })(proposer = context.proposer || (context.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_3) {
                    var proposer;
                    (function (proposer) {
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        /**
                         * WARNING: This class and its subclasses are 'transpiled' into Javascript.
                         */
                        var AbstractContentAssistProposer = /** @class */ (function () {
                            function AbstractContentAssistProposer() {
                                this.transpilableCollections = null;
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                            }
                            /**
                             * {@inheritDoc}
                             */
                            AbstractContentAssistProposer.prototype.addProposals = function (builder, context) {
                                var tokenType = context.getTokenType();
                                if (TokenType.string_literal != tokenType && TokenType.string_literal_fragment != tokenType) {
                                    if (this.isContextSupported(context)) {
                                        var list = this.getProposalList(context);
                                        if (list != null) {
                                            for (var it = list.iterator(); it.hasNext();) {
                                                var p = it.next();
                                                if ( /* startsWith */(function (str, searchString, position) {
                                                    if (position === void 0) { position = 0; }
                                                    return str.substr(position, searchString.length) === searchString;
                                                })(p.getText().toUpperCase(), context.getText().toUpperCase())) {
                                                    builder.add(p);
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            /**
                             * Where {@link ITokenisationState} is actually a {@link MacroDelegatingState} then the state of
                             * interest for content assist is the one that is the delegate, so return that instead.
                             *
                             * Also where {@link ITokenisationState} is an IdentifierState, it hides the state of interest.
                             *
                             * @param state
                             * @return
                             */
                            AbstractContentAssistProposer.prototype.extractTokenisationState = function (state) {
                                if (state != null && state["__interfaces"] != null && state["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState") >= 0) {
                                    return this.extractTokenisationState(state.getMacroDelegateState());
                                }
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.IdentifierState) {
                                    return this.extractTokenisationState(state.getStateIfNotAssignment());
                                }
                                return state;
                            };
                            return AbstractContentAssistProposer;
                        }());
                        proposer.AbstractContentAssistProposer = AbstractContentAssistProposer;
                    })(proposer = context_3.proposer || (context_3.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_4) {
                    var proposer;
                    (function (proposer) {
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var AbstractOptionsContentAssistProposer = /** @class */ (function (_super) {
                            __extends(AbstractOptionsContentAssistProposer, _super);
                            function AbstractOptionsContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            AbstractOptionsContentAssistProposer.prototype.getProposalList = function (context) {
                                var tokenisationState = this.extractTokenisationState(context.getTokenisationState());
                                if (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractOptionsState) {
                                    var state = tokenisationState;
                                    if (state.getCurrentStatement() != null) {
                                        var tokenType = context.getTokenType();
                                        if (tokenType == null || tokenType == TokenType.identifier || tokenType == TokenType.keyword || tokenType == TokenType.parenthesis || tokenType == TokenType.semicolon) {
                                            var options = state.getCurrentStatement().getOptions();
                                            if (options != null) {
                                                return proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, options, this.getProposalType());
                                            }
                                        }
                                    }
                                }
                                return null;
                            };
                            return AbstractOptionsContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.AbstractOptionsContentAssistProposer = AbstractOptionsContentAssistProposer;
                    })(proposer = context_4.proposer || (context_4.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_5) {
                    var proposer;
                    (function (proposer) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var CallRoutineContentAssistProposer = /** @class */ (function (_super) {
                            __extends(CallRoutineContentAssistProposer, _super);
                            function CallRoutineContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            CallRoutineContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    this.proposals = proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getCallRoutines(), proposer.ProposalType.CALL_ROUTINE);
                                }
                            };
                            CallRoutineContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            CallRoutineContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.CallRoutineChooserState) {
                                    return true;
                                }
                                else if (state instanceof com.wpc.wps.language.context.tokenisation.state.IdentifierState) {
                                    var identifierState = state;
                                    if ((identifierState.getIdentifier() === SasLanguage.CALL) && (identifierState.getStateIfNotAssignment() instanceof com.wpc.wps.language.context.tokenisation.state.CallRoutineChooserState)) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                            return CallRoutineContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.CallRoutineContentAssistProposer = CallRoutineContentAssistProposer;
                    })(proposer = context_5.proposer || (context_5.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_6) {
                    var proposer;
                    (function (proposer) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var MacroContentAssistProposer = /** @class */ (function (_super) {
                            __extends(MacroContentAssistProposer, _super);
                            function MacroContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            MacroContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    this.proposals = this.transpilableCollections.buildListFromCollection(this.sasLanguageSupporter.getMacroStatements().entryCollection(), function (e) { return new proposer.Proposal("%" + e.getKey(), proposer.ProposalType.MACRO_KEYWORD); });
                                }
                            };
                            MacroContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            MacroContentAssistProposer.prototype.isContextSupported = function (context) {
                                var text = context.getText();
                                return text != null && text.length > 0 ? text.charAt(0) == SasLanguage.PERCENT : false;
                            };
                            return MacroContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.MacroContentAssistProposer = MacroContentAssistProposer;
                    })(proposer = context_6.proposer || (context_6.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_7) {
                    var proposer;
                    (function (proposer) {
                        var GlobalStateContentAssistProposer = /** @class */ (function (_super) {
                            __extends(GlobalStateContentAssistProposer, _super);
                            function GlobalStateContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            GlobalStateContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    var globalBuilder = this.transpilableCollections.transpilableListBuilder();
                                    globalBuilder.addAll(this.transpilableCollections.buildListFromCollection(this.sasLanguageSupporter.getGlobals().keySet(), function (s) { return new proposer.Proposal(s, proposer.ProposalType.GLOBAL_STATEMENT); }));
                                    globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getRootStatements(), proposer.ProposalType.ROOT_STATEMENT));
                                    this.proposals = globalBuilder.build();
                                }
                            };
                            GlobalStateContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            GlobalStateContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = false;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if ((state instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) || (state instanceof com.wpc.wps.language.context.tokenisation.state.MacroDefinitionState)) {
                                    result = true;
                                }
                                else if (state != null) {
                                    result = (state.getName() === "GlobalState");
                                }
                                else {
                                    result = true;
                                }
                                return result;
                            };
                            return GlobalStateContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.GlobalStateContentAssistProposer = GlobalStateContentAssistProposer;
                    })(proposer = context_7.proposer || (context_7.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_8) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Content assist for DECLARE: get a list of components.
                         *
                         * @author ml
                         */
                        var ComponentChooserContentAssistProposer = /** @class */ (function (_super) {
                            __extends(ComponentChooserContentAssistProposer, _super);
                            function ComponentChooserContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            ComponentChooserContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    this.proposals = this.transpilableCollections.buildListFromCollection(this.sasLanguageSupporter.getComponents().keySet(), function (name) { return new proposer.Proposal(name, proposer.ProposalType.COMPONENT); });
                                }
                            };
                            /**
                             * {@inheritDoc}
                             */
                            ComponentChooserContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.IdentifierState) {
                                    var is = state;
                                    state = is.getStateIfNotAssignment();
                                }
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.ComponentChooserState);
                            };
                            ComponentChooserContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            return ComponentChooserContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.ComponentChooserContentAssistProposer = ComponentChooserContentAssistProposer;
                    })(proposer = context_8.proposer || (context_8.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_9) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Presents proposals for a Libname statement. This is typically a choice of library engines.
                         *
                         * @author Nick Robson [nr]
                         */
                        var LibnameContentAssistProposer = /** @class */ (function (_super) {
                            __extends(LibnameContentAssistProposer, _super);
                            function LibnameContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.allLibraryEngineProposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            LibnameContentAssistProposer.prototype.postConstruct = function () {
                                if (this.allLibraryEngineProposals == null) {
                                    this.allLibraryEngineProposals = proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getLibraryEngines(), proposer.ProposalType.LIBNAME_LIBRARY_ENGINE);
                                }
                            };
                            /**
                             * {@inheritDoc}
                             */
                            LibnameContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.LibnameState);
                            };
                            LibnameContentAssistProposer.prototype.getProposalList = function (context) {
                                var result = null;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.LibnameState) {
                                    var ls = state;
                                    switch ((ls.getInternalState())) {
                                        case com.wpc.wps.language.context.tokenisation.state.LibnameState.LibnameInternalState.ENGINE:
                                            result = this.allLibraryEngineProposals;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.state.LibnameState.LibnameInternalState.OPTIONS:
                                            result = proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, ls.getCurrentStatement().getOptions(), proposer.ProposalType.LIBNAME_OPTION);
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                return result;
                            };
                            return LibnameContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.LibnameContentAssistProposer = LibnameContentAssistProposer;
                    })(proposer = context_9.proposer || (context_9.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_10) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Presents proposals for options of a library engine within a Libname statement.
                         *
                         * @author Nick Robson [nr]
                         */
                        var LibnameOptionValueContentAssistProposer = /** @class */ (function (_super) {
                            __extends(LibnameOptionValueContentAssistProposer, _super);
                            function LibnameOptionValueContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            LibnameOptionValueContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.LibnameOptionsState);
                            };
                            LibnameOptionValueContentAssistProposer.prototype.getProposalList = function (context) {
                                var result = null;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.LibnameOptionsState) {
                                    var los = state;
                                    var optionLanguageInfo = los.getOptionLanguageInfo();
                                    var choices = optionLanguageInfo.getKeywords();
                                    if (choices != null) {
                                        result = proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, choices, proposer.ProposalType.LIBNAME_OPTION);
                                    }
                                }
                                return result;
                            };
                            return LibnameOptionValueContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.LibnameOptionValueContentAssistProposer = LibnameOptionValueContentAssistProposer;
                    })(proposer = context_10.proposer || (context_10.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_11) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Content assist for Option Values.
                         */
                        var OptionValueContentAssistProposer = /** @class */ (function (_super) {
                            __extends(OptionValueContentAssistProposer, _super);
                            function OptionValueContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            OptionValueContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.OptionValueState) || (state instanceof com.wpc.wps.language.context.tokenisation.state.AbstractOptionsState);
                            };
                            OptionValueContentAssistProposer.prototype.getProposalList = function (context) {
                                var options = null;
                                var tokenizationState = this.extractTokenisationState(context.getTokenisationState());
                                if (tokenizationState instanceof com.wpc.wps.language.context.tokenisation.state.OptionValueState) {
                                    var valueState = tokenizationState;
                                    options = valueState.getOptionLanguageInfo() != null ? valueState.getOptionLanguageInfo().getKeywords() : null;
                                }
                                else if (tokenizationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepStateOptionsState) {
                                    var optionsState = tokenizationState;
                                    var option = optionsState.getOption();
                                    var stepInfo = optionsState.getStepInfo();
                                    var stepLanguageInfo = stepInfo != null ? stepInfo.getLanguageInfo() : null;
                                    var optionLanguageInfo = stepLanguageInfo != null && option != null ? stepLanguageInfo.getOption(option) : null;
                                    options = optionLanguageInfo != null ? optionLanguageInfo.getKeywords() : null;
                                }
                                if (options != null) {
                                    return proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, options, proposer.ProposalType.PROC_STATEMENT);
                                }
                                return null;
                            };
                            return OptionValueContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.OptionValueContentAssistProposer = OptionValueContentAssistProposer;
                    })(proposer = context_11.proposer || (context_11.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_12) {
                    var proposer;
                    (function (proposer) {
                        var DatastepOptionsContentAssistProposer = /** @class */ (function (_super) {
                            __extends(DatastepOptionsContentAssistProposer, _super);
                            function DatastepOptionsContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            DatastepOptionsContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = false;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.DataOptionsState) {
                                    result = context.getTokenName() == null && state.getOption() == null;
                                }
                                return result;
                            };
                            DatastepOptionsContentAssistProposer.prototype.getProposalType = function () {
                                return proposer.ProposalType.DATA_STEP_OPTION;
                            };
                            return DatastepOptionsContentAssistProposer;
                        }(proposer.AbstractOptionsContentAssistProposer));
                        proposer.DatastepOptionsContentAssistProposer = DatastepOptionsContentAssistProposer;
                    })(proposer = context_12.proposer || (context_12.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_13) {
                    var proposer;
                    (function (proposer) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        /**
                         * Proposer for format-related proposals. Formats are provided in the Lua.
                         *
                         * @author Nick Robson [nr]
                         */
                        var FormatContentAssistProposer = /** @class */ (function (_super) {
                            __extends(FormatContentAssistProposer, _super);
                            function FormatContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            FormatContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    var globalBuilder = this.transpilableCollections.transpilableListBuilder();
                                    globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getFormats(), proposer.ProposalType.FORMAT));
                                    this.proposals = globalBuilder.build();
                                }
                            };
                            /**
                             * {@inheritDoc}
                             */
                            FormatContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = false;
                                if (TokenType.format == context.getTokenType()) {
                                    result = true;
                                }
                                else {
                                    var tokenName = StringUtils.toUpperCase(context.getTokenName());
                                    if ((SasLanguage.FORMAT === tokenName) || (SasLanguage.INFORMAT === tokenName)) {
                                        result = true;
                                    }
                                    else {
                                        var state = this.extractTokenisationState(context.getTokenisationState());
                                        if (state instanceof com.wpc.wps.language.context.tokenisation.state.StatementState) {
                                            var bss = state;
                                            var currentStatement = bss.getCurrentStatement();
                                            if (currentStatement != null) {
                                                var name = StringUtils.toUpperCase(currentStatement.getName());
                                                if ((SasLanguage.FORMAT === name) || (SasLanguage.INFORMAT === name) || (SasLanguage.INPUT === name) || (SasLanguage.PUT === name)) {
                                                    result = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                return result;
                            };
                            FormatContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            return FormatContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.FormatContentAssistProposer = FormatContentAssistProposer;
                    })(proposer = context_13.proposer || (context_13.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_14) {
                    var proposer;
                    (function (proposer) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        var FunctionContentAssistProposer = /** @class */ (function (_super) {
                            __extends(FunctionContentAssistProposer, _super);
                            function FunctionContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            FunctionContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    var globalBuilder = this.transpilableCollections.transpilableListBuilder();
                                    globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getFunctions(), proposer.ProposalType.DATA_STEP_FUNCTION));
                                    this.proposals = globalBuilder.build();
                                }
                            };
                            FunctionContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            FunctionContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = false;
                                if (TokenType.format != context.getTokenType() && !(SasLanguage.FORMAT === StringUtils.toUpperCase(context.getTokenName()))) {
                                    var state = this.extractTokenisationState(context.getTokenisationState());
                                    if (state instanceof com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState) {
                                        var doState = state;
                                        switch ((doState.getInternalState())) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                result = true;
                                                break;
                                            default:
                                        }
                                    }
                                    else if ((state instanceof com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState) && !(state instanceof com.wpc.wps.language.context.tokenisation.state.sql.SqlExpressionState)) {
                                        if (state instanceof com.wpc.wps.language.context.tokenisation.state.StatementAssignmentExpressionState) {
                                            result = false;
                                        }
                                        else {
                                            switch ((state.getInternalState())) {
                                                case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND:
                                                case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                                    result = true;
                                                    break;
                                                default:
                                            }
                                        }
                                    }
                                }
                                return result;
                            };
                            return FunctionContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.FunctionContentAssistProposer = FunctionContentAssistProposer;
                    })(proposer = context_14.proposer || (context_14.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_15) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * {@link IContentAssistProposer} for IML functions. Extends {@link FunctionContentAssistProposer} so
                         * that proposals are supported everywhere where functions are supported AND it's in PROC IML (the parent
                         * of the {@link AbstractDoExpressionState} or {@link AssignmentExpressionState} is an instance of
                         * {@link ProcImlStepState}).
                         *
                         * @author ml
                         */
                        var ImlFunctionContentAssistProposer = /** @class */ (function (_super) {
                            __extends(ImlFunctionContentAssistProposer, _super);
                            function ImlFunctionContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * Build proposals from {@link SasLanguageSupporter#getImlFunctions}
                             */
                            ImlFunctionContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    var globalBuilder = this.transpilableCollections.transpilableListBuilder();
                                    globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getImlFunctions(), proposer.ProposalType.IML_FUNCTION));
                                    this.proposals = globalBuilder.build();
                                }
                            };
                            ImlFunctionContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            ImlFunctionContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = _super.prototype.isContextSupported.call(this, context);
                                if (result) {
                                    result = false;
                                    var currentState = this.extractTokenisationState(context.getTokenisationState());
                                    if ((currentState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) && (currentState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.ProcImlStepState)) {
                                        result = true;
                                    }
                                }
                                return result;
                            };
                            return ImlFunctionContentAssistProposer;
                        }(proposer.FunctionContentAssistProposer));
                        proposer.ImlFunctionContentAssistProposer = ImlFunctionContentAssistProposer;
                    })(proposer = context_15.proposer || (context_15.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_16) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Proposer for options.
                         *
                         * @author ml
                         */
                        var OptionsStatementContentAssistProposer = /** @class */ (function (_super) {
                            __extends(OptionsStatementContentAssistProposer, _super);
                            function OptionsStatementContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            OptionsStatementContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    var globalBuilder = this.transpilableCollections.transpilableListBuilder();
                                    globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, this.sasLanguageSupporter.getSystemOptions(), proposer.ProposalType.STATEMENT_OPTION));
                                    this.proposals = globalBuilder.build();
                                }
                            };
                            OptionsStatementContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            /**
                             * {@inheritDoc}
                             */
                            OptionsStatementContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = false;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.OptionsStatementState) {
                                    result = true;
                                }
                                return result;
                            };
                            return OptionsStatementContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.OptionsStatementContentAssistProposer = OptionsStatementContentAssistProposer;
                    })(proposer = context_16.proposer || (context_16.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_17) {
                    var proposer;
                    (function (proposer) {
                        var ProcChooserContentAssistProposer = /** @class */ (function (_super) {
                            __extends(ProcChooserContentAssistProposer, _super);
                            function ProcChooserContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                _this.proposals = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            ProcChooserContentAssistProposer.prototype.postConstruct = function () {
                                if (this.proposals == null) {
                                    this.proposals = this.transpilableCollections.buildListFromCollection(this.sasLanguageSupporter.getProcs(), function (li) { return !li.isHidden() ? new proposer.Proposal(li.getLanguageInfo().getName(), proposer.ProposalType.PROC) : null; });
                                }
                            };
                            /**
                             * {@inheritDoc}
                             */
                            ProcChooserContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.IdentifierState) {
                                    state = state.getStateIfNotAssignment();
                                }
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.ProcChooserState);
                            };
                            ProcChooserContentAssistProposer.prototype.getProposalList = function (context) {
                                return this.proposals;
                            };
                            return ProcChooserContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.ProcChooserContentAssistProposer = ProcChooserContentAssistProposer;
                    })(proposer = context_17.proposer || (context_17.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_18) {
                    var proposer;
                    (function (proposer) {
                        var ProcOptionsContentAssistProposer = /** @class */ (function (_super) {
                            __extends(ProcOptionsContentAssistProposer, _super);
                            function ProcOptionsContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            ProcOptionsContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.ProcOptionsState);
                            };
                            ProcOptionsContentAssistProposer.prototype.getProposalType = function () {
                                return proposer.ProposalType.PROC_OPTION;
                            };
                            return ProcOptionsContentAssistProposer;
                        }(proposer.AbstractOptionsContentAssistProposer));
                        proposer.ProcOptionsContentAssistProposer = ProcOptionsContentAssistProposer;
                    })(proposer = context_18.proposer || (context_18.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_19) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * Proposer for format-related proposals. Formats are provided in the Lua.
                         *
                         * @author Nick Robson [nr]
                         */
                        var StatementContentAssistProposer = /** @class */ (function (_super) {
                            __extends(StatementContentAssistProposer, _super);
                            function StatementContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                _this.sasLanguageSupporter = null;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            StatementContentAssistProposer.prototype.isContextSupported = function (context) {
                                var result = false;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if ((state instanceof com.wpc.wps.language.context.tokenisation.state.BaseStatementState) && !(state != null && state["__interfaces"] != null && state["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.sql.SqlStatementState") >= 0)) {
                                    result = true;
                                }
                                else if (state instanceof com.wpc.wps.language.context.tokenisation.state.StatementAssignmentExpressionState) {
                                    result = true;
                                }
                                return result;
                            };
                            StatementContentAssistProposer.prototype.getProposalList = function (context) {
                                var result = null;
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.StatementAssignmentExpressionState) {
                                    if (context.getTokenName() == null) {
                                        state = state.getParent();
                                    }
                                }
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.StatementState) {
                                    var ss = state;
                                    var languageInfo = ss.getCurrentStatement();
                                    if (languageInfo != null) {
                                        var globalBuilder = this.transpilableCollections.transpilableListBuilder();
                                        globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, languageInfo.getStatements(), proposer.ProposalType.STATEMENT));
                                        globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, languageInfo.getKeywords(), proposer.ProposalType.STATEMENT_KEYWORD));
                                        globalBuilder.addAll(proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, languageInfo.getOptions(), proposer.ProposalType.STATEMENT_OPTION));
                                        result = globalBuilder.build();
                                    }
                                }
                                return result;
                            };
                            return StatementContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.StatementContentAssistProposer = StatementContentAssistProposer;
                    })(proposer = context_19.proposer || (context_19.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_20) {
                    var proposer;
                    (function (proposer) {
                        /**
                         * {@link IContentAssistProposer} for statements (returns keywords).
                         *
                         * @author Nick Robson [nr]
                         */
                        var StepStateContentAssistProposer = /** @class */ (function (_super) {
                            __extends(StepStateContentAssistProposer, _super);
                            function StepStateContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            StepStateContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState);
                            };
                            StepStateContentAssistProposer.prototype.getProposalList = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                var currentStep = state.getCurrentStep();
                                var languageInfo = currentStep != null ? currentStep.getLanguageInfo() : null;
                                var options = languageInfo != null ? languageInfo.getStatements() : null;
                                if (options != null) {
                                    return proposer.LambdaExpressionHelper.buildProposalListFromLanguageInfoCollection(this.transpilableCollections, options, proposer.ProposalType.PROC_STATEMENT);
                                }
                                return null;
                            };
                            return StepStateContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.StepStateContentAssistProposer = StepStateContentAssistProposer;
                    })(proposer = context_20.proposer || (context_20.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_21) {
                    var proposer;
                    (function (proposer) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var AssignmentExpressionState = com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState;
                        var SelectStatementState = com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState;
                        /**
                         * {@link IContentAssistProposer} for CREATE INDEX statements in PROC SQL.
                         *
                         * @author ml
                         */
                        var SqlContentAssistProposer = /** @class */ (function (_super) {
                            __extends(SqlContentAssistProposer, _super);
                            function SqlContentAssistProposer() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IContentAssistProposer"] });
                                return _this;
                            }
                            /**
                             * {@inheritDoc}
                             */
                            SqlContentAssistProposer.prototype.isContextSupported = function (context) {
                                var state = this.getSqlTokenisationState(context);
                                return (state instanceof com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState) || (state instanceof com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState) || (state instanceof com.wpc.wps.language.context.tokenisation.state.sql.SqlExpressionState);
                            };
                            /**
                             * Overridden to allow strings and compare without quotes.
                             */
                            SqlContentAssistProposer.prototype.addProposals = function (builder, context) {
                                if (this.isContextSupported(context)) {
                                    var list = this.getProposalList(context);
                                    for (var it = list.iterator(); it.hasNext();) {
                                        var p = it.next();
                                        var proposalString;
                                        var contextString;
                                        if (p.getType() == proposer.ProposalType.DATASET_NAME || p.getType() == proposer.ProposalType.COLUMN_NAME) {
                                            proposalString = this.normaliseStringForCompare(p.getText());
                                            contextString = this.normaliseStringForCompare(context.getText());
                                        }
                                        else {
                                            proposalString = p.getText().toLowerCase();
                                            contextString = context.getText().toLowerCase();
                                        }
                                        if ( /* startsWith */(function (str, searchString, position) {
                                            if (position === void 0) { position = 0; }
                                            return str.substr(position, searchString.length) === searchString;
                                        })(proposalString, contextString)) {
                                            builder.add(p);
                                        }
                                    }
                                }
                            };
                            /**
                             * Strip out single/double quotes, then change to lower case.
                             *
                             * @param str
                             * @return
                             */
                            SqlContentAssistProposer.prototype.normaliseStringForCompare = function (str) {
                                return str.replace("\'", "").replace("\"", "").toLowerCase();
                            };
                            /**
                             * Return {@link CreateIndexStatementState} or {@link SelectStatementState} or
                             * {@link SqlExpressionState}.<br/>
                             * Where {@link SqlExpressionState} is at the end of an expression, return the parent
                             * {@link StatementParentState} as it can potentially return there.
                             *
                             * @param context
                             * @return {@link CreateIndexStatementState} or {@link SelectStatementState} or
                             * {@link SqlExpressionState}
                             */
                            SqlContentAssistProposer.prototype.getSqlTokenisationState = function (context) {
                                var state = this.extractTokenisationState(context.getTokenisationState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.sql.SqlExpressionState) {
                                    var sqlExpressionState = state;
                                    var internalState = sqlExpressionState.getInternalState();
                                    if (internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND) {
                                        state = sqlExpressionState.getParent();
                                    }
                                }
                                return state;
                            };
                            SqlContentAssistProposer.prototype.getProposalList = function (context) {
                                var state = this.getSqlTokenisationState(context);
                                var proposeTypes = new SqlContentAssistProposer.ProposeTypes();
                                var keywords = null;
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState) {
                                    keywords = this.handleCreateIndex(state);
                                }
                                else if (state instanceof com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState) {
                                    keywords = this.handleSelectStatement(proposeTypes, state);
                                }
                                else {
                                    keywords = this.handleSqlExpression(proposeTypes, state);
                                }
                                var listBuilder = this.transpilableCollections.transpilableListBuilder();
                                for (var index122 = 0; index122 < keywords.length; index122++) {
                                    var keyword = keywords[index122];
                                    {
                                        listBuilder.add(new proposer.Proposal(keyword, proposer.ProposalType.STATEMENT_KEYWORD));
                                    }
                                }
                                if (context.getDatasetAssistable() != null && (proposeTypes.datasetNames || proposeTypes.columnNames)) {
                                    var mapIterator = context.getDatasetAssistable().getInputDatasetColumns().entryCollection().iterator();
                                    while ((mapIterator.hasNext())) {
                                        var e = mapIterator.next();
                                        var datasetName = e.getKey();
                                        if (proposeTypes.datasetNames) {
                                            listBuilder.add(new proposer.Proposal(datasetName, proposer.ProposalType.DATASET_NAME));
                                        }
                                        if (proposeTypes.columnNames) {
                                            var columnIterator = e.getValue().iterator();
                                            while ((columnIterator.hasNext())) {
                                                var columnName = columnIterator.next();
                                                listBuilder.add(new proposer.Proposal(columnName, proposer.ProposalType.COLUMN_NAME));
                                            }
                                            ;
                                            listBuilder.add(new proposer.Proposal("*", proposer.ProposalType.COLUMN_NAME));
                                        }
                                    }
                                    ;
                                }
                                if (proposeTypes.sqlFunctions) {
                                    {
                                        var array124 = SasLanguage.getSqlAggregateFunctions();
                                        for (var index123 = 0; index123 < array124.length; index123++) {
                                            var keyword = array124[index123];
                                            {
                                                listBuilder.add(new proposer.Proposal(keyword, proposer.ProposalType.SQL_FUNCTION));
                                            }
                                        }
                                    }
                                    listBuilder.add(new proposer.Proposal(SasLanguage.CASE, proposer.ProposalType.SQL_FUNCTION));
                                }
                                return listBuilder.build();
                            };
                            SqlContentAssistProposer.prototype.handleCreateIndex = function (createIndexStatementState) {
                                var keywords = new Array(0);
                                switch ((createIndexStatementState.getInternalState())) {
                                    case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.INDEX_NAME:
                                        keywords = [SasLanguage.ON];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.CreateIndexStatementState.InternalState.UNIQUE:
                                        keywords = [SasLanguage.INDEX];
                                        break;
                                    default:
                                        break;
                                }
                                return keywords;
                            };
                            SqlContentAssistProposer.prototype.handleSelectStatement = function (proposeTypes, selectState) {
                                var keywords = new Array(0);
                                switch ((selectState.getInternalState())) {
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.SELECT:
                                        proposeTypes.setAllTrue();
                                        keywords = [SasLanguage.DISTINCT];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.SELECT_DISTINCT:
                                        proposeTypes.setAllTrue();
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.SELECT_EXPRESSION:
                                        keywords = [SasLanguage.AS, SasLanguage.FROM, SasLanguage.INTO, SasLanguage.WHERE, SasLanguage.GROUP_BY, SasLanguage.HAVING, SasLanguage.ORDER_BY];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FROM_EXPRESSION:
                                        keywords = [SasLanguage.AS, SasLanguage.FROM, SasLanguage.INTO, SasLanguage.WHERE, SasLanguage.GROUP_BY, SasLanguage.HAVING, SasLanguage.ORDER_BY, SasLanguage.FULL_JOIN, SasLanguage.FULL_OUTER_JOIN, SasLanguage.INNER_JOIN, SasLanguage.JOIN, SasLanguage.LEFT_JOIN, SasLanguage.LEFT_OUTER_JOIN, SasLanguage.MATCH_JOIN, SasLanguage.NATURAL_FULL_JOIN, SasLanguage.NATURAL_FULL_OUTER_JOIN, SasLanguage.NATURAL_INNER_JOIN, SasLanguage.NATURAL_JOIN, SasLanguage.NATURAL_LEFT_JOIN, SasLanguage.NATURAL_LEFT_OUTER_JOIN, SasLanguage.NATURAL_RIGHT_JOIN, SasLanguage.NATURAL_RIGHT_OUTER_JOIN, SasLanguage.SPRINGFIELD_JOIN, SasLanguage.RIGHT_JOIN, SasLanguage.RIGHT_OUTER_JOIN, SasLanguage.UNION_JOIN, SasLanguage.CROSS_JOIN];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.GROUP_BY_EXPRESSION:
                                        keywords = [SasLanguage.HAVING, SasLanguage.ORDER_BY];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.HAVING_EXPRESSION:
                                        keywords = [SasLanguage.ORDER_BY];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME:
                                        keywords = [SasLanguage.SEPARATED_BY];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED_BY_CHAR:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_DASH_COLON_NAME:
                                        keywords = [SasLanguage.NOTRIM, SasLanguage.TRIMMED];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.GROUP:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_COLON_NAME_SEPARATED:
                                        keywords = [SasLanguage.BY];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INTO_EXPRESSION:
                                        keywords = [SasLanguage.WHERE, SasLanguage.GROUP_BY, SasLanguage.HAVING, SasLanguage.ORDER_BY];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FULL:
                                        keywords = [SasLanguage.OUTER];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_EXPRESSION:
                                        keywords = [SasLanguage.ON];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.JOIN_ON_EXPRESSION:
                                        proposeTypes.setAllTrue();
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL:
                                        keywords = [SasLanguage.FULL, SasLanguage.LEFT, SasLanguage.RIGHT];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.FULL_OUTER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_FULL:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_LEFT:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_RIGHT:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.LEFT:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.RIGHT:
                                        keywords = [SasLanguage.OUTER];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_FULL_OUTER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_INNER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_LEFT_OUTER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.LEFT_OUTER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.NATURAL_RIGHT_OUTER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.RIGHT_OUTER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.INNER:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.MATCH:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.SPRINGFIELD:
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.UNION:
                                        keywords = [SasLanguage.JOIN];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.ORDER_BY_EXPRESSION:
                                        keywords = [SasLanguage.ASC, SasLanguage.DESC];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.sql.SelectStatementState.InternalState.WHERE_EXPRESSION:
                                        keywords = [SasLanguage.GROUP_BY, SasLanguage.HAVING, SasLanguage.ORDER_BY];
                                        break;
                                    default:
                                        break;
                                }
                                return keywords;
                            };
                            SqlContentAssistProposer.prototype.handleSqlExpression = function (proposeTypes, sqlExpState) {
                                var keywords = new Array(0);
                                switch ((sqlExpState.getInternalState())) {
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.DOT_BC:
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS:
                                        keywords = [SasLanguage.NOT, SasLanguage.MISSING, SasLanguage.NULL];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS_NOT:
                                        keywords = [SasLanguage.MISSING, SasLanguage.NULL];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                        proposeTypes.sqlFunctions = true;
                                        if (sqlExpState.getParent().getInternalState() != SelectStatementState.InternalState.FROM_EXPRESSION && sqlExpState.getParent().getInternalState() != SelectStatementState.InternalState.JOIN_EXPRESSION) {
                                            proposeTypes.columnNames = true;
                                        }
                                        proposeTypes.datasetNames = true;
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING:
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT:
                                        proposeTypes.columnNames = true;
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE:
                                        proposeTypes.columnNames = true;
                                        proposeTypes.datasetNames = true;
                                        keywords = [SasLanguage.WHEN];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_CASE_NNS_FOUND:
                                        keywords = [SasLanguage.WHEN];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE:
                                        proposeTypes.setAllTrue();
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_ELSE_NNS_FOUND:
                                        keywords = [SasLanguage.END];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN:
                                        proposeTypes.setAllTrue();
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_THEN_NNS_FOUND:
                                        keywords = [SasLanguage.WHEN, SasLanguage.ELSE, SasLanguage.END];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN:
                                        proposeTypes.setAllTrue();
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_NNS_FOUND:
                                        keywords = [SasLanguage.THEN];
                                        break;
                                    case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SQL_WHEN_OP:
                                        proposeTypes.setAllTrue();
                                        break;
                                    default:
                                        break;
                                }
                                return keywords;
                            };
                            return SqlContentAssistProposer;
                        }(proposer.AbstractContentAssistProposer));
                        proposer.SqlContentAssistProposer = SqlContentAssistProposer;
                        (function (SqlContentAssistProposer) {
                            var ProposeTypes = /** @class */ (function () {
                                function ProposeTypes() {
                                }
                                ProposeTypes.prototype.setAllTrue = function () {
                                    this.sqlFunctions = true;
                                    this.columnNames = true;
                                    this.datasetNames = true;
                                };
                                return ProposeTypes;
                            }());
                            SqlContentAssistProposer.ProposeTypes = ProposeTypes;
                        })(SqlContentAssistProposer = proposer.SqlContentAssistProposer || (proposer.SqlContentAssistProposer = {}));
                    })(proposer = context_21.proposer || (context_21.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var proposer;
                    (function (proposer) {
                        var Proposal = /** @class */ (function () {
                            function Proposal(text, type) {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IProposal"] });
                                this.text = text;
                                this.type = type;
                            }
                            Proposal.createNew = function (text, type) {
                                return new Proposal(text, type);
                            };
                            Proposal.prototype.getText = function () {
                                return this.text;
                            };
                            Proposal.prototype.setTextCase = function (upperCase) {
                                if (this.text != null) {
                                    this.text = upperCase ? this.text.toUpperCase() : this.text.toLowerCase();
                                }
                            };
                            Proposal.prototype.getType = function () {
                                return this.type;
                            };
                            Proposal.prototype.toString = function () {
                                return this.text + " (" + this.type.toString() + ")";
                            };
                            Proposal.prototype.hashCode = function () {
                                return this.text.length;
                            };
                            Proposal.prototype.equals = function (obj) {
                                if (this == obj) {
                                    return true;
                                }
                                if (obj == null) {
                                    return false;
                                }
                                var other = obj;
                                if (this.text == null) {
                                    if (other.text != null) {
                                        return false;
                                    }
                                }
                                else if (!(this.text === other.text)) {
                                    return false;
                                }
                                if (this.type != other.type) {
                                    return false;
                                }
                                return true;
                            };
                            return Proposal;
                        }());
                        proposer.Proposal = Proposal;
                    })(proposer = context.proposer || (context.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var proposer;
                    (function (proposer) {
                        var ProposalType;
                        (function (ProposalType) {
                            ProposalType[ProposalType["CALL_ROUTINE"] = 0] = "CALL_ROUTINE";
                            ProposalType[ProposalType["COMPONENT"] = 1] = "COMPONENT";
                            ProposalType[ProposalType["DATA_STEP_FUNCTION"] = 2] = "DATA_STEP_FUNCTION";
                            ProposalType[ProposalType["DATA_STEP_OPTION"] = 3] = "DATA_STEP_OPTION";
                            ProposalType[ProposalType["FORMAT"] = 4] = "FORMAT";
                            ProposalType[ProposalType["GLOBAL_MACRO_VARIABLE"] = 5] = "GLOBAL_MACRO_VARIABLE";
                            ProposalType[ProposalType["GLOBAL_STATEMENT"] = 6] = "GLOBAL_STATEMENT";
                            ProposalType[ProposalType["IML_FUNCTION"] = 7] = "IML_FUNCTION";
                            ProposalType[ProposalType["INFORMAT"] = 8] = "INFORMAT";
                            ProposalType[ProposalType["LIBNAME_LIBRARY_ENGINE"] = 9] = "LIBNAME_LIBRARY_ENGINE";
                            ProposalType[ProposalType["LIBNAME_OPTION"] = 10] = "LIBNAME_OPTION";
                            ProposalType[ProposalType["LOCAL_MACRO_VARIABLE"] = 11] = "LOCAL_MACRO_VARIABLE";
                            ProposalType[ProposalType["MACRO_FUNCTION"] = 12] = "MACRO_FUNCTION";
                            ProposalType[ProposalType["MACRO_KEYWORD"] = 13] = "MACRO_KEYWORD";
                            ProposalType[ProposalType["PROC"] = 14] = "PROC";
                            ProposalType[ProposalType["PROC_OPTION"] = 15] = "PROC_OPTION";
                            ProposalType[ProposalType["PROC_STATEMENT"] = 16] = "PROC_STATEMENT";
                            ProposalType[ProposalType["ROOT_STATEMENT"] = 17] = "ROOT_STATEMENT";
                            ProposalType[ProposalType["STATEMENT"] = 18] = "STATEMENT";
                            ProposalType[ProposalType["STATEMENT_KEYWORD"] = 19] = "STATEMENT_KEYWORD";
                            ProposalType[ProposalType["STATEMENT_OPTION"] = 20] = "STATEMENT_OPTION";
                            ProposalType[ProposalType["STEP_VARIABLE"] = 21] = "STEP_VARIABLE";
                            ProposalType[ProposalType["USER_DEFINED_MACRO"] = 22] = "USER_DEFINED_MACRO";
                            ProposalType[ProposalType["TEMPLATE"] = 23] = "TEMPLATE";
                            ProposalType[ProposalType["COLUMN_NAME"] = 24] = "COLUMN_NAME";
                            ProposalType[ProposalType["SQL_FUNCTION"] = 25] = "SQL_FUNCTION";
                            ProposalType[ProposalType["DATASET_NAME"] = 26] = "DATASET_NAME";
                        })(ProposalType = proposer.ProposalType || (proposer.ProposalType = {}));
                    })(proposer = context.proposer || (context.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var proposer;
                    (function (proposer) {
                        var ProposalImagePath = /** @class */ (function () {
                            function ProposalImagePath(type, imageFilename) {
                                this.type = type;
                                this.imageFilename = imageFilename;
                            }
                            ProposalImagePath.prototype.getType = function () {
                                return this.type;
                            };
                            ProposalImagePath.prototype.getImageFilename = function () {
                                return this.imageFilename;
                            };
                            return ProposalImagePath;
                        }());
                        proposer.ProposalImagePath = ProposalImagePath;
                    })(proposer = context.proposer || (context.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var proposer;
                    (function (proposer) {
                        var ProposalImagePathDirectory = /** @class */ (function () {
                            function ProposalImagePathDirectory() {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.proposer.IProposalImagePathDirectory"] });
                            }
                            /**
                             * Returns a path to an image to represent a particular proposal type. To be
                             * used by whatever needs to represent proposals (for example, the list of
                             * proposals shown to the user in content assist).
                             *
                             * @param proposalType
                             * The type we need an image path for.
                             */
                            ProposalImagePathDirectory.prototype.getImagePath = function (proposalType) {
                                var imageFilename = null;
                                switch ((proposalType)) {
                                    case com.wpc.wps.language.context.proposer.ProposalType.DATA_STEP_FUNCTION:
                                        imageFilename = "dataStepFunction.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.CALL_ROUTINE:
                                        imageFilename = "callRoutine.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.IML_FUNCTION:
                                        imageFilename = "function.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.FORMAT:
                                        imageFilename = "format.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.LOCAL_MACRO_VARIABLE:
                                    case com.wpc.wps.language.context.proposer.ProposalType.GLOBAL_MACRO_VARIABLE:
                                        imageFilename = "macroVariable.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.GLOBAL_STATEMENT:
                                        imageFilename = "globalStatement.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.INFORMAT:
                                        imageFilename = "informat.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.MACRO_FUNCTION:
                                        imageFilename = "macroFunction.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.MACRO_KEYWORD:
                                        imageFilename = "macroStatement.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.PROC:
                                        imageFilename = "proc.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.PROC_STATEMENT:
                                        imageFilename = "procStatement.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.PROC_OPTION:
                                        imageFilename = "procOption.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.DATA_STEP_OPTION:
                                        imageFilename = "dataStepOption.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.LIBNAME_OPTION:
                                        imageFilename = "option.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.STATEMENT_OPTION:
                                        imageFilename = "statementOption.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.STEP_VARIABLE:
                                        imageFilename = "datastepVariable.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.USER_DEFINED_MACRO:
                                        imageFilename = "macro.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.LIBNAME_LIBRARY_ENGINE:
                                        imageFilename = "libEngine.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.STATEMENT:
                                        imageFilename = "statement.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.STATEMENT_KEYWORD:
                                        imageFilename = "statementKeyword.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.TEMPLATE:
                                        imageFilename = "template.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.COLUMN_NAME:
                                        imageFilename = "datasetFieldCharacter.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.DATASET_NAME:
                                        imageFilename = "dataset.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.SQL_FUNCTION:
                                        imageFilename = "function.gif";
                                        break;
                                    case com.wpc.wps.language.context.proposer.ProposalType.ROOT_STATEMENT:
                                    case com.wpc.wps.language.context.proposer.ProposalType.COMPONENT:
                                    default:
                                        imageFilename = ProposalImagePathDirectory.defaultImageFilename;
                                        break;
                                }
                                return ProposalImagePathDirectory.imageFolder + "/" + imageFilename;
                            };
                            ProposalImagePathDirectory.imageFolder = "icons/proposal_types";
                            ProposalImagePathDirectory.defaultImageFilename = "code.gif";
                            return ProposalImagePathDirectory;
                        }());
                        proposer.ProposalImagePathDirectory = ProposalImagePathDirectory;
                    })(proposer = context.proposer || (context.proposer = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var common;
                    (function (common) {
                        /**
                         * Default immutable implementation of {@link IContentAssistContext}.
                         */
                        var ContentAssistContext = /** @class */ (function () {
                            function ContentAssistContext(state, tokenType, tokenName, proposalText, datasetAssistable) {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.common.IContentAssistContext"] });
                                this.tokenisationState = state;
                                this.tokenType = tokenType;
                                this.tokenName = tokenName;
                                this.proposalText = proposalText;
                                this.datasetAssistable = datasetAssistable;
                            }
                            ContentAssistContext.prototype.getText = function () {
                                return this.proposalText;
                            };
                            ContentAssistContext.prototype.getTokenisationState = function () {
                                return this.tokenisationState;
                            };
                            ContentAssistContext.prototype.getTokenType = function () {
                                return this.tokenType;
                            };
                            ContentAssistContext.prototype.getTokenName = function () {
                                return this.tokenName;
                            };
                            ContentAssistContext.prototype.getDatasetAssistable = function () {
                                return this.datasetAssistable;
                            };
                            ContentAssistContext.prototype.toString = function () {
                                return "state[" + this.tokenisationState + "] token type: " + this.tokenType + " proposal text: " + this.proposalText + " token name: " + this.tokenName;
                            };
                            return ContentAssistContext;
                        }());
                        common.ContentAssistContext = ContentAssistContext;
                    })(common = context.common || (context.common = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_22) {
                    var common;
                    (function (common) {
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        var SasContentAssist = /** @class */ (function () {
                            function SasContentAssist() {
                                this.transpilableCollections = null;
                                this.sasLanguageSupporter = null;
                                this.proposers = null;
                            }
                            SasContentAssist.prototype.postConstruct = function () {
                                if (this.proposers == null) {
                                    this.proposers = [this.datastepOptionsContentAssistProposer, this.formatContentAssistProposer, this.functionContentAssistProposer, this.globalStateContentAssistProposer, this.procChooserContentAssistProposer, this.componentChooserContentAssistProposer, this.procOptionsContentAssistProposer, this.optionValueContentAssistProposer, this.statementContentAssistProposer, this.optionsStatementContentAssistProposer, this.stepStateContentAssistProposer, this.macroContentAssistProposer, this.callRoutineContentAssistProposer, this.imlFunctionContentAssistProposer, this.libnameContentAssistProposer, this.libnameOptionValueContentAssistProposer, this.sqlContentAssistProposer];
                                }
                            };
                            /**
                             * Returns a list of proposals based on the given context.
                             *
                             * @param context
                             * Context object describing server state and editor context.
                             * @return
                             */
                            SasContentAssist.prototype.getProposals = function (context) {
                                var builder = this.transpilableCollections.transpilableListBuilder();
                                for (var index121 = 0; index121 < this.proposers.length; index121++) {
                                    var proposer = this.proposers[index121];
                                    {
                                        proposer.addProposals(builder, context);
                                    }
                                }
                                builder.removeDuplicates(this.textProposalComparator);
                                for (var it = builder.build().iterator(); it.hasNext();) {
                                    var proposal = it.next();
                                    var upperCase = this.proposalTextCasePreference != null ? this.proposalTextCasePreference.isProposalTextUpperCase(proposal.getType()) : false;
                                    var text = context.getText();
                                    if (text != null && text.length > 0) {
                                        var firstLetterString = text.substring(0, 1);
                                        switch ((firstLetterString.charAt(0))) {
                                            case common.SasLanguage.DOUBLE_QUOTE:
                                            case common.SasLanguage.SINGLE_QUOTE:
                                            case common.SasLanguage.DOLLAR:
                                            case common.SasLanguage.PERCENT:
                                            case common.SasLanguage.AMPERSAND:
                                                if (text.length > 1) {
                                                    firstLetterString = text.substring(1, 1 + 1);
                                                }
                                                else {
                                                    firstLetterString = "";
                                                }
                                        }
                                        upperCase = StringUtils.isUpperCase(firstLetterString);
                                    }
                                    proposal.setTextCase(upperCase);
                                }
                                return builder.buildSorted(this.displayProposalComparator);
                            };
                            return SasContentAssist;
                        }());
                        common.SasContentAssist = SasContentAssist;
                    })(common = context_22.common || (context_22.common = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        var ThreadState;
                        (function (ThreadState) {
                            ThreadState[ThreadState["RUNNABLE"] = 0] = "RUNNABLE";
                            ThreadState[ThreadState["NEW"] = 1] = "NEW";
                            ThreadState[ThreadState["TERMINATED"] = 2] = "TERMINATED";
                        })(ThreadState = model.ThreadState || (model.ThreadState = {}));
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_23) {
                    var model;
                    (function (model) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var ObjectUtils = com.wpc.wps.language.context.utils.ObjectUtils;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        /**
                         * Abstract class that iterates through all the tokens and processes them to do something useful:
                         * superclass of {@link ModelBuilder} and {@link SasParser}.
                         *
                         * @author ml
                         */
                        var TokenProcessor = /** @class */ (function () {
                            function TokenProcessor() {
                                /**
                                 * Allows us to record a state for when SasParser is running in a Thread.
                                 * Note: Interrupt state must never match the running state.
                                 */
                                this.state = model.ThreadState.NEW;
                            }
                            /**
                             * Process token in an Array.
                             *
                             * @param tokens
                             * @throws Exception
                             */
                            TokenProcessor.prototype.processTokenArray = function (tokens) {
                                var prevToken = null;
                                for (var i = 0; i < tokens.length; i++) {
                                    if (this.isInterrupted()) {
                                        return;
                                    }
                                    var token = tokens[i];
                                    var nextState = i + 1 < tokens.length ? tokens[i + 1].getState() : null;
                                    prevToken = this.processTokensIncremental(token, prevToken, nextState);
                                }
                            };
                            /**
                             * Process tokens in a list.
                             *
                             * @param tokens
                             * @throws Exception
                             */
                            TokenProcessor.prototype.processTokenList = function (tokens) {
                                var prevToken = null;
                                for (var i = 0; i < tokens.size(); i++) {
                                    if (this.isInterrupted()) {
                                        return;
                                    }
                                    var token = tokens.get(i);
                                    var nextState = i + 1 < tokens.size() ? tokens.get(i + 1).getState() : null;
                                    prevToken = this.processTokensIncremental(token, prevToken, nextState);
                                }
                            };
                            /**
                             * Incrementally process tokens. This is called repeatedly via the process(Token[]) method in
                             * Eclipse.
                             * CodeMirror cannot supply all the tokens in one go, so must instead call this method repeatedly.
                             *
                             * @param token current token
                             * @param prevToken previous token (with non-null TokenType).
                             * @param nextTokenisationState the next ITokenisationState for the token (this is returned by
                             * TokenisationResult during tokenisation but is not stored in the Token)
                             * @return the token to set as the prevToken for the next call
                             * @throws Exception
                             */
                            TokenProcessor.prototype.processTokensIncremental = function (token, prevToken, nextTokenisationState) {
                                var tokenType = token.getTokenType();
                                if (tokenType == null && nextTokenisationState != null) {
                                    return prevToken;
                                }
                                var context = new TokenProcessor.TokenProcessContext(this, token, prevToken, nextTokenisationState);
                                this.processTokenContext(context);
                                return token;
                            };
                            /**
                             * Initialise this processor for use: setup the {@link TokenStringLookup}.
                             *
                             * @param tokenStringLookup
                             */
                            TokenProcessor.prototype.connect = function (tokenStringLookup) {
                                this.strLookup = tokenStringLookup;
                                this.state = model.ThreadState.RUNNABLE;
                            };
                            /**
                             * Check if the {@link ITokenisationState} is setting the PROC name.
                             *
                             * @param tokenisationState
                             * @return
                             */
                            TokenProcessor.prototype.isProcName = function (tokenisationState) {
                                return (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.ProcChooserState);
                            };
                            /**
                             * Check the context for a 'PROC'.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isProcStart = function (context) {
                                return context.tokenType == TokenType.major_keyword && this.isProcName(context.unmaskedNextTokenisationState);
                            };
                            /**
                             * Check for an explicit end of PROC or DATA step. Checks for RUN or QUIT keyword as well as a state
                             * transition (RUN does not always end a PROC because of run groups).
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isEndOfStepState = function (context) {
                                var previousTokenWasRunOrQuit = (context.unmaskedPrevTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) && context.prevTokenType == TokenType.major_keyword && ((SasLanguage.RUN === context.getUpperPrevString()) || (SasLanguage.QUIT === context.getUpperPrevString()));
                                var currentTokenIsTransition = (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.TransitionState);
                                if (previousTokenWasRunOrQuit && currentTokenIsTransition) {
                                    return !(context.unmaskedTokenisationState.getNextState() instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState);
                                }
                                return false;
                            };
                            /**
                             * Check if CARDS or DATALINES finished.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isCardsFinished = function (context) {
                                return (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DatalinesState) && context.stateChanging;
                            };
                            /**
                             * Check if CARDS or DATALINES started.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isCardsStarted = function (context) {
                                return context.stateChanged && (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DatalinesState);
                            };
                            /**
                             * Check if macro definition has ended.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isMacroDefinitionEnd = function (context) {
                                return (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroEndState) && context.stateChanging && context.tokenType == TokenType.semicolon;
                            };
                            /**
                             * Check if macro definition started.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isMacroDefinitionStarted = function (context) {
                                return context.tokenType == TokenType.macro_keyword && (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroNameState);
                            };
                            /**
                             * Is TransitionState and not a subclass thereof (this is the state after RUN/QUIT).
                             * N.B. can't use getClass() to compare as it won't transpile.
                             *
                             * @param tokenisationState the tokenisation state
                             * @return
                             */
                            TokenProcessor.prototype.isTransitionState = function (tokenisationState) {
                                return (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.TransitionState) && !((tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.BaseStatementState) || (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroEndState));
                            };
                            /**
                             * Is in DataNameState: tokenisationState is instance of {@link DataNameState} or it's a
                             * {@link StringLiteralState} whose parent is {@link DataNameState} or it's a
                             * {@link BlockCommentState} whose parent is {@link DataNameState}
                             *
                             * @param tokenisationState
                             * @return
                             */
                            TokenProcessor.prototype.isDataNameState = function (tokenisationState) {
                                return (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState) || (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.StringLiteralState) && (tokenisationState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState) || (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.BlockCommentState) && (tokenisationState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState) || (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroFunctionState) && (tokenisationState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState) || (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroInvocationExpressionState) && (tokenisationState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState);
                            };
                            TokenProcessor.prototype.interrupt = function () {
                                this.state = model.ThreadState.TERMINATED;
                            };
                            TokenProcessor.prototype.isInterrupted = function () {
                                return this.state == model.ThreadState.TERMINATED;
                            };
                            /**
                             * Test for end of PROC options or DATA options.
                             *
                             * @param context
                             * @return true if it's a semicolon marking the end or proc data options and next state is
                             * {@link AbstractStepState}
                             */
                            TokenProcessor.prototype.isEndOfProcDataOptions = function (context) {
                                var astractStepStateOptionsState = this.isAbstractStepStateOptionsState(context);
                                if (context.tokenType == TokenType.semicolon && (astractStepStateOptionsState || (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DataNameState))) {
                                    return (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState);
                                }
                                return false;
                            };
                            /**
                             * Check if we're currently in step options, this could be an option value.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isAbstractStepStateOptionsState = function (context) {
                                var tokenisationState = context.unmaskedTokenisationState;
                                if (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.StringLiteralState) {
                                    tokenisationState = tokenisationState.getParent();
                                }
                                else if (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.BlockCommentState) {
                                    tokenisationState = tokenisationState.getParent();
                                }
                                if (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.OptionValueState) {
                                    tokenisationState = tokenisationState.getParent();
                                }
                                var isAbstractStepStateOptionsState = (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepStateOptionsState);
                                return isAbstractStepStateOptionsState;
                            };
                            /**
                             * Detect PROC or DATA major keywords.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isProcOrData = function (context) {
                                if (context.tokenType == TokenType.macro_keyword && ((context.getUpperString() === SasLanguage.PROC) || (context.getUpperString() === SasLanguage.DATA))) {
                                    return true;
                                }
                                return false;
                            };
                            /**
                             * Check if it's the start of a statement.
                             *
                             * @param context
                             * @return
                             */
                            TokenProcessor.prototype.isStatementStart = function (context) {
                                return (context.unmaskedTokenisationState != null && context.unmaskedTokenisationState["__interfaces"] != null && context.unmaskedTokenisationState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.StatementParentState") >= 0) && ((context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.StatementState) || (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) || (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroInvocationExpressionState) || (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.ComponentChooserState) || (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.CallRoutineChooserState));
                            };
                            /**
                             * Remove any {@link MacroDelegatingState} or {@link StringLiteralState} that may be masking the
                             * state if interest.
                             *
                             * @param its
                             * @return
                             */
                            TokenProcessor.removeMaskingState = function (its) {
                                if (its != null && its["__interfaces"] != null && its["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.MacroDelegatingState") >= 0) {
                                    return TokenProcessor.removeMaskingState(its.getMacroDelegateState());
                                }
                                else if (its instanceof com.wpc.wps.language.context.tokenisation.state.StringLiteralState) {
                                    return TokenProcessor.removeMaskingState(its.getParent());
                                }
                                return its;
                            };
                            return TokenProcessor;
                        }());
                        model.TokenProcessor = TokenProcessor;
                        (function (TokenProcessor) {
                            /**
                             * Class to wrap all parameters into one. Also removes any {@link MacroDelegatingState} or
                             * {@link StringLiteralState} that may be masking the state that's actually doing the tokenisation.
                             */
                            var TokenProcessContext = /** @class */ (function () {
                                function TokenProcessContext(__parent, token, prevToken, nextTokenisationState) {
                                    this.__parent = __parent;
                                    this.token = token;
                                    this.prevToken = prevToken;
                                    this.nextTokenisationState = nextTokenisationState;
                                    this.tokenType = token.getTokenType();
                                    this.prevTokenType = prevToken != null ? prevToken.getTokenType() : null;
                                    this.prevTokenisationState = prevToken != null ? prevToken.getState() : null;
                                    this.tokenisationState = token.getState();
                                    this.unmaskedTokenisationState = TokenProcessor.removeMaskingState(this.tokenisationState);
                                    this.unmaskedPrevTokenisationState = TokenProcessor.removeMaskingState(this.prevTokenisationState);
                                    this.unmaskedNextTokenisationState = TokenProcessor.removeMaskingState(nextTokenisationState);
                                    this.stateChanged = !ObjectUtils.equalStates(this.unmaskedPrevTokenisationState, this.unmaskedTokenisationState);
                                    this.stateChanging = !ObjectUtils.equalStates(this.unmaskedNextTokenisationState, this.unmaskedTokenisationState);
                                    var log = this.__parent.getLogger();
                                    if (log != null && this.tokenType != null && log.isTraceEnabled()) {
                                        var nextTokStateName = nextTokenisationState != null ? nextTokenisationState.getName() : "";
                                        log.trace("{}: \"{}\" token: {}; next state: {}", this.__parent.strLookup.getLine(token), this.getString().replace("\r", "\\r").replace("\n", "\\n"), token, nextTokStateName);
                                    }
                                }
                                /**
                                 * Get the string for the token, lookup if necessary, case is unchanged from original.
                                 *
                                 * @return
                                 */
                                TokenProcessContext.prototype.getString = function () {
                                    if (this.string == null) {
                                        this.string = this.__parent.strLookup.getString(this.token);
                                    }
                                    return this.string;
                                };
                                /**
                                 * Get the string for the token in upper case.
                                 *
                                 * @return
                                 */
                                TokenProcessContext.prototype.getUpperString = function () {
                                    if (this.upperString == null) {
                                        this.upperString = StringUtils.toUpperCase(this.getString());
                                    }
                                    return this.upperString;
                                };
                                /**
                                 * Get the string for the previous token, lookup if necessary, case is unchanged from original.
                                 *
                                 * @return
                                 */
                                TokenProcessContext.prototype.getPrevString = function () {
                                    if (this.prevString == null) {
                                        this.prevString = this.__parent.strLookup.getString(this.prevToken);
                                    }
                                    return this.prevString;
                                };
                                /**
                                 * Get the string for the previous token in upper case.
                                 *
                                 * @return
                                 */
                                TokenProcessContext.prototype.getUpperPrevString = function () {
                                    if (this.upperPrevString == null) {
                                        this.upperPrevString = StringUtils.toUpperCase(this.getPrevString());
                                    }
                                    return this.upperPrevString;
                                };
                                return TokenProcessContext;
                            }());
                            TokenProcessor.TokenProcessContext = TokenProcessContext;
                        })(TokenProcessor = model.TokenProcessor || (model.TokenProcessor = {}));
                    })(model = context_23.model || (context_23.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_24) {
                    var model;
                    (function (model) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var Stack = com.wpc.wps.language.context.utils.Stack;
                        /**
                         * Builds a model for the Workbench outline view through the ModelBuilderCallback. Also folds code in
                         * CodeMirror via the same callback.
                         *
                         * @author ml
                         * @author Nick Robson [nr]
                         */
                        var ModelBuilder = /** @class */ (function (_super) {
                            __extends(ModelBuilder, _super);
                            function ModelBuilder() {
                                var _this = _super !== null && _super.apply(this, arguments) || this;
                                _this.transpilableCollections = null;
                                _this.datastepName = "";
                                return _this;
                            }
                            ModelBuilder.prototype.postConstruct = function () {
                                this.callbackStack = new Stack(this.transpilableCollections);
                            };
                            /**
                             * Debug log. Logs the line, message and token.
                             *
                             * @param str message to log
                             * @param token token to debug
                             */
                            ModelBuilder.prototype.debugLineAndToken = function (str, token) {
                                if (this.log != null && this.log.isDebugEnabled()) {
                                    this.log.debug("{} {} {}", this.strLookup.getLine(token), str, token);
                                }
                            };
                            /**
                             * Build the model via the tokens.
                             *
                             * @param rootNode Root node: all other nodes as added as branches of it.
                             * @param tokens Tokens
                             * @throws Exception
                             */
                            ModelBuilder.prototype.build = function (rootNode, tokens) {
                                this.currentNode = rootNode;
                                this.processTokenArray(tokens);
                            };
                            ModelBuilder.prototype.getLogger = function () {
                                return this.log;
                            };
                            /**
                             * Incrementally build the model. Check each type of node: Comment, PROC, step, Datastep, Cards,
                             * Macro definition, R block.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             */
                            ModelBuilder.prototype.processTokenContext = function (context) {
                                this.doComment(context);
                                this.doProc(context);
                                this.doStepFinished(context);
                                this.doDatastep(context);
                                this.doCards(context);
                                this.doMacroDefinition(context);
                                this.doRsubmit(context);
                            };
                            /**
                             * Detect start/finish of comment blocks.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc parameters
                             */
                            ModelBuilder.prototype.doComment = function (context) {
                                if (context.prevTokenType != TokenType.comment && context.tokenType == TokenType.comment) {
                                    this.debugLineAndToken("commentStarted", context.token);
                                    if (this.commentCallback != null) {
                                        this.setCurrentNodeFromChild(this.commentCallback.started(context.token, this.currentNode));
                                        this.callbackStack.push(this.commentCallback);
                                    }
                                }
                                if (context.prevTokenType == TokenType.comment && context.tokenType != TokenType.comment) {
                                    this.debugLineAndToken("commentFinished", context.prevToken);
                                    if (this.commentCallback != null) {
                                        this.setCurrentNode(this.commentCallback.finished(context.prevToken));
                                        this.callbackStack.pop();
                                    }
                                }
                            };
                            /**
                             * Detect start of proc and name of proc.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc parameters
                             */
                            ModelBuilder.prototype.doProc = function (context) {
                                if (this.isProcStart(context)) {
                                    this.debugLineAndToken("procStarted", context.token);
                                    if (context.prevToken != null && this.callbackStack.peek() != null && this.isCurrentStepCallback()) {
                                        this.setCurrentNodeFromChild(this.callbackStack.peek().finished(context.prevToken));
                                        this.callbackStack.pop();
                                    }
                                    if (this.procCallback != null) {
                                        this.setCurrentNodeFromChild(this.procCallback.started(context.token, this.currentNode));
                                        this.callbackStack.push(this.procCallback);
                                    }
                                }
                                if (this.isProcName(context.unmaskedTokenisationState)) {
                                    this.debugLineAndToken("procName", context.token);
                                    if (this.procCallback != null) {
                                        this.procCallback.setName(context.getString());
                                    }
                                }
                            };
                            /**
                             * Check if the current callback is equal to PROC or DATA {@link NodeCallback}.
                             *
                             * @return
                             */
                            ModelBuilder.prototype.isCurrentStepCallback = function () {
                                var callback = this.callbackStack.peek();
                                return callback == this.procCallback || callback == this.datastepCallback;
                            };
                            /**
                             * Detect start of datastep and name of datastep.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc parameters
                             */
                            ModelBuilder.prototype.doDatastep = function (context) {
                                var dataNameState = this.isDataNameState(context.unmaskedTokenisationState);
                                var nextDataNameState = this.isDataNameState(context.nextTokenisationState);
                                if (!dataNameState && nextDataNameState && (SasLanguage.DATA === context.getUpperString())) {
                                    if (TokenType.major_keyword == context.tokenType) {
                                        if (context.prevToken != null && this.callbackStack.peek() != null && this.isCurrentStepCallback()) {
                                            var ln = this.callbackStack.peek().finished(context.prevToken);
                                            this.callbackStack.pop();
                                            this.setCurrentNodeFromChild(ln);
                                        }
                                        if (this.datastepCallback != null) {
                                            var ln = this.datastepCallback.started(context.token, this.currentNode);
                                            this.callbackStack.push(this.datastepCallback);
                                            this.setCurrentNodeFromChild(ln);
                                        }
                                    }
                                }
                                else if (dataNameState) {
                                    if (this.datastepCallback != null) {
                                        this.doDatastepName(context);
                                    }
                                }
                            };
                            /**
                             * In a DATA name, concatenate the token strings to get the complete name which when finished is
                             * reported to the {@link #datastepCallback}.
                             *
                             * @param context
                             */
                            ModelBuilder.prototype.doDatastepName = function (context) {
                                if (context.tokenType != TokenType.comment && context.tokenType != TokenType.semicolon && context.tokenType != TokenType.macro_keyword && context.tokenType != TokenType.macro_function) {
                                    if (context.prevToken.getOffset() + context.prevToken.getLength() < context.token.getOffset() && this.datastepName.length > 0) {
                                        this.datastepName += ' ';
                                    }
                                    this.datastepName = this.datastepName + SasLanguage.stripStringLiteral(context.getString());
                                }
                                if (this.isEndOfProcDataOptions(context)) {
                                    if (this.log != null) {
                                        this.log.trace("Datastep name callback: " + this.datastepName);
                                    }
                                    this.datastepCallback.setName(this.datastepName);
                                    this.datastepName = "";
                                }
                            };
                            /**
                             * Detect run/quit after a datastep/procstep. Also check that a datastep ends with a run instead of a
                             * quit.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc parameters
                             */
                            ModelBuilder.prototype.doStepFinished = function (context) {
                                if (this.isEndOfStepState(context)) {
                                    this.debugLineAndToken("stepFinished", context.token);
                                    if (this.callbackStack.peek() != null && this.isCurrentStepCallback()) {
                                        this.setCurrentNode(this.callbackStack.peek().finished(context.token));
                                        this.callbackStack.pop();
                                    }
                                }
                            };
                            /**
                             * Detect CARDS or CARDS4 start/finish.
                             */
                            ModelBuilder.prototype.doCards = function (context) {
                                if (context.stateChanged && (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DatalinesState)) {
                                    this.debugLineAndToken("datastepCardsStarted", context.token);
                                    if (this.cardsCallback != null) {
                                        this.setCurrentNodeFromChild(this.cardsCallback.started(context.token, this.currentNode));
                                        this.callbackStack.push(this.cardsCallback);
                                    }
                                }
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DatalinesState) && context.stateChanging) {
                                    this.debugLineAndToken("datastepCardsFinished", context.token);
                                    if (this.cardsCallback != null) {
                                        this.setCurrentNode(this.cardsCallback.finished(context.token));
                                        this.callbackStack.pop();
                                    }
                                    if (this.datastepCallback != null) {
                                        this.setCurrentNode(this.datastepCallback.finished(context.token));
                                        this.callbackStack.pop();
                                    }
                                }
                            };
                            /**
                             * Detect Macro definition start/name/finish.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             */
                            ModelBuilder.prototype.doMacroDefinition = function (context) {
                                if (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroNameState) {
                                    this.debugLineAndToken("macroDefinitionStarted", context.token);
                                    if (this.macroDefinitionCallback != null) {
                                        this.setCurrentNodeFromChild(this.macroDefinitionCallback.started(context.token, this.currentNode));
                                        this.callbackStack.push(this.macroDefinitionCallback);
                                    }
                                }
                                if (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroNameState) {
                                    if (this.macroDefinitionCallback != null) {
                                        this.macroDefinitionCallback.setName(context.getString());
                                    }
                                }
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroEndState) && context.stateChanging && context.tokenType == TokenType.semicolon || this.isOldStyleMacroEnd(context)) {
                                    this.debugLineAndToken("macroDefinitionFinished", context.token);
                                    if (context.prevToken != null && this.callbackStack.peek() != null && this.isCurrentStepCallback()) {
                                        this.callbackStack.peek().finished(context.prevToken);
                                        this.callbackStack.pop();
                                    }
                                    if (this.macroDefinitionCallback != null) {
                                        this.setCurrentNode(this.macroDefinitionCallback.finished(context.token));
                                        this.callbackStack.pop();
                                    }
                                }
                            };
                            /**
                             *
                             * @param context
                             * @return true if the current {@link ITokenisationState} is in an old style macro and the next
                             * {@link ITokenisationState} is not.
                             */
                            ModelBuilder.prototype.isOldStyleMacroEnd = function (context) {
                                return this.isInOldStyleMacro(context.unmaskedTokenisationState) && !this.isInOldStyleMacro(context.unmaskedNextTokenisationState);
                            };
                            /**
                             *
                             * @param tokenisationState
                             * @return true if the {@link ITokenisationState} has a parent {@link MacroDefinitionState} that is
                             * an old style macro.
                             */
                            ModelBuilder.prototype.isInOldStyleMacro = function (tokenisationState) {
                                if (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractTokenisationState) {
                                    var abstractTokenisationState = tokenisationState;
                                    var parentMacro = abstractTokenisationState.getParentMacro();
                                    return parentMacro != null && parentMacro.isOldStyleMacro();
                                }
                                return false;
                            };
                            /**
                             * Detect start/finish of Rsubmit
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             */
                            ModelBuilder.prototype.doRsubmit = function (context) {
                                if (context.tokenType == TokenType.major_keyword && (SasLanguage.RSUBMIT === context.getUpperString())) {
                                    if (context.prevToken != null && this.callbackStack.peek() != null && this.isCurrentStepCallback()) {
                                        this.setCurrentNodeFromChild(this.callbackStack.peek().finished(context.prevToken));
                                        this.callbackStack.pop();
                                    }
                                    this.rsubmitStarted = true;
                                    this.debugLineAndToken("rsubmit", context.token);
                                    if (this.rsubmitCallback != null) {
                                        this.setCurrentNodeFromChild(this.rsubmitCallback.started(context.token, this.currentNode));
                                        this.callbackStack.push(this.rsubmitCallback);
                                    }
                                }
                                if (context.tokenType == TokenType.major_keyword && (SasLanguage.ENDRSUBMIT === context.getUpperString()) && this.rsubmitStarted) {
                                    if (context.prevToken != null && this.callbackStack.peek() != null && this.isCurrentStepCallback()) {
                                        this.setCurrentNodeFromChild(this.callbackStack.peek().finished(context.prevToken));
                                        this.callbackStack.pop();
                                    }
                                    this.rsubmitStarted = false;
                                    this.debugLineAndToken("endrsubmit", context.token);
                                    if (this.rsubmitCallback != null) {
                                        this.setCurrentNode(this.rsubmitCallback.finished(context.token));
                                        this.callbackStack.pop();
                                    }
                                }
                            };
                            ModelBuilder.prototype.setCurrentNode = function (node) {
                                this.currentNode = node;
                            };
                            ModelBuilder.prototype.setCurrentNodeFromChild = function (node) {
                                if (this.isAssignableToBranchNode(node)) {
                                    this.currentNode = node;
                                }
                            };
                            /**
                             * Is TransitionState and not a subclass thereof (this is the state after RUN/QUIT).
                             * N.B. can't use getClass() to compare as it won't transpile.
                             *
                             * @param tokenisationState the tokenisation state
                             * @return
                             */
                            ModelBuilder.prototype.isTransitionState = function (tokenisationState) {
                                return (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.TransitionState) && !((tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.BaseStatementState) || (tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroEndState));
                            };
                            return ModelBuilder;
                        }(model.TokenProcessor));
                        model.ModelBuilder = ModelBuilder;
                    })(model = context_24.model || (context_24.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        /**
                         * Implementation of {@link ParseListener} for use with a code editor. Uses the {@link ErrorHandler} to
                         * generate errors in the editor.
                         *
                         * @author ml
                         */
                        var EditorParseErrorListener = /** @class */ (function () {
                            function EditorParseErrorListener(errorHandler) {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.model.ParseErrorListener"] });
                                this.errorHandler = errorHandler;
                            }
                            EditorParseErrorListener.prototype.unknownProc = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.PROC_0_NOT_KNOWN, string);
                            };
                            EditorParseErrorListener.prototype.unknownProcOption = function (token, procName, optionName) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.PROC_OPTION_0_NOT_KNOWN_ON_1, optionName, procName);
                            };
                            EditorParseErrorListener.prototype.unknownDatastepFunction = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.DATASTEP_FUNCTION_0_NOT_KNOWN, string);
                            };
                            EditorParseErrorListener.prototype.unknownGlobalStatement = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.GLOBAL_STATEMENT_0_NOT_KNOWN, string);
                            };
                            EditorParseErrorListener.prototype.unknownProcStatement = function (token, procName, stmtName) {
                                if (token.getState() instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) {
                                    var state = token.getState();
                                    if (!(state.getCurrentStep() instanceof com.wpc.wps.language.context.information.UnknownStepInfo)) {
                                        this.errorHandler.error(token, model.ErrorMessageKeys.PROC_STATEMENT_0_NOT_KNOWN_ON_1, stmtName, procName);
                                    }
                                }
                            };
                            EditorParseErrorListener.prototype.unknownDataStatement = function (token, stmtName) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.DATA_STATEMENT_0_NOT_KNOWN, stmtName);
                            };
                            EditorParseErrorListener.prototype.badExpression = function (token, string) {
                                var state = model.TokenProcessor.removeMaskingState(token.getState());
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState) {
                                    var aes = state;
                                    var bracketCount = aes.getBracketCount();
                                    var key = null;
                                    var handled = false;
                                    if (bracketCount > 0) {
                                        switch ((aes.getInternalState())) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND:
                                                key = model.ErrorMessageKeys.EXPECTED_CLOSE_BRACKET_BUT_FOUND_0_;
                                                handled = true;
                                                break;
                                            default:
                                        }
                                    }
                                    if (!handled) {
                                        switch ((aes.getInternalState())) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                                key = model.ErrorMessageKeys.EXPECTED_A_NAME_NUMERIC_OR_STRING_CONSTANT_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.OF:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MISSING:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.FORMAT_OR_OBJECT:
                                                key = model.ErrorMessageKeys.EXPECTED_NAME_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN:
                                                key = model.ErrorMessageKeys.EXPECTED_OPEN_BRACKET_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED:
                                                key = model.ErrorMessageKeys.EXPECTED_OPEN_BRACKET_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS_FOUND:
                                                if (aes instanceof com.wpc.wps.language.context.tokenisation.state.IfStatementState) {
                                                    key = model.ErrorMessageKeys.EXPECTED_THEN_OR_SEMICOLON_BUT_FOUND_0_;
                                                }
                                                else {
                                                    key = model.ErrorMessageKeys.EXPECTED_SEMICOLON_BUT_FOUND_0_;
                                                }
                                                break;
                                            default:
                                                key = "";
                                                break;
                                        }
                                    }
                                    this.errorHandler.error(token, key, string);
                                }
                                else if (state instanceof com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState) {
                                    var ades = state;
                                    var bracketCount = ades.getBracketCount();
                                    var handled = false;
                                    var key = null;
                                    if (bracketCount > 0) {
                                        switch ((ades.getInternalState())) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                key = model.ErrorMessageKeys.EXPECTED_CLOSE_BRACKET_BUT_FOUND_0_;
                                                handled = true;
                                                break;
                                            default:
                                        }
                                    }
                                    if (!handled) {
                                        switch ((ades.getInternalState())) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.OVER:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.FORMAT_OR_OBJECT_OR_MISSING:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                                key = model.ErrorMessageKeys.EXPECTED_NAME_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR_FOUND:
                                                key = model.ErrorMessageKeys.EXPECTED_EQUALS_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                key = model.ErrorMessageKeys.EXPECTED_TO_BY_WHILE_UNTIL_BUT_FOUND_0_;
                                                break;
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.STOP_INC:
                                                key = model.ErrorMessageKeys.EXPECTED_A_NAME_NUMERIC_OR_STRING_CONSTANT_BUT_FOUND_0_;
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    this.errorHandler.error(token, key, string);
                                }
                            };
                            EditorParseErrorListener.prototype.statementError = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.STATEMENT_0_UNKNOWN_IN_THIS_CONTEXT, string);
                            };
                            EditorParseErrorListener.prototype.macroNameError = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.INVALID_MACRO_NAME, string);
                            };
                            EditorParseErrorListener.prototype.dataNameError = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.INVALID_DATA_NAME, string);
                            };
                            EditorParseErrorListener.prototype.unknownSystemOption = function (token, optionName) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.SYSTEM_OPTION_0_NOT_KNOWN, optionName);
                            };
                            EditorParseErrorListener.prototype.unknownDatastepOption = function (token, optionName) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.DATASTEP_OPTION_0_NOT_KNOWN, optionName);
                            };
                            EditorParseErrorListener.prototype.unknownCallRoutine = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.CALL_ROUTINE_0_NOT_KNOWN, string);
                            };
                            EditorParseErrorListener.prototype.unknownOdsDestination = function (token, string) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.ODS_DESTINATION_0_NOT_KNOWN, string);
                            };
                            EditorParseErrorListener.prototype.unknownLibnameOption = function (token, name) {
                                this.errorHandler.error(token, model.ErrorMessageKeys.LIBNAME_OPTION_0_NOT_KNOWN, name);
                            };
                            return EditorParseErrorListener;
                        }());
                        model.EditorParseErrorListener = EditorParseErrorListener;
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        /**
                         * Default implementation of ParserDelegate that iterates through the tokens to see if
                         * {@link UnknownStatementState} is present (and not in a macro).
                         *
                         * @author ml
                         */
                        var BasicStatementParser = /** @class */ (function () {
                            function BasicStatementParser() {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.model.ParserDelegate"] });
                            }
                            /**
                             * {@inheritDoc}
                             *
                             * If {@link UnknownStatementState} is after the first token, an error is reported
                             * as an unknown proc statement if the {@link StatementParentState} is {@link ProcStepState}, unknown
                             * datastep statement if the {@link StatementParentState} is {@link DataStepState}, otherwise it's
                             * reported as an unknown global statement.
                             *
                             * {@link UnknownStatementState} in any other token is reported as a generic statement error.
                             *
                             * @throws Exception
                             */
                            BasicStatementParser.prototype.parse = function (tokens, parseListener, parseErrorListener, tokenStrLookup) {
                                var i = 0;
                                var token = null;
                                for (var it = tokens.iterator();;) {
                                    var nextToken = it.hasNext() ? it.next() : null;
                                    var nextTokenisationState = nextToken != null ? nextToken.getState() : null;
                                    var statementParentState = nextToken != null ? nextTokenisationState.getStatementParentState() : null;
                                    if (nextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroInvocationExpressionState) {
                                        return;
                                    }
                                    if (nextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) {
                                        if (i == 1) {
                                            if (statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) {
                                                var procStepState = statementParentState;
                                                parseErrorListener.unknownProcStatement(token, procStepState.getCurrentStep().getLanguageInfo().getName(), tokenStrLookup.getString(token));
                                            }
                                            else if (nextToken.getTokenType() == TokenType.semicolon) {
                                                return;
                                            }
                                            else if (statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.DataStepState) {
                                                parseErrorListener.unknownDataStatement(token, tokenStrLookup.getString(token));
                                            }
                                            else {
                                                parseErrorListener.unknownGlobalStatement(token, tokenStrLookup.getString(token));
                                            }
                                        }
                                        else if (nextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownLibnameOptionState) {
                                            parseErrorListener.unknownLibnameOption(token, nextTokenisationState.getOption());
                                        }
                                        else {
                                            parseErrorListener.statementError(token, tokenStrLookup.getString(token));
                                        }
                                        break;
                                    }
                                    i++;
                                    token = nextToken;
                                    if (token == null) {
                                        break;
                                    }
                                }
                            };
                            return BasicStatementParser;
                        }());
                        model.BasicStatementParser = BasicStatementParser;
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_25) {
                    var model;
                    (function (model) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var AssignmentExpressionState = com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState;
                        /**
                         * Implementation which is just moving existing code - TODO this will be replaced by an ANTLR
                         * implementation.
                         *
                         * @author ml
                         */
                        var SimpleExpressionParser = /** @class */ (function (_super) {
                            __extends(SimpleExpressionParser, _super);
                            function SimpleExpressionParser() {
                                var _this = _super.call(this) || this;
                                Object.defineProperty(_this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.model.ExpressionParser"] });
                                return _this;
                            }
                            SimpleExpressionParser.prototype.parseExpression = function (strLookup, parseErrorListener, tokens, iml) {
                                this.connect(strLookup);
                                this.parseErrorListener = parseErrorListener;
                                this.iml = iml;
                                this.processTokenList(tokens);
                            };
                            /**
                             * Process token context: incremental parse of the expression. Checks for
                             * {@link AssignmentExpressionState} and {@link AbstractDoExpressionState} which are checked in
                             * separate methods.
                             */
                            SimpleExpressionParser.prototype.processTokenContext = function (context) {
                                var unmaskedTokenisationState = context.unmaskedTokenisationState;
                                if (this.isIgnoreProcStepState(unmaskedTokenisationState.getStatementParentState())) {
                                    return;
                                }
                                if (unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState) {
                                    this.checkAssignmentExpressionStateErrors(context, unmaskedTokenisationState);
                                }
                                else if (unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState) {
                                    this.checkAbstractDoExpressionStateErrors(context, unmaskedTokenisationState);
                                }
                            };
                            /**
                             * Check for errors for params.token in {@link AssignmentExpressionState}. There is an error if there
                             * is a transition to {@link UnknownStatementState} or a semicolon in the wrong internal state.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @param abstractExpressionState
                             * @throws Exception
                             */
                            SimpleExpressionParser.prototype.checkAssignmentExpressionStateErrors = function (context, abstractExpressionState) {
                                var error = false;
                                var tokenisationState = context.tokenisationState;
                                if ((context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) && context.tokenType != TokenType.semicolon) {
                                    error = true;
                                    if (abstractExpressionState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) {
                                        error = false;
                                    }
                                    if ((tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroIfStatementState) && context.tokenType == TokenType.macro_keyword) {
                                        error = false;
                                    }
                                    if ((tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.IfStatementState) && context.tokenType == TokenType.keyword) {
                                        error = false;
                                    }
                                }
                                else if (context.tokenType == TokenType.semicolon) {
                                    var bracketCount = abstractExpressionState.getBracketCount();
                                    if (bracketCount == 0) {
                                        var internalState = abstractExpressionState.getInternalState();
                                        switch ((internalState)) {
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IN_STARTED:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.IS_NOT:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.MATRIX:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.NNS:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.OF:
                                            case com.wpc.wps.language.context.tokenisation.state.AssignmentExpressionState.AssignmentExpressionInternalState.SAME:
                                                error = true;
                                                break;
                                            default:
                                                error = false;
                                                break;
                                        }
                                        if ((abstractExpressionState instanceof com.wpc.wps.language.context.tokenisation.state.SelectExpressionState) && (internalState == AssignmentExpressionState.AssignmentExpressionInternalState.NNS)) {
                                            error = false;
                                        }
                                        if (context.prevTokenType == TokenType.keyword && (SasLanguage.RETURN === context.getUpperPrevString())) {
                                            error = false;
                                        }
                                    }
                                    else {
                                        error = true;
                                    }
                                    if (this.isDelegatedToMacroThenOrElseState(tokenisationState)) {
                                        error = false;
                                    }
                                }
                                if (error) {
                                    this.parseErrorListener.badExpression(context.token, context.getString());
                                }
                            };
                            /**
                             * Check if the state if after %THEN or %ELSE, complicated by the fact that it could be inside %DO:
                             * {@link TokenProcessContext#unmaskedTokenisationState} is no use here as it hides
                             * {@link MacroThenState} and {@link MacroElseState}. So if it's {@link MacroDoBodyState}, recurse
                             * with {@link MacroDoBodyState#getMacroDelegateState()}.
                             *
                             * @param state
                             * @return true if it's an instance of {@link MacroThenState} or {@link MacroElseState} or is hidden
                             * inside a {@link MacroDoBodyState}.
                             */
                            SimpleExpressionParser.prototype.isDelegatedToMacroThenOrElseState = function (state) {
                                if ((state instanceof com.wpc.wps.language.context.tokenisation.state.MacroThenState) || (state instanceof com.wpc.wps.language.context.tokenisation.state.MacroElseState)) {
                                    return true;
                                }
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.MacroDoBodyState) {
                                    return this.isDelegatedToMacroThenOrElseState(state.getMacroDelegateState());
                                }
                                return false;
                            };
                            /**
                             * Check for errors for params.token in {@link AbstractDoExpressionState}.There is an error if there
                             * is a transition to {@link UnknownStatementState} or a semicolon in the wrong internal state.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @param abstractDoExpressionState
                             * @throws Exception
                             */
                            SimpleExpressionParser.prototype.checkAbstractDoExpressionStateErrors = function (context, abstractDoExpressionState) {
                                if ((context.nextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) || context.tokenType == TokenType.semicolon) {
                                    if (abstractDoExpressionState.getParent() instanceof com.wpc.wps.language.context.tokenisation.state.UnknownStatementState) {
                                        return;
                                    }
                                    if (this.isIgnoreProcStepState(abstractDoExpressionState.getParent())) {
                                        return;
                                    }
                                    var bracketCount = abstractDoExpressionState.getBracketCount();
                                    if (context.tokenType == TokenType.semicolon && bracketCount == 0) {
                                        switch ((abstractDoExpressionState.getInternalState())) {
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.INDEX_VAR:
                                            case com.wpc.wps.language.context.tokenisation.state.AbstractDoExpressionState.DoExpressionInternalState.START_FOUND:
                                                return;
                                            default:
                                        }
                                        return;
                                    }
                                    this.parseErrorListener.badExpression(context.token, context.getString());
                                }
                            };
                            /**
                             * State is a PROC that should be ignored. Checks with {@link #isIgnoreProc(String)}
                             *
                             * @param state
                             * @return
                             */
                            SimpleExpressionParser.prototype.isIgnoreProcStepState = function (state) {
                                if (state instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) {
                                    var proc = state;
                                    var procStep = proc.getCurrentStep();
                                    return procStep == null || this.isIgnoreProc(procStep.getLanguageInfo().getName());
                                }
                                return false;
                            };
                            /**
                             * Name of state is a PROC that should be ignored.
                             *
                             * @param name
                             * @return
                             */
                            SimpleExpressionParser.prototype.isIgnoreProc = function (name) {
                                switch ((name)) {
                                    case "REPORT":
                                    case "TEMPLATE":
                                        return true;
                                }
                                return false;
                            };
                            SimpleExpressionParser.prototype.getLogger = function () {
                                return null;
                            };
                            return SimpleExpressionParser;
                        }(model.TokenProcessor));
                        model.SimpleExpressionParser = SimpleExpressionParser;
                    })(model = context_25.model || (context_25.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        /**
                         * Default implementation of ParserDelegate that checks ODS statements the second token to see if it's a
                         * keyword (or TAGSETS)
                         *
                         * @author ml
                         */
                        var OdsStatementParser = /** @class */ (function () {
                            function OdsStatementParser() {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.model.ParserDelegate"] });
                            }
                            OdsStatementParser.prototype.parse = function (tokens, parseListener, parseErrorListener, tokenStrLookup) {
                                if (tokens.size() < 2) {
                                }
                                else {
                                    var destinationToken = tokens.get(1);
                                    var string = StringUtils.toUpperCase(tokenStrLookup.getString(destinationToken));
                                    if (destinationToken.getTokenType() != TokenType.keyword && !(string === SasLanguage.TAGSETS)) {
                                        this.unknownOdsDestination(parseErrorListener, destinationToken, string);
                                    }
                                    else if (destinationToken.getTokenType() == TokenType.keyword) {
                                        this.odsDestination(parseListener, destinationToken, string);
                                    }
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#odsDestination(Token, String)}.
                             *
                             * @param parseListener
                             * @param destinationToken
                             * @param string
                             * @throws Exception
                             */
                            OdsStatementParser.prototype.odsDestination = function (parseListener, destinationToken, string) {
                                if (parseListener != null) {
                                    parseListener.odsDestination(destinationToken, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#unknownOdsDestination(Token, String)}.
                             *
                             * @param parseListener
                             * @param destinationToken
                             * @param string
                             * @throws Exception
                             */
                            OdsStatementParser.prototype.unknownOdsDestination = function (parseErrorListener, destinationToken, string) {
                                if (parseErrorListener != null) {
                                    parseErrorListener.unknownOdsDestination(destinationToken, string);
                                }
                            };
                            return OdsStatementParser;
                        }());
                        model.OdsStatementParser = OdsStatementParser;
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        /**
                         * Default implementation of ParserDelegate that checks ODS statements the second token to see if it's a
                         * keyword (or TAGSETS)
                         *
                         * @author ml
                         */
                        var CallRoutineParser = /** @class */ (function () {
                            function CallRoutineParser() {
                                Object.defineProperty(this, '__interfaces', { configurable: true, value: ["com.wpc.wps.language.context.model.ParserDelegate"] });
                            }
                            CallRoutineParser.prototype.parse = function (tokens, parseListener, parseErrorListener, tokenStrLookup) {
                                if (tokens.size() > 1) {
                                    var destinationToken = tokens.get(1);
                                    var string = StringUtils.toUpperCase(tokenStrLookup.getString(destinationToken));
                                    if (destinationToken.getTokenType() != TokenType._function) {
                                        this.unknownCallRoutine(parseErrorListener, destinationToken, string);
                                    }
                                    else {
                                        this.callRoutine(parseListener, destinationToken, string);
                                    }
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#callRoutine(Token, String)}.
                             *
                             * @param parseListener
                             * @param destinationToken
                             * @param string
                             * @throws Exception
                             */
                            CallRoutineParser.prototype.callRoutine = function (parseListener, destinationToken, string) {
                                if (parseListener != null) {
                                    parseListener.callRoutine(destinationToken, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownCallRoutine(Token, String)}.
                             *
                             * @param parseErrorListener
                             * @param destinationToken
                             * @param string
                             * @throws Exception
                             */
                            CallRoutineParser.prototype.unknownCallRoutine = function (parseErrorListener, destinationToken, string) {
                                if (parseErrorListener != null) {
                                    parseErrorListener.unknownCallRoutine(destinationToken, string);
                                }
                            };
                            return CallRoutineParser;
                        }());
                        model.CallRoutineParser = CallRoutineParser;
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context) {
                    var model;
                    (function (model) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        /**
                         * Repository for {@link ParserDelegate} implementations. Subclasses should override
                         * {@link #addStatementParsers(TranspilableMapBuilder)} to add {@link ParserDelegate} implementations for
                         * statements.
                         *
                         * @author ml
                         */
                        var ParserDelegateStore = /** @class */ (function () {
                            function ParserDelegateStore() {
                                this.transpilableCollections = null;
                            }
                            ParserDelegateStore.prototype.postConstruct = function () {
                                var mapBuilder = this.transpilableCollections.transpilableMapBuilder();
                                this.addStatementParsers(mapBuilder);
                                this.statementParserMap = mapBuilder.build();
                                this.defaultStatementParser = new model.BasicStatementParser();
                            };
                            ParserDelegateStore.prototype.addStatementParsers = function (mapBuilder) {
                                mapBuilder.put(this.getStatementParserKeyByName("", SasLanguage.ODS), new model.OdsStatementParser());
                                mapBuilder.put(this.getStatementParserKeyByName("", SasLanguage.CALL), new model.CallRoutineParser());
                            };
                            ParserDelegateStore.prototype.getStatementParserKey = function (stepInfo, currentStatement) {
                                var stepName = stepInfo != null && currentStatement != null && !currentStatement.isGlobal() ? stepInfo.getLanguageInfo().getName() : "";
                                var currentStatementName = currentStatement != null ? currentStatement.getName() : null;
                                return this.getStatementParserKeyByName(stepName, currentStatementName);
                            };
                            ParserDelegateStore.prototype.getStatementParserKeyByName = function (stepName, currentStatement) {
                                return stepName + "_" + currentStatement;
                            };
                            /**
                             * Fetch a {@link ParserDelegate} for a given statement.
                             *
                             * @param stepInfo {@link SasStepInfo} for the step that the statement is in, can be null.
                             * @param statement {@link LanguageInfo} for the statement.
                             * @return
                             */
                            ParserDelegateStore.prototype.getStatementParser = function (stepInfo, statement) {
                                if (stepInfo != null && this.isIgnoreProc(stepInfo.getLanguageInfo().getName())) {
                                    return null;
                                }
                                var parserDelegate = this.statementParserMap.get(this.getStatementParserKey(stepInfo, statement));
                                return parserDelegate != null ? parserDelegate : this.defaultStatementParser;
                            };
                            /**
                             * Fetch a {@link ParserDelegate} for a given statement.
                             *
                             * @param stepInfo {@link SasStepInfo} for the step that the statement is in, can be null.
                             * @param statement {@link LanguageInfo} for the statement.
                             * @return
                             */
                            ParserDelegateStore.prototype.getStatementParserByName = function (stepInfo, statement) {
                                if (this.isIgnoreProc(stepInfo)) {
                                    return null;
                                }
                                var parserDelegate = this.statementParserMap.get(this.getStatementParserKeyByName(stepInfo, statement));
                                return parserDelegate != null ? parserDelegate : this.defaultStatementParser;
                            };
                            /**
                             * Check names of ignored procs.
                             *
                             * @param name
                             * @return
                             */
                            ParserDelegateStore.prototype.isIgnoreProc = function (name) {
                                if (name != null) {
                                    switch ((name)) {
                                        case SasLanguage.REPORT:
                                        case SasLanguage.TEMPLATE:
                                            return true;
                                    }
                                }
                                return false;
                            };
                            return ParserDelegateStore;
                        }());
                        model.ParserDelegateStore = ParserDelegateStore;
                    })(model = context.model || (context.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
var com;
(function (com) {
    var wpc;
    (function (wpc) {
        var wps;
        (function (wps) {
            var language;
            (function (language) {
                var context;
                (function (context_26) {
                    var model;
                    (function (model) {
                        var SasLanguage = com.wpc.wps.language.context.common.SasLanguage;
                        var TokenType = com.wpc.wps.language.context.tokenisation.TokenType;
                        var StringUtils = com.wpc.wps.language.context.utils.StringUtils;
                        /**
                         * Subclass of {@link TokenProcessor} that raises parse errors through the {@link ParseListener}.
                         *
                         * Detects statements, collects together the tokens for the statement up to the semicolon, then fetches
                         * the {@link ParserDelegate} for the statement and invokes it.
                         *
                         * Detects the start / end of a PROC or DATA step, collects together all the tokens for the step
                         * (ignoring statements) and invokes the {@link ExpressionParser} implementation at the end of the step.
                         *
                         * Also checks Datastep names, PROC names and PROC/DATA options.
                         *
                         * @author ml
                         */
                        var SasParser = /** @class */ (function (_super) {
                            __extends(SasParser, _super);
                            function SasParser() {
                                var _this = _super.call(this) || this;
                                _this.transpilableCollections = null;
                                _this.functionHelper = null;
                                return _this;
                            }
                            SasParser.prototype.connectParser = function (strLookup, parseListener, parseErrorListener) {
                                this.connect(strLookup);
                                this.parseListener = parseListener;
                                this.parseErrorListener = parseErrorListener;
                            };
                            /**
                             * Incrementally parse.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @throws Exception
                             */
                            SasParser.prototype.processTokenContext = function (context) {
                                this.checkProc(context);
                                this.checkDataName(context);
                                this.checkStepOptions(context);
                                this.checkSystemOptions(context);
                                this.checkFunction(context);
                                this.processStatement(context);
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroNameState) && context.tokenType != TokenType.identifier) {
                                    this.macroNameError(context.token, context.getString());
                                }
                            };
                            /**
                             * Process {@link TokenProcessContext} for statements. Checks for start / end of
                             * statements, at the end of statements.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @throws Exception
                             */
                            SasParser.prototype.processStatement = function (context) {
                                if (this.statementTokenList != null) {
                                    this.statementTokenList.add(context.token);
                                    var isSemicolon = context.tokenType == TokenType.semicolon;
                                    var macroThenSemicolon = isSemicolon && (context.tokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroThenState);
                                    if ((isSemicolon && !macroThenSemicolon) || this.isEndOfTokens(context)) {
                                        var tokens = this.statementTokenList.build();
                                        this.statementTokenList = null;
                                        if (this.log != null) {
                                            this.log.debug("Statement finished: {}", tokens);
                                        }
                                        this.parseStatement(tokens);
                                        if (this.stepTokenList != null && isSemicolon && !macroThenSemicolon) {
                                            this.stepTokenList.add(context.token);
                                        }
                                        this.currentStatement = null;
                                    }
                                }
                                else {
                                    if (this.isStatementStart(context)) {
                                        if (this.log != null) {
                                            this.log.debug("Statement started: {}", context.token);
                                        }
                                        if (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepState) {
                                            this.stepInfo = context.unmaskedTokenisationState.getCurrentStep();
                                        }
                                        else {
                                            this.stepInfo = null;
                                        }
                                        if (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.BaseStatementState) {
                                            var statementState = context.unmaskedNextTokenisationState;
                                            this.currentStatement = statementState.getCurrentStatement();
                                        }
                                        else {
                                            this.currentStatement = null;
                                        }
                                        this.statementTokenList = this.transpilableCollections.transpilableListBuilder();
                                        this.statementTokenList.add(context.token);
                                    }
                                    if (this.statementTokenList != null) {
                                        return;
                                    }
                                    if (this.stepTokenList != null) {
                                        if (this.isEndOfStepState(context) || this.isProcOrData(context) || this.isEndOfTokens(context)) {
                                            var tokens = this.stepTokenList.build();
                                            this.stepTokenList = null;
                                            if (this.log != null) {
                                                this.log.debug("Step finished: {}", tokens);
                                            }
                                            this.parseExpression(tokens);
                                        }
                                        else {
                                            this.stepTokenList.add(context.token);
                                        }
                                    }
                                    else {
                                        if (this.isEndOfProcDataOptions(context)) {
                                            if (this.log != null) {
                                                this.log.debug("Step started: {}", context.token);
                                            }
                                            this.stepTokenList = this.transpilableCollections.transpilableListBuilder();
                                            this.stepInfo = context.unmaskedNextTokenisationState.getCurrentStep();
                                        }
                                    }
                                }
                            };
                            /**
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @return true if there are no more tokens in the list being iterated.
                             */
                            SasParser.prototype.isEndOfTokens = function (context) {
                                return context.unmaskedNextTokenisationState == null;
                            };
                            /**
                             * Check name of Datastep, only certain token types are allowed in certain circumstances.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @throws Exception
                             */
                            SasParser.prototype.checkDataName = function (context) {
                                if (this.isDataNameState(context.unmaskedTokenisationState) && context.tokenType != null) {
                                    var error = true;
                                    switch ((context.tokenType)) {
                                        case com.wpc.wps.language.context.tokenisation.TokenType.identifier:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.identifier_string_literal:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.macro_keyword:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.macro_variable:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.macro_invocation:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.macro_function:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.semicolon:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.comment:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.punctuation:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.string_literal_fragment:
                                            error = false;
                                            break;
                                        case com.wpc.wps.language.context.tokenisation.TokenType.int_literal:
                                            switch ((context.prevTokenType)) {
                                                case com.wpc.wps.language.context.tokenisation.TokenType.macro_keyword:
                                                case com.wpc.wps.language.context.tokenisation.TokenType.macro_function:
                                                case com.wpc.wps.language.context.tokenisation.TokenType.macro_variable:
                                                case com.wpc.wps.language.context.tokenisation.TokenType.macro_invocation:
                                                    error = false;
                                                default:
                                                    break;
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                    if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroFunctionState) || (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.MacroInvocationExpressionState)) {
                                        error = false;
                                    }
                                    if (error) {
                                        this.dataNameError(context.token, context.getString());
                                    }
                                    if (context.stateChanged) {
                                        this.datastep(context.token);
                                    }
                                }
                            };
                            /**
                             * Check for Proc. The ProcOptionsState must have a {@link SasStepInfo} that is not
                             * {@link UnknownStepInfo} whose use indicates that the PROC was not found.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @throws Exception
                             */
                            SasParser.prototype.checkProc = function (context) {
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.ProcChooserState) && (context.unmaskedNextTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.ProcOptionsState)) {
                                    if (context.unmaskedNextTokenisationState.getStepInfo() instanceof com.wpc.wps.language.context.information.UnknownStepInfo) {
                                        this.unknownProc(context.token, context.getString());
                                    }
                                    else {
                                        this.proc(context.token, context.getString());
                                    }
                                }
                            };
                            /**
                             * Check step options. In {@link DataOptionsState} or {@link ProcOptionsState} (i.e. subclasses of
                             * {@link AbstractStepStateOptionsState}), valid options have {@link TokenType} of
                             * {@link TokenType#keyword}, if they're not supported they're {@link TokenType#identifier} unless
                             * they're inside brackets, e.g. PROC REPORT STYLE(header)=[].
                             *
                             * For {@link ProcOptionsState}, don't raise errors for unknown procs, it's not necessary as they
                             * would've already been reported as unknown procs.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @throws Exception
                             */
                            SasParser.prototype.checkStepOptions = function (context) {
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractStepStateOptionsState) && this.identifierOrKeyword(context)) {
                                    var valid = context.tokenType == TokenType.keyword;
                                    if (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.DataOptionsState) {
                                        if (valid) {
                                            this.datastepOption(context.token, context.getString());
                                        }
                                        else {
                                            this.unknownDatastepOption(context.token, context.getString());
                                        }
                                    }
                                    else if (context.unmaskedTokenisationState.getBracketCount() > 0) {
                                        return;
                                    }
                                    else if (context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.ProcOptionsState) {
                                        var procOptionsState = context.unmaskedTokenisationState;
                                        var procStepInfo = procOptionsState.getStepInfo();
                                        if (!(procStepInfo instanceof com.wpc.wps.language.context.information.UnknownStepInfo)) {
                                            var procName = procStepInfo.getLanguageInfo().getName();
                                            if (valid) {
                                                this.procOption(context.token, procName, context.getString());
                                            }
                                            else {
                                                this.unknownProcOption(context.token, procName, context.getString());
                                            }
                                        }
                                    }
                                }
                            };
                            /**
                             * Check System options. In {@link OptionsStatementState}, valid options have {@link TokenType} of
                             * {@link TokenType#keyword}, if they're not supported they're {@link TokenType#identifier}.
                             *
                             * Also checks: OPTIONS APPEND=&lt;system option>
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @throws Exception
                             */
                            SasParser.prototype.checkSystemOptions = function (context) {
                                var identifierOrKeyword = this.identifierOrKeyword(context);
                                var valid = context.tokenType == TokenType.keyword;
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.OptionsStatementState) && identifierOrKeyword) {
                                    if (valid) {
                                        this.systemOption(context.token, context.getString());
                                    }
                                    else {
                                        this.unknownSystemOption(context.token, context.getString());
                                    }
                                }
                                else if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.OptionValueState) && context.unmaskedTokenisationState.isSystemOptionsAppendInsertValue() && identifierOrKeyword) {
                                    if (valid) {
                                        this.systemOption(context.token, context.getString());
                                    }
                                    else {
                                        this.unknownSystemOption(context.token, context.getString());
                                    }
                                }
                            };
                            /**
                             * Check the {@link TokenType} of the current token.
                             *
                             * @param context context, contains previous Token, current Token, next {@link ITokenisationState}
                             * etc
                             * @return true if it's an {@link TokenType#identifier} or {@link TokenType#keyword}
                             */
                            SasParser.prototype.identifierOrKeyword = function (context) {
                                return context.tokenType == TokenType.identifier || context.tokenType == TokenType.keyword;
                            };
                            SasParser.prototype.checkFunction = function (context) {
                                var statementParentState = context.unmaskedTokenisationState.getStatementParentState();
                                if ((context.unmaskedTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.AbstractExpressionState) && (statementParentState != null && statementParentState["__interfaces"] != null && statementParentState["__interfaces"].indexOf("com.wpc.wps.language.context.tokenisation.state.ArrayDefinitionState") >= 0) && !this.isInProcSql(context.unmaskedTokenisationState) && !(context.unmaskedPrevTokenisationState instanceof com.wpc.wps.language.context.tokenisation.state.CallRoutineChooserState) && !this.isInProcIml(context.unmaskedTokenisationState)) {
                                    var ads = statementParentState;
                                    switch ((context.tokenType)) {
                                        case com.wpc.wps.language.context.tokenisation.TokenType.curlybrace:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.squarebracket:
                                        case com.wpc.wps.language.context.tokenisation.TokenType.parenthesis:
                                            var bracketOpen = SasLanguage.isBracketOpen(context.getString().charAt(0));
                                            var identifier = context.getUpperPrevString();
                                            if (bracketOpen && context.prevTokenType == TokenType.identifier) {
                                                var arrayName = context.getUpperPrevString();
                                                if (ads.getDefinedArrayNames() == null || !ads.getDefinedArrayNames().contains(arrayName)) {
                                                    this.unknownDatastepFunction(context.prevToken, arrayName);
                                                }
                                            }
                                            else if (bracketOpen && context.prevTokenType == TokenType._function) {
                                                var langInfo = this.functionHelper.getFunctionLanguageInfo(context.unmaskedPrevTokenisationState, identifier);
                                                if (langInfo != null && langInfo.isNumbered()) {
                                                    identifier = langInfo.getName();
                                                }
                                                this.datastepFunction(context.prevToken, identifier);
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            };
                            /**
                             *
                             * @return true if currently in PROC IML.
                             */
                            SasParser.prototype.isInProcIml = function (state) {
                                return (state.getStatementParentState() instanceof com.wpc.wps.language.context.tokenisation.state.ProcImlStepState);
                            };
                            /**
                             *
                             * @return true if currently in PROC SQL.
                             */
                            SasParser.prototype.isInProcSql = function (state) {
                                return (state.getStatementParentState() instanceof com.wpc.wps.language.context.tokenisation.state.ProcSqlStepState);
                            };
                            /**
                             * Null safe invocation of {@link #expressionParser}
                             *
                             * @param tokens
                             * @throws Exception
                             */
                            SasParser.prototype.parseExpression = function (tokens) {
                                if (this.expressionParser != null && tokens != null && tokens.size() > 0) {
                                    var firstTokenState = tokens.get(0).getState();
                                    this.expressionParser.parseExpression(this.strLookup, this.parseErrorListener, tokens, this.isInProcIml(firstTokenState));
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParserDelegate} from {@link #parserDelegateStore}.
                             *
                             * @param tokens
                             * @throws Exception
                             */
                            SasParser.prototype.parseStatement = function (tokens) {
                                var statementParser = null;
                                if (this.currentStatement != null) {
                                    statementParser = this.parserDelegateStore.getStatementParser(this.stepInfo, this.currentStatement);
                                }
                                else if (tokens.size() > 0 && tokens.get(0).getTokenType() == TokenType.keyword) {
                                    statementParser = this.parserDelegateStore.getStatementParserByName("", StringUtils.toUpperCase(this.strLookup.getString(tokens.get(0))));
                                }
                                else if (this.currentStatement == null) {
                                    statementParser = this.parserDelegateStore.getStatementParser(this.stepInfo, null);
                                }
                                if (statementParser != null) {
                                    statementParser.parse(tokens, this.parseListener, this.parseErrorListener, this.strLookup);
                                }
                                var token = tokens.get(0);
                                var statementParentState = token.getState().getStatementParentState();
                                var string = this.strLookup.getString(token);
                                if (token.getTokenType() == TokenType.keyword) {
                                    if (statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.ProcStepState) {
                                        var procStepState = statementParentState;
                                        this.procStatement(token, procStepState.getCurrentStep().getLanguageInfo().getName(), string);
                                    }
                                    else if (statementParentState instanceof com.wpc.wps.language.context.tokenisation.state.DataStepState) {
                                        this.dataStatement(token, string);
                                    }
                                    else {
                                        this.globalStatement(token, string);
                                    }
                                }
                            };
                            SasParser.prototype.getLogger = function () {
                                return this.log;
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownProc(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.unknownProc = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownProc(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownProcOption(Token, String, String)}.
                             *
                             * @param token
                             * @param procName
                             * @param optionName
                             * @throws Exception
                             */
                            SasParser.prototype.unknownProcOption = function (token, procName, optionName) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownProcOption(token, procName, optionName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownSystemOption(Token, String)}.
                             *
                             * @param token
                             * @param optionName
                             * @throws Exception
                             */
                            SasParser.prototype.unknownSystemOption = function (token, optionName) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownSystemOption(token, optionName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownDatastepFunction(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.unknownDatastepFunction = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownDatastepFunction(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownDatastepOption(Token, String)}.
                             *
                             * @param token
                             * @param optionName
                             * @throws Exception
                             */
                            SasParser.prototype.unknownDatastepOption = function (token, optionName) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownDatastepOption(token, optionName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownGlobalStatement(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.unknownGlobalStatement = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownGlobalStatement(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownProcStatement(Token, String, String)}.
                             *
                             * @param token
                             * @param procName
                             * @param stmtName
                             * @throws Exception
                             */
                            SasParser.prototype.unknownProcStatement = function (token, procName, stmtName) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownProcStatement(token, procName, stmtName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownDataStatement(Token, String)}.
                             *
                             * @param token
                             * @param stmtName
                             * @throws Exception
                             */
                            SasParser.prototype.unknownDataStatement = function (token, stmtName) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownDataStatement(token, stmtName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#badExpression(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.badExpression = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.badExpression(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#statementError(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.statementError = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.statementError(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#macroNameError(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.macroNameError = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.macroNameError(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#dataNameError(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.dataNameError = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.dataNameError(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownCallRoutine(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.unknownCallRoutine = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownCallRoutine(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseErrorListener#unknownOdsDestination(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.unknownOdsDestination = function (token, string) {
                                if (this.parseErrorListener != null) {
                                    this.parseErrorListener.unknownOdsDestination(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#proc(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.proc = function (token, string) {
                                if (this.parseListener != null) {
                                    this.parseListener.proc(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#procOption(Token, String, String)}.
                             *
                             * @param token
                             * @param procName
                             * @param optionName
                             * @throws Exception
                             */
                            SasParser.prototype.procOption = function (token, procName, optionName) {
                                if (this.parseListener != null) {
                                    this.parseListener.procOption(token, procName, optionName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#systemOption(Token, String)}.
                             *
                             * @param token
                             * @param optionName
                             * @throws Exception
                             */
                            SasParser.prototype.systemOption = function (token, optionName) {
                                if (this.parseListener != null) {
                                    this.parseListener.systemOption(token, optionName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#datastep(Token)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.datastep = function (token) {
                                if (this.parseListener != null) {
                                    this.parseListener.datastep(token);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#datastepFunction(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.datastepFunction = function (token, string) {
                                if (this.parseListener != null) {
                                    this.parseListener.datastepFunction(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#datastepOption(Token, String)}.
                             *
                             * @param token
                             * @param optionName
                             * @throws Exception
                             */
                            SasParser.prototype.datastepOption = function (token, optionName) {
                                if (this.parseListener != null) {
                                    this.parseListener.datastepOption(token, optionName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#globalStatement(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.globalStatement = function (token, string) {
                                if (this.parseListener != null) {
                                    this.parseListener.globalStatement(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#procStatement(Token, String, String)}.
                             *
                             * @param token
                             * @param procName
                             * @param stmtName
                             * @throws Exception
                             */
                            SasParser.prototype.procStatement = function (token, procName, stmtName) {
                                if (this.parseListener != null) {
                                    this.parseListener.procStatement(token, procName, stmtName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#dataStatement(Token, String)}.
                             *
                             * @param token
                             * @param stmtName
                             * @throws Exception
                             */
                            SasParser.prototype.dataStatement = function (token, stmtName) {
                                if (this.parseListener != null) {
                                    this.parseListener.dataStatement(token, stmtName);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#callRoutine(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.callRoutine = function (token, string) {
                                if (this.parseListener != null) {
                                    this.parseListener.callRoutine(token, string);
                                }
                            };
                            /**
                             * Null safe invocation of {@link ParseListener#odsDestination(Token, String)}.
                             *
                             * @param token
                             * @param string
                             * @throws Exception
                             */
                            SasParser.prototype.odsDestination = function (token, string) {
                                if (this.parseListener != null) {
                                    this.parseListener.odsDestination(token, string);
                                }
                            };
                            return SasParser;
                        }(model.TokenProcessor));
                        model.SasParser = SasParser;
                    })(model = context_26.model || (context_26.model = {}));
                })(context = language.context || (language.context = {}));
            })(language = wps.language || (wps.language = {}));
        })(wps = wpc.wps || (wpc.wps = {}));
    })(wpc = com.wpc || (com.wpc = {}));
})(com || (com = {}));
